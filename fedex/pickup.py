#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Nov 28 15:43:24 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, Residential=None):
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.Residential = Residential
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False):
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('<%sStreetLines>%s</%sStreetLines>\n' % (namespace_, self.gds_format_string(quote_xml(StreetLines_).encode(ExternalEncoding), input_name='StreetLines'), namespace_))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('<%sCity>%s</%sCity>\n' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateOrProvinceCode).encode(ExternalEncoding), input_name='StateOrProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.UrbanizationCode).encode(ExternalEncoding), input_name='UrbanizationCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidential>%s</%sResidential>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Residential)), input_name='Residential'), namespace_))
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.Residential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('StreetLines=[\n')
        level += 1
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(StreetLines_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateOrProvinceCode=%s,\n' % quote_python(self.StateOrProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('UrbanizationCode=%s,\n' % quote_python(self.UrbanizationCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('Residential=%s,\n' % self.Residential)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
# end class Address


class AssociatedAccount(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, AccountNumber=None):
        self.Type = Type
        self.AccountNumber = AccountNumber
    def factory(*args_, **kwargs_):
        if AssociatedAccount.subclass:
            return AssociatedAccount.subclass(*args_, **kwargs_)
        else:
            return AssociatedAccount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_AssociatedAccountNumberType(self, value):
        # Validate type AssociatedAccountNumberType, a restriction on xs:string.
        pass
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def export(self, outfile, level, namespace_='ns:', name_='AssociatedAccount', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssociatedAccount')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AssociatedAccount'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AssociatedAccount', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.AccountNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AssociatedAccount'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_AssociatedAccountNumberType(self.Type)    # validate type AssociatedAccountNumberType
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
# end class AssociatedAccount


class CancelPickupReply(GeneratedsSuper):
    """The descriptive data returned to a client in response to a cancel
    dispatch request."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Message=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.Message = Message
    def factory(*args_, **kwargs_):
        if CancelPickupReply.subclass:
            return CancelPickupReply.subclass(*args_, **kwargs_)
        else:
            return CancelPickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def export(self, outfile, level, namespace_='ns:', name_='CancelPickupReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CancelPickupReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CancelPickupReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CancelPickupReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Message is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CancelPickupReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
# end class CancelPickupReply


class CancelPickupRequest(GeneratedsSuper):
    """The descriptive data to cancel a shipment pickup request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, CarrierCode=None, PickupConfirmationNumber=None, ScheduledDate=None, EndDate=None, Location=None, Remarks=None, ShippingChargesPayment=None, Reason=None, ContactName=None, PhoneNumber=None, PhoneExtension=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CarrierCode = CarrierCode
        self.PickupConfirmationNumber = PickupConfirmationNumber
        self.ScheduledDate = ScheduledDate
        self.EndDate = EndDate
        self.Location = Location
        self.Remarks = Remarks
        self.ShippingChargesPayment = ShippingChargesPayment
        self.Reason = Reason
        self.ContactName = ContactName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
    def factory(*args_, **kwargs_):
        if CancelPickupRequest.subclass:
            return CancelPickupRequest.subclass(*args_, **kwargs_)
        else:
            return CancelPickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_PickupConfirmationNumber(self): return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber): self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_ScheduledDate(self): return self.ScheduledDate
    def set_ScheduledDate(self, ScheduledDate): self.ScheduledDate = ScheduledDate
    def get_EndDate(self): return self.EndDate
    def set_EndDate(self, EndDate): self.EndDate = EndDate
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_Remarks(self): return self.Remarks
    def set_Remarks(self, Remarks): self.Remarks = Remarks
    def get_ShippingChargesPayment(self): return self.ShippingChargesPayment
    def set_ShippingChargesPayment(self, ShippingChargesPayment): self.ShippingChargesPayment = ShippingChargesPayment
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def export(self, outfile, level, namespace_='ns:', name_='CancelPickupRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CancelPickupRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CancelPickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CancelPickupRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickupConfirmationNumber>%s</%sPickupConfirmationNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickupConfirmationNumber).encode(ExternalEncoding), input_name='PickupConfirmationNumber'), namespace_))
        if self.ScheduledDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sScheduledDate>%s</%sScheduledDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ScheduledDate).encode(ExternalEncoding), input_name='ScheduledDate'), namespace_))
        if self.EndDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sEndDate>%s</%sEndDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.EndDate).encode(ExternalEncoding), input_name='EndDate'), namespace_))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocation>%s</%sLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.Location).encode(ExternalEncoding), input_name='Location'), namespace_))
        if self.Remarks is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarks>%s</%sRemarks>\n' % (namespace_, self.gds_format_string(quote_xml(self.Remarks).encode(ExternalEncoding), input_name='Remarks'), namespace_))
        if self.ShippingChargesPayment:
            self.ShippingChargesPayment.export(outfile, level, namespace_, name_='ShippingChargesPayment')
        if self.Reason is not None:
            showIndent(outfile, level)
            outfile.write('<%sReason>%s</%sReason>\n' % (namespace_, self.gds_format_string(quote_xml(self.Reason).encode(ExternalEncoding), input_name='Reason'), namespace_))
        if self.ContactName is not None:
            showIndent(outfile, level)
            outfile.write('<%sContactName>%s</%sContactName>\n' % (namespace_, self.gds_format_string(quote_xml(self.ContactName).encode(ExternalEncoding), input_name='ContactName'), namespace_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneExtension).encode(ExternalEncoding), input_name='PhoneExtension'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CarrierCode is not None or
            self.PickupConfirmationNumber is not None or
            self.ScheduledDate is not None or
            self.EndDate is not None or
            self.Location is not None or
            self.Remarks is not None or
            self.ShippingChargesPayment is not None or
            self.Reason is not None or
            self.ContactName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CancelPickupRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('PickupConfirmationNumber=%s,\n' % quote_python(self.PickupConfirmationNumber).encode(ExternalEncoding))
        if self.ScheduledDate is not None:
            showIndent(outfile, level)
            outfile.write('ScheduledDate=%s,\n' % quote_python(self.ScheduledDate).encode(ExternalEncoding))
        if self.EndDate is not None:
            showIndent(outfile, level)
            outfile.write('EndDate=%s,\n' % quote_python(self.EndDate).encode(ExternalEncoding))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=%s,\n' % quote_python(self.Location).encode(ExternalEncoding))
        if self.Remarks is not None:
            showIndent(outfile, level)
            outfile.write('Remarks=%s,\n' % quote_python(self.Remarks).encode(ExternalEncoding))
        if self.ShippingChargesPayment is not None:
            showIndent(outfile, level)
            outfile.write('ShippingChargesPayment=model_.Payment(\n')
            self.ShippingChargesPayment.exportLiteral(outfile, level, name_='ShippingChargesPayment')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Reason is not None:
            showIndent(outfile, level)
            outfile.write('Reason=%s,\n' % quote_python(self.Reason).encode(ExternalEncoding))
        if self.ContactName is not None:
            showIndent(outfile, level)
            outfile.write('ContactName=%s,\n' % quote_python(self.ContactName).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('PhoneExtension=%s,\n' % quote_python(self.PhoneExtension).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'PickupConfirmationNumber':
            PickupConfirmationNumber_ = child_.text
            PickupConfirmationNumber_ = self.gds_validate_string(PickupConfirmationNumber_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = PickupConfirmationNumber_
        elif nodeName_ == 'ScheduledDate':
            ScheduledDate_ = child_.text
            ScheduledDate_ = self.gds_validate_string(ScheduledDate_, node, 'ScheduledDate')
            self.ScheduledDate = ScheduledDate_
        elif nodeName_ == 'EndDate':
            EndDate_ = child_.text
            EndDate_ = self.gds_validate_string(EndDate_, node, 'EndDate')
            self.EndDate = EndDate_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'Remarks':
            Remarks_ = child_.text
            Remarks_ = self.gds_validate_string(Remarks_, node, 'Remarks')
            self.Remarks = Remarks_
        elif nodeName_ == 'ShippingChargesPayment':
            obj_ = Payment.factory()
            obj_.build(child_)
            self.set_ShippingChargesPayment(obj_)
        elif nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
        elif nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
# end class CancelPickupRequest


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, MeterInstance=None, IntegratorId=None, Region=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.MeterInstance = MeterInstance
        self.IntegratorId = IntegratorId
        self.Region = Region
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_MeterInstance(self): return self.MeterInstance
    def set_MeterInstance(self, MeterInstance): self.MeterInstance = MeterInstance
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Region(self): return self.Region
    def set_Region(self, Region): self.Region = Region
    def validate_ExpressRegionCode(self, value):
        # Validate type ExpressRegionCode, a restriction on xs:string.
        pass
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.MeterInstance is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterInstance>%s</%sMeterInstance>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterInstance).encode(ExternalEncoding), input_name='MeterInstance'), namespace_))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>\n' % (namespace_, self.gds_format_string(quote_xml(self.IntegratorId).encode(ExternalEncoding), input_name='IntegratorId'), namespace_))
        if self.Region is not None:
            showIndent(outfile, level)
            outfile.write('<%sRegion>%s</%sRegion>\n' % (namespace_, self.gds_format_string(quote_xml(self.Region).encode(ExternalEncoding), input_name='Region'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.MeterInstance is not None or
            self.IntegratorId is not None or
            self.Region is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.MeterInstance is not None:
            showIndent(outfile, level)
            outfile.write('MeterInstance=%s,\n' % quote_python(self.MeterInstance).encode(ExternalEncoding))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('IntegratorId=%s,\n' % quote_python(self.IntegratorId).encode(ExternalEncoding))
        if self.Region is not None:
            showIndent(outfile, level)
            outfile.write('Region=%s,\n' % quote_python(self.Region).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'MeterInstance':
            MeterInstance_ = child_.text
            MeterInstance_ = self.gds_validate_string(MeterInstance_, node, 'MeterInstance')
            self.MeterInstance = MeterInstance_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Region':
            Region_ = child_.text
            Region_ = self.gds_validate_string(Region_, node, 'Region')
            self.Region = Region_
            self.validate_ExpressRegionCode(self.Region)    # validate type ExpressRegionCode
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class CodAddTransportationChargesDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RateTypeBasis=None, ChargeBasis=None, ChargeBasisLevel=None):
        self.RateTypeBasis = RateTypeBasis
        self.ChargeBasis = ChargeBasis
        self.ChargeBasisLevel = ChargeBasisLevel
    def factory(*args_, **kwargs_):
        if CodAddTransportationChargesDetail.subclass:
            return CodAddTransportationChargesDetail.subclass(*args_, **kwargs_)
        else:
            return CodAddTransportationChargesDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RateTypeBasis(self): return self.RateTypeBasis
    def set_RateTypeBasis(self, RateTypeBasis): self.RateTypeBasis = RateTypeBasis
    def validate_RateTypeBasisType(self, value):
        # Validate type RateTypeBasisType, a restriction on xs:string.
        pass
    def get_ChargeBasis(self): return self.ChargeBasis
    def set_ChargeBasis(self, ChargeBasis): self.ChargeBasis = ChargeBasis
    def validate_CodAddTransportationChargeBasisType(self, value):
        # Validate type CodAddTransportationChargeBasisType, a restriction on xs:string.
        pass
    def get_ChargeBasisLevel(self): return self.ChargeBasisLevel
    def set_ChargeBasisLevel(self, ChargeBasisLevel): self.ChargeBasisLevel = ChargeBasisLevel
    def validate_ChargeBasisLevelType(self, value):
        # Validate type ChargeBasisLevelType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='CodAddTransportationChargesDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodAddTransportationChargesDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CodAddTransportationChargesDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CodAddTransportationChargesDetail', fromsubclass_=False):
        if self.RateTypeBasis is not None:
            showIndent(outfile, level)
            outfile.write('<%sRateTypeBasis>%s</%sRateTypeBasis>\n' % (namespace_, self.gds_format_string(quote_xml(self.RateTypeBasis).encode(ExternalEncoding), input_name='RateTypeBasis'), namespace_))
        if self.ChargeBasis is not None:
            showIndent(outfile, level)
            outfile.write('<%sChargeBasis>%s</%sChargeBasis>\n' % (namespace_, self.gds_format_string(quote_xml(self.ChargeBasis).encode(ExternalEncoding), input_name='ChargeBasis'), namespace_))
        if self.ChargeBasisLevel is not None:
            showIndent(outfile, level)
            outfile.write('<%sChargeBasisLevel>%s</%sChargeBasisLevel>\n' % (namespace_, self.gds_format_string(quote_xml(self.ChargeBasisLevel).encode(ExternalEncoding), input_name='ChargeBasisLevel'), namespace_))
    def hasContent_(self):
        if (
            self.RateTypeBasis is not None or
            self.ChargeBasis is not None or
            self.ChargeBasisLevel is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodAddTransportationChargesDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RateTypeBasis is not None:
            showIndent(outfile, level)
            outfile.write('RateTypeBasis=%s,\n' % quote_python(self.RateTypeBasis).encode(ExternalEncoding))
        if self.ChargeBasis is not None:
            showIndent(outfile, level)
            outfile.write('ChargeBasis=%s,\n' % quote_python(self.ChargeBasis).encode(ExternalEncoding))
        if self.ChargeBasisLevel is not None:
            showIndent(outfile, level)
            outfile.write('ChargeBasisLevel=%s,\n' % quote_python(self.ChargeBasisLevel).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RateTypeBasis':
            RateTypeBasis_ = child_.text
            RateTypeBasis_ = self.gds_validate_string(RateTypeBasis_, node, 'RateTypeBasis')
            self.RateTypeBasis = RateTypeBasis_
            self.validate_RateTypeBasisType(self.RateTypeBasis)    # validate type RateTypeBasisType
        elif nodeName_ == 'ChargeBasis':
            ChargeBasis_ = child_.text
            ChargeBasis_ = self.gds_validate_string(ChargeBasis_, node, 'ChargeBasis')
            self.ChargeBasis = ChargeBasis_
            self.validate_CodAddTransportationChargeBasisType(self.ChargeBasis)    # validate type CodAddTransportationChargeBasisType
        elif nodeName_ == 'ChargeBasisLevel':
            ChargeBasisLevel_ = child_.text
            ChargeBasisLevel_ = self.gds_validate_string(ChargeBasisLevel_, node, 'ChargeBasisLevel')
            self.ChargeBasisLevel = ChargeBasisLevel_
            self.validate_ChargeBasisLevelType(self.ChargeBasisLevel)    # validate type ChargeBasisLevelType
# end class CodAddTransportationChargesDetail


class CodDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx COD (Collect-On-Delivery)
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, CodCollectionAmount=None, AddTransportationChargesDetail=None, CollectionType=None, CodRecipient=None, ReferenceIndicator=None):
        self.CodCollectionAmount = CodCollectionAmount
        self.AddTransportationChargesDetail = AddTransportationChargesDetail
        self.CollectionType = CollectionType
        self.CodRecipient = CodRecipient
        self.ReferenceIndicator = ReferenceIndicator
    def factory(*args_, **kwargs_):
        if CodDetail.subclass:
            return CodDetail.subclass(*args_, **kwargs_)
        else:
            return CodDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CodCollectionAmount(self): return self.CodCollectionAmount
    def set_CodCollectionAmount(self, CodCollectionAmount): self.CodCollectionAmount = CodCollectionAmount
    def get_AddTransportationChargesDetail(self): return self.AddTransportationChargesDetail
    def set_AddTransportationChargesDetail(self, AddTransportationChargesDetail): self.AddTransportationChargesDetail = AddTransportationChargesDetail
    def get_CollectionType(self): return self.CollectionType
    def set_CollectionType(self, CollectionType): self.CollectionType = CollectionType
    def validate_CodCollectionType(self, value):
        # Validate type CodCollectionType, a restriction on xs:string.
        pass
    def get_CodRecipient(self): return self.CodRecipient
    def set_CodRecipient(self, CodRecipient): self.CodRecipient = CodRecipient
    def get_ReferenceIndicator(self): return self.ReferenceIndicator
    def set_ReferenceIndicator(self, ReferenceIndicator): self.ReferenceIndicator = ReferenceIndicator
    def validate_CodReturnReferenceIndicatorType(self, value):
        # Validate type CodReturnReferenceIndicatorType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='CodDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CodDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CodDetail', fromsubclass_=False):
        if self.CodCollectionAmount:
            self.CodCollectionAmount.export(outfile, level, namespace_, name_='CodCollectionAmount')
        if self.AddTransportationChargesDetail:
            self.AddTransportationChargesDetail.export(outfile, level, namespace_, name_='AddTransportationChargesDetail')
        if self.CollectionType is not None:
            showIndent(outfile, level)
            outfile.write('<%sCollectionType>%s</%sCollectionType>\n' % (namespace_, self.gds_format_string(quote_xml(self.CollectionType).encode(ExternalEncoding), input_name='CollectionType'), namespace_))
        if self.CodRecipient:
            self.CodRecipient.export(outfile, level, namespace_, name_='CodRecipient')
        if self.ReferenceIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sReferenceIndicator>%s</%sReferenceIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReferenceIndicator).encode(ExternalEncoding), input_name='ReferenceIndicator'), namespace_))
    def hasContent_(self):
        if (
            self.CodCollectionAmount is not None or
            self.AddTransportationChargesDetail is not None or
            self.CollectionType is not None or
            self.CodRecipient is not None or
            self.ReferenceIndicator is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CodCollectionAmount is not None:
            showIndent(outfile, level)
            outfile.write('CodCollectionAmount=model_.Money(\n')
            self.CodCollectionAmount.exportLiteral(outfile, level, name_='CodCollectionAmount')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AddTransportationChargesDetail is not None:
            showIndent(outfile, level)
            outfile.write('AddTransportationChargesDetail=model_.CodAddTransportationChargesDetail(\n')
            self.AddTransportationChargesDetail.exportLiteral(outfile, level, name_='AddTransportationChargesDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CollectionType is not None:
            showIndent(outfile, level)
            outfile.write('CollectionType=%s,\n' % quote_python(self.CollectionType).encode(ExternalEncoding))
        if self.CodRecipient is not None:
            showIndent(outfile, level)
            outfile.write('CodRecipient=model_.Party(\n')
            self.CodRecipient.exportLiteral(outfile, level, name_='CodRecipient')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReferenceIndicator is not None:
            showIndent(outfile, level)
            outfile.write('ReferenceIndicator=%s,\n' % quote_python(self.ReferenceIndicator).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodCollectionAmount':
            obj_ = Money.factory()
            obj_.build(child_)
            self.set_CodCollectionAmount(obj_)
        elif nodeName_ == 'AddTransportationChargesDetail':
            obj_ = CodAddTransportationChargesDetail.factory()
            obj_.build(child_)
            self.set_AddTransportationChargesDetail(obj_)
        elif nodeName_ == 'CollectionType':
            CollectionType_ = child_.text
            CollectionType_ = self.gds_validate_string(CollectionType_, node, 'CollectionType')
            self.CollectionType = CollectionType_
            self.validate_CodCollectionType(self.CollectionType)    # validate type CodCollectionType
        elif nodeName_ == 'CodRecipient':
            obj_ = Party.factory()
            obj_.build(child_)
            self.set_CodRecipient(obj_)
        elif nodeName_ == 'ReferenceIndicator':
            ReferenceIndicator_ = child_.text
            ReferenceIndicator_ = self.gds_validate_string(ReferenceIndicator_, node, 'ReferenceIndicator')
            self.ReferenceIndicator = ReferenceIndicator_
            self.validate_CodReturnReferenceIndicatorType(self.ReferenceIndicator)    # validate type CodReturnReferenceIndicatorType
# end class CodDetail


class CompletedFreightPickupDetail(GeneratedsSuper):
    """Data resulting from the processing of an LTL Freight pickup request."""
    subclass = None
    superclass = None
    def __init__(self, Origin=None, LineItems=None, TotalPieces=None, TotalWeight=None, TotalHandlingUnits=None, Status=None):
        self.Origin = Origin
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
        self.TotalPieces = TotalPieces
        self.TotalWeight = TotalWeight
        self.TotalHandlingUnits = TotalHandlingUnits
        self.Status = Status
    def factory(*args_, **kwargs_):
        if CompletedFreightPickupDetail.subclass:
            return CompletedFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Origin(self): return self.Origin
    def set_Origin(self, Origin): self.Origin = Origin
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems(self, index, value): self.LineItems[index] = value
    def get_TotalPieces(self): return self.TotalPieces
    def set_TotalPieces(self, TotalPieces): self.TotalPieces = TotalPieces
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_TotalHandlingUnits(self): return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits): self.TotalHandlingUnits = TotalHandlingUnits
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def validate_PickupEventType(self, value):
        # Validate type PickupEventType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompletedFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CompletedFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupDetail', fromsubclass_=False):
        if self.Origin:
            self.Origin.export(outfile, level, namespace_, name_='Origin')
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems')
        if self.TotalPieces is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalPieces>%s</%sTotalPieces>\n' % (namespace_, self.gds_format_integer(self.TotalPieces, input_name='TotalPieces'), namespace_))
        if self.TotalWeight:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight')
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>\n' % (namespace_, self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespace_))
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatus>%s</%sStatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.Status).encode(ExternalEncoding), input_name='Status'), namespace_))
    def hasContent_(self):
        if (
            self.Origin is not None or
            self.LineItems or
            self.TotalPieces is not None or
            self.TotalWeight is not None or
            self.TotalHandlingUnits is not None or
            self.Status is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompletedFreightPickupDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Origin is not None:
            showIndent(outfile, level)
            outfile.write('Origin=model_.FreightServiceCenterDetail(\n')
            self.Origin.exportLiteral(outfile, level, name_='Origin')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('LineItems=[\n')
        level += 1
        for LineItems_ in self.LineItems:
            showIndent(outfile, level)
            outfile.write('model_.CompletedFreightPickupLineItem(\n')
            LineItems_.exportLiteral(outfile, level, name_='CompletedFreightPickupLineItem')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TotalPieces is not None:
            showIndent(outfile, level)
            outfile.write('TotalPieces=%d,\n' % self.TotalPieces)
        if self.TotalWeight is not None:
            showIndent(outfile, level)
            outfile.write('TotalWeight=model_.Weight(\n')
            self.TotalWeight.exportLiteral(outfile, level, name_='TotalWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level)
            outfile.write('TotalHandlingUnits=%d,\n' % self.TotalHandlingUnits)
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('Status=%s,\n' % quote_python(self.Status).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Origin':
            obj_ = FreightServiceCenterDetail.factory()
            obj_.build(child_)
            self.set_Origin(obj_)
        elif nodeName_ == 'LineItems':
            obj_ = CompletedFreightPickupLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
        elif nodeName_ == 'TotalPieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalPieces')
            self.TotalPieces = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_TotalWeight(obj_)
        elif nodeName_ == 'TotalHandlingUnits':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
        elif nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
            self.validate_PickupEventType(self.Status)    # validate type PickupEventType
# end class CompletedFreightPickupDetail


class CompletedFreightPickupLineItem(GeneratedsSuper):
    """Data resulting from the processing of an individual line item in a
    LTL Freight pickup request."""
    subclass = None
    superclass = None
    def __init__(self, SequenceNumber=None, Destination=None, TotalTravelTime=None, EtaDeliveryTimestamp=None):
        self.SequenceNumber = SequenceNumber
        self.Destination = Destination
        self.TotalTravelTime = TotalTravelTime
        self.EtaDeliveryTimestamp = EtaDeliveryTimestamp
    def factory(*args_, **kwargs_):
        if CompletedFreightPickupLineItem.subclass:
            return CompletedFreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return CompletedFreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SequenceNumber(self): return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber): self.SequenceNumber = SequenceNumber
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_TotalTravelTime(self): return self.TotalTravelTime
    def set_TotalTravelTime(self, TotalTravelTime): self.TotalTravelTime = TotalTravelTime
    def get_EtaDeliveryTimestamp(self): return self.EtaDeliveryTimestamp
    def set_EtaDeliveryTimestamp(self, EtaDeliveryTimestamp): self.EtaDeliveryTimestamp = EtaDeliveryTimestamp
    def export(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupLineItem', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompletedFreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CompletedFreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CompletedFreightPickupLineItem', fromsubclass_=False):
        if self.SequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>\n' % (namespace_, self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespace_))
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
        if self.TotalTravelTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalTravelTime>%s</%sTotalTravelTime>\n' % (namespace_, self.gds_format_string(quote_xml(self.TotalTravelTime).encode(ExternalEncoding), input_name='TotalTravelTime'), namespace_))
        if self.EtaDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sEtaDeliveryTimestamp>%s</%sEtaDeliveryTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.EtaDeliveryTimestamp).encode(ExternalEncoding), input_name='EtaDeliveryTimestamp'), namespace_))
    def hasContent_(self):
        if (
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.TotalTravelTime is not None or
            self.EtaDeliveryTimestamp is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompletedFreightPickupLineItem'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('SequenceNumber=%d,\n' % self.SequenceNumber)
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.FreightServiceCenterDetail(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalTravelTime is not None:
            showIndent(outfile, level)
            outfile.write('TotalTravelTime=%s,\n' % quote_python(self.TotalTravelTime).encode(ExternalEncoding))
        if self.EtaDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('EtaDeliveryTimestamp=%s,\n' % quote_python(self.EtaDeliveryTimestamp).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
        elif nodeName_ == 'Destination':
            obj_ = FreightServiceCenterDetail.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
        elif nodeName_ == 'TotalTravelTime':
            TotalTravelTime_ = child_.text
            TotalTravelTime_ = self.gds_validate_string(TotalTravelTime_, node, 'TotalTravelTime')
            self.TotalTravelTime = TotalTravelTime_
        elif nodeName_ == 'EtaDeliveryTimestamp':
            EtaDeliveryTimestamp_ = child_.text
            EtaDeliveryTimestamp_ = self.gds_validate_string(EtaDeliveryTimestamp_, node, 'EtaDeliveryTimestamp')
            self.EtaDeliveryTimestamp = EtaDeliveryTimestamp_
# end class CompletedFreightPickupLineItem


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    subclass = None
    superclass = None
    def __init__(self, ContactId=None, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.ContactId = ContactId
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactId(self): return self.ContactId
    def set_ContactId(self, ContactId): self.ContactId = ContactId
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def export(self, outfile, level, namespace_='ns:', name_='Contact', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Contact', fromsubclass_=False):
        if self.ContactId is not None:
            showIndent(outfile, level)
            outfile.write('<%sContactId>%s</%sContactId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ContactId).encode(ExternalEncoding), input_name='ContactId'), namespace_))
        if self.PersonName is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonName>%s</%sPersonName>\n' % (namespace_, self.gds_format_string(quote_xml(self.PersonName).encode(ExternalEncoding), input_name='PersonName'), namespace_))
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('<%sTitle>%s</%sTitle>\n' % (namespace_, self.gds_format_string(quote_xml(self.Title).encode(ExternalEncoding), input_name='Title'), namespace_))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneExtension).encode(ExternalEncoding), input_name='PhoneExtension'), namespace_))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagerNumber).encode(ExternalEncoding), input_name='PagerNumber'), namespace_))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.FaxNumber).encode(ExternalEncoding), input_name='FaxNumber'), namespace_))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailAddress).encode(ExternalEncoding), input_name='EMailAddress'), namespace_))
    def hasContent_(self):
        if (
            self.ContactId is not None or
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Contact'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ContactId is not None:
            showIndent(outfile, level)
            outfile.write('ContactId=%s,\n' % quote_python(self.ContactId).encode(ExternalEncoding))
        if self.PersonName is not None:
            showIndent(outfile, level)
            outfile.write('PersonName=%s,\n' % quote_python(self.PersonName).encode(ExternalEncoding))
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('Title=%s,\n' % quote_python(self.Title).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('PhoneExtension=%s,\n' % quote_python(self.PhoneExtension).encode(ExternalEncoding))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('PagerNumber=%s,\n' % quote_python(self.PagerNumber).encode(ExternalEncoding))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('FaxNumber=%s,\n' % quote_python(self.FaxNumber).encode(ExternalEncoding))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('EMailAddress=%s,\n' % quote_python(self.EMailAddress).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactId':
            ContactId_ = child_.text
            ContactId_ = self.gds_validate_string(ContactId_, node, 'ContactId')
            self.ContactId = ContactId_
        elif nodeName_ == 'PersonName':
            PersonName_ = child_.text
            PersonName_ = self.gds_validate_string(PersonName_, node, 'PersonName')
            self.PersonName = PersonName_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    """The descriptive data for a person or company entitiy doing business
    with FedEx."""
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None):
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', fromsubclass_=False):
        if self.Contact:
            self.Contact.export(outfile, level, namespace_, name_='Contact')
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address')
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactAndAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=model_.Contact(\n')
            self.Contact.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_Contact(obj_)
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ContactAndAddress


class CreatePickupReply(GeneratedsSuper):
    """The descriptive data returned to a client in response to a shipment
    pickup request."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, PickupConfirmationNumber=None, Location=None, MessageCode=None, Message=None, PRPControlNumber=None, LastAccessTime=None, CompletedFreightPickupDetail=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.PickupConfirmationNumber = PickupConfirmationNumber
        self.Location = Location
        self.MessageCode = MessageCode
        self.Message = Message
        self.PRPControlNumber = PRPControlNumber
        self.LastAccessTime = LastAccessTime
        self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
    def factory(*args_, **kwargs_):
        if CreatePickupReply.subclass:
            return CreatePickupReply.subclass(*args_, **kwargs_)
        else:
            return CreatePickupReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_PickupConfirmationNumber(self): return self.PickupConfirmationNumber
    def set_PickupConfirmationNumber(self, PickupConfirmationNumber): self.PickupConfirmationNumber = PickupConfirmationNumber
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_MessageCode(self): return self.MessageCode
    def set_MessageCode(self, MessageCode): self.MessageCode = MessageCode
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_PRPControlNumber(self): return self.PRPControlNumber
    def set_PRPControlNumber(self, PRPControlNumber): self.PRPControlNumber = PRPControlNumber
    def get_LastAccessTime(self): return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime): self.LastAccessTime = LastAccessTime
    def get_CompletedFreightPickupDetail(self): return self.CompletedFreightPickupDetail
    def set_CompletedFreightPickupDetail(self, CompletedFreightPickupDetail): self.CompletedFreightPickupDetail = CompletedFreightPickupDetail
    def export(self, outfile, level, namespace_='ns:', name_='CreatePickupReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreatePickupReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreatePickupReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreatePickupReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickupConfirmationNumber>%s</%sPickupConfirmationNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickupConfirmationNumber).encode(ExternalEncoding), input_name='PickupConfirmationNumber'), namespace_))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocation>%s</%sLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.Location).encode(ExternalEncoding), input_name='Location'), namespace_))
        if self.MessageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessageCode>%s</%sMessageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.MessageCode).encode(ExternalEncoding), input_name='MessageCode'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.PRPControlNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPRPControlNumber>%s</%sPRPControlNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PRPControlNumber).encode(ExternalEncoding), input_name='PRPControlNumber'), namespace_))
        if self.LastAccessTime:
            self.LastAccessTime.export(outfile, level, namespace_, name_='LastAccessTime')
        if self.CompletedFreightPickupDetail:
            self.CompletedFreightPickupDetail.export(outfile, level, namespace_, name_='CompletedFreightPickupDetail')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PickupConfirmationNumber is not None or
            self.Location is not None or
            self.MessageCode is not None or
            self.Message is not None or
            self.PRPControlNumber is not None or
            self.LastAccessTime is not None or
            self.CompletedFreightPickupDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreatePickupReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PickupConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('PickupConfirmationNumber=%s,\n' % quote_python(self.PickupConfirmationNumber).encode(ExternalEncoding))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=%s,\n' % quote_python(self.Location).encode(ExternalEncoding))
        if self.MessageCode is not None:
            showIndent(outfile, level)
            outfile.write('MessageCode=%s,\n' % quote_python(self.MessageCode).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.PRPControlNumber is not None:
            showIndent(outfile, level)
            outfile.write('PRPControlNumber=%s,\n' % quote_python(self.PRPControlNumber).encode(ExternalEncoding))
        if self.LastAccessTime is not None:
            showIndent(outfile, level)
            outfile.write('LastAccessTime=model_.xs_time(\n')
            self.LastAccessTime.exportLiteral(outfile, level, name_='LastAccessTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompletedFreightPickupDetail is not None:
            showIndent(outfile, level)
            outfile.write('CompletedFreightPickupDetail=model_.CompletedFreightPickupDetail(\n')
            self.CompletedFreightPickupDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'PickupConfirmationNumber':
            PickupConfirmationNumber_ = child_.text
            PickupConfirmationNumber_ = self.gds_validate_string(PickupConfirmationNumber_, node, 'PickupConfirmationNumber')
            self.PickupConfirmationNumber = PickupConfirmationNumber_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'MessageCode':
            MessageCode_ = child_.text
            MessageCode_ = self.gds_validate_string(MessageCode_, node, 'MessageCode')
            self.MessageCode = MessageCode_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'PRPControlNumber':
            PRPControlNumber_ = child_.text
            PRPControlNumber_ = self.gds_validate_string(PRPControlNumber_, node, 'PRPControlNumber')
            self.PRPControlNumber = PRPControlNumber_
        elif nodeName_ == 'LastAccessTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_LastAccessTime(obj_)
        elif nodeName_ == 'CompletedFreightPickupDetail':
            obj_ = CompletedFreightPickupDetail.factory()
            obj_.build(child_)
            self.set_CompletedFreightPickupDetail(obj_)
# end class CreatePickupReply


class CreatePickupRequest(GeneratedsSuper):
    """The descriptive data to schedule a FedEx package pickup request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, AssociatedAccountNumber=None, OriginDetail=None, FreightPickupDetail=None, ExpressFreightDetail=None, PackageCount=None, TotalWeight=None, CarrierCode=None, OversizePackageCount=None, Remarks=None, CommodityDescription=None, CountryRelationship=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.AssociatedAccountNumber = AssociatedAccountNumber
        self.OriginDetail = OriginDetail
        self.FreightPickupDetail = FreightPickupDetail
        self.ExpressFreightDetail = ExpressFreightDetail
        self.PackageCount = PackageCount
        self.TotalWeight = TotalWeight
        self.CarrierCode = CarrierCode
        self.OversizePackageCount = OversizePackageCount
        self.Remarks = Remarks
        self.CommodityDescription = CommodityDescription
        self.CountryRelationship = CountryRelationship
    def factory(*args_, **kwargs_):
        if CreatePickupRequest.subclass:
            return CreatePickupRequest.subclass(*args_, **kwargs_)
        else:
            return CreatePickupRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_AssociatedAccountNumber(self): return self.AssociatedAccountNumber
    def set_AssociatedAccountNumber(self, AssociatedAccountNumber): self.AssociatedAccountNumber = AssociatedAccountNumber
    def get_OriginDetail(self): return self.OriginDetail
    def set_OriginDetail(self, OriginDetail): self.OriginDetail = OriginDetail
    def get_FreightPickupDetail(self): return self.FreightPickupDetail
    def set_FreightPickupDetail(self, FreightPickupDetail): self.FreightPickupDetail = FreightPickupDetail
    def get_ExpressFreightDetail(self): return self.ExpressFreightDetail
    def set_ExpressFreightDetail(self, ExpressFreightDetail): self.ExpressFreightDetail = ExpressFreightDetail
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_OversizePackageCount(self): return self.OversizePackageCount
    def set_OversizePackageCount(self, OversizePackageCount): self.OversizePackageCount = OversizePackageCount
    def get_Remarks(self): return self.Remarks
    def set_Remarks(self, Remarks): self.Remarks = Remarks
    def get_CommodityDescription(self): return self.CommodityDescription
    def set_CommodityDescription(self, CommodityDescription): self.CommodityDescription = CommodityDescription
    def get_CountryRelationship(self): return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship): self.CountryRelationship = CountryRelationship
    def validate_CountryRelationshipType(self, value):
        # Validate type CountryRelationshipType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='CreatePickupRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreatePickupRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreatePickupRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreatePickupRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.AssociatedAccountNumber:
            self.AssociatedAccountNumber.export(outfile, level, namespace_, name_='AssociatedAccountNumber')
        if self.OriginDetail:
            self.OriginDetail.export(outfile, level, namespace_, name_='OriginDetail')
        if self.FreightPickupDetail:
            self.FreightPickupDetail.export(outfile, level, namespace_, name_='FreightPickupDetail')
        if self.ExpressFreightDetail:
            self.ExpressFreightDetail.export(outfile, level, namespace_, name_='ExpressFreightDetail')
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackageCount>%s</%sPackageCount>\n' % (namespace_, self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespace_))
        if self.TotalWeight:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight')
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.OversizePackageCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sOversizePackageCount>%s</%sOversizePackageCount>\n' % (namespace_, self.gds_format_integer(self.OversizePackageCount, input_name='OversizePackageCount'), namespace_))
        if self.Remarks is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemarks>%s</%sRemarks>\n' % (namespace_, self.gds_format_string(quote_xml(self.Remarks).encode(ExternalEncoding), input_name='Remarks'), namespace_))
        if self.CommodityDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sCommodityDescription>%s</%sCommodityDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.CommodityDescription).encode(ExternalEncoding), input_name='CommodityDescription'), namespace_))
        if self.CountryRelationship is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryRelationship>%s</%sCountryRelationship>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryRelationship).encode(ExternalEncoding), input_name='CountryRelationship'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.AssociatedAccountNumber is not None or
            self.OriginDetail is not None or
            self.FreightPickupDetail is not None or
            self.ExpressFreightDetail is not None or
            self.PackageCount is not None or
            self.TotalWeight is not None or
            self.CarrierCode is not None or
            self.OversizePackageCount is not None or
            self.Remarks is not None or
            self.CommodityDescription is not None or
            self.CountryRelationship is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreatePickupRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssociatedAccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AssociatedAccountNumber=model_.AssociatedAccount(\n')
            self.AssociatedAccountNumber.exportLiteral(outfile, level, name_='AssociatedAccountNumber')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OriginDetail is not None:
            showIndent(outfile, level)
            outfile.write('OriginDetail=model_.PickupOriginDetail(\n')
            self.OriginDetail.exportLiteral(outfile, level, name_='OriginDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FreightPickupDetail is not None:
            showIndent(outfile, level)
            outfile.write('FreightPickupDetail=model_.FreightPickupDetail(\n')
            self.FreightPickupDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpressFreightDetail is not None:
            showIndent(outfile, level)
            outfile.write('ExpressFreightDetail=model_.ExpressFreightPickupDetail(\n')
            self.ExpressFreightDetail.exportLiteral(outfile, level, name_='ExpressFreightDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('PackageCount=%d,\n' % self.PackageCount)
        if self.TotalWeight is not None:
            showIndent(outfile, level)
            outfile.write('TotalWeight=model_.Weight(\n')
            self.TotalWeight.exportLiteral(outfile, level, name_='TotalWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.OversizePackageCount is not None:
            showIndent(outfile, level)
            outfile.write('OversizePackageCount=%d,\n' % self.OversizePackageCount)
        if self.Remarks is not None:
            showIndent(outfile, level)
            outfile.write('Remarks=%s,\n' % quote_python(self.Remarks).encode(ExternalEncoding))
        if self.CommodityDescription is not None:
            showIndent(outfile, level)
            outfile.write('CommodityDescription=%s,\n' % quote_python(self.CommodityDescription).encode(ExternalEncoding))
        if self.CountryRelationship is not None:
            showIndent(outfile, level)
            outfile.write('CountryRelationship=%s,\n' % quote_python(self.CountryRelationship).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'AssociatedAccountNumber':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.set_AssociatedAccountNumber(obj_)
        elif nodeName_ == 'OriginDetail':
            obj_ = PickupOriginDetail.factory()
            obj_.build(child_)
            self.set_OriginDetail(obj_)
        elif nodeName_ == 'FreightPickupDetail':
            obj_ = FreightPickupDetail.factory()
            obj_.build(child_)
            self.set_FreightPickupDetail(obj_)
        elif nodeName_ == 'ExpressFreightDetail':
            obj_ = ExpressFreightPickupDetail.factory()
            obj_.build(child_)
            self.set_ExpressFreightDetail(obj_)
        elif nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_TotalWeight(obj_)
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'OversizePackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'OversizePackageCount')
            self.OversizePackageCount = ival_
        elif nodeName_ == 'Remarks':
            Remarks_ = child_.text
            Remarks_ = self.gds_validate_string(Remarks_, node, 'Remarks')
            self.Remarks = Remarks_
        elif nodeName_ == 'CommodityDescription':
            CommodityDescription_ = child_.text
            CommodityDescription_ = self.gds_validate_string(CommodityDescription_, node, 'CommodityDescription')
            self.CommodityDescription = CommodityDescription_
        elif nodeName_ == 'CountryRelationship':
            CountryRelationship_ = child_.text
            CountryRelationship_ = self.gds_validate_string(CountryRelationship_, node, 'CountryRelationship')
            self.CountryRelationship = CountryRelationship_
            self.validate_CountryRelationshipType(self.CountryRelationship)    # validate type CountryRelationshipType
# end class CreatePickupRequest


class CreditCard(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Number=None, CreditCardType=None, ExpirationDate=None, VerificationCode=None, CreditCardHolder=None):
        self.Number = Number
        self.CreditCardType = CreditCardType
        self.ExpirationDate = ExpirationDate
        self.VerificationCode = VerificationCode
        self.CreditCardHolder = CreditCardHolder
    def factory(*args_, **kwargs_):
        if CreditCard.subclass:
            return CreditCard.subclass(*args_, **kwargs_)
        else:
            return CreditCard(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_CreditCardType(self): return self.CreditCardType
    def set_CreditCardType(self, CreditCardType): self.CreditCardType = CreditCardType
    def validate_CreditCardType(self, value):
        # Validate type CreditCardType, a restriction on xs:string.
        pass
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_VerificationCode(self): return self.VerificationCode
    def set_VerificationCode(self, VerificationCode): self.VerificationCode = VerificationCode
    def get_CreditCardHolder(self): return self.CreditCardHolder
    def set_CreditCardHolder(self, CreditCardHolder): self.CreditCardHolder = CreditCardHolder
    def export(self, outfile, level, namespace_='ns:', name_='CreditCard', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCard')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreditCard'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreditCard', fromsubclass_=False):
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumber>%s</%sNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.Number).encode(ExternalEncoding), input_name='Number'), namespace_))
        if self.CreditCardType is not None:
            showIndent(outfile, level)
            outfile.write('<%sCreditCardType>%s</%sCreditCardType>\n' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardType).encode(ExternalEncoding), input_name='CreditCardType'), namespace_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ExpirationDate).encode(ExternalEncoding), input_name='ExpirationDate'), namespace_))
        if self.VerificationCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sVerificationCode>%s</%sVerificationCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.VerificationCode).encode(ExternalEncoding), input_name='VerificationCode'), namespace_))
        if self.CreditCardHolder:
            self.CreditCardHolder.export(outfile, level, namespace_, name_='CreditCardHolder')
    def hasContent_(self):
        if (
            self.Number is not None or
            self.CreditCardType is not None or
            self.ExpirationDate is not None or
            self.VerificationCode is not None or
            self.CreditCardHolder is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCard'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('Number=%s,\n' % quote_python(self.Number).encode(ExternalEncoding))
        if self.CreditCardType is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardType=%s,\n' % quote_python(self.CreditCardType).encode(ExternalEncoding))
        if self.ExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationDate=%s,\n' % quote_python(self.ExpirationDate).encode(ExternalEncoding))
        if self.VerificationCode is not None:
            showIndent(outfile, level)
            outfile.write('VerificationCode=%s,\n' % quote_python(self.VerificationCode).encode(ExternalEncoding))
        if self.CreditCardHolder is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardHolder=model_.ParsedContactAndAddress(\n')
            self.CreditCardHolder.exportLiteral(outfile, level, name_='CreditCardHolder')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'CreditCardType':
            CreditCardType_ = child_.text
            CreditCardType_ = self.gds_validate_string(CreditCardType_, node, 'CreditCardType')
            self.CreditCardType = CreditCardType_
            self.validate_CreditCardType(self.CreditCardType)    # validate type CreditCardType
        elif nodeName_ == 'ExpirationDate':
            ExpirationDate_ = child_.text
            ExpirationDate_ = self.gds_validate_string(ExpirationDate_, node, 'ExpirationDate')
            self.ExpirationDate = ExpirationDate_
        elif nodeName_ == 'VerificationCode':
            VerificationCode_ = child_.text
            VerificationCode_ = self.gds_validate_string(VerificationCode_, node, 'VerificationCode')
            self.VerificationCode = VerificationCode_
        elif nodeName_ == 'CreditCardHolder':
            obj_ = ParsedContactAndAddress.factory()
            obj_.build(child_)
            self.set_CreditCardHolder(obj_)
# end class CreditCard


class CreditCardTransactionDetail(GeneratedsSuper):
    """This class represents data tied to the use of a credit card in a
    specific transaction."""
    subclass = None
    superclass = None
    def __init__(self, AuthorizationId=None, AuthorizationType=None, FraudDetectionDetail=None):
        self.AuthorizationId = AuthorizationId
        self.AuthorizationType = AuthorizationType
        self.FraudDetectionDetail = FraudDetectionDetail
    def factory(*args_, **kwargs_):
        if CreditCardTransactionDetail.subclass:
            return CreditCardTransactionDetail.subclass(*args_, **kwargs_)
        else:
            return CreditCardTransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AuthorizationId(self): return self.AuthorizationId
    def set_AuthorizationId(self, AuthorizationId): self.AuthorizationId = AuthorizationId
    def get_AuthorizationType(self): return self.AuthorizationType
    def set_AuthorizationType(self, AuthorizationType): self.AuthorizationType = AuthorizationType
    def validate_CreditCardAuthorizationType(self, value):
        # Validate type CreditCardAuthorizationType, a restriction on xs:string.
        pass
    def get_FraudDetectionDetail(self): return self.FraudDetectionDetail
    def set_FraudDetectionDetail(self, FraudDetectionDetail): self.FraudDetectionDetail = FraudDetectionDetail
    def export(self, outfile, level, namespace_='ns:', name_='CreditCardTransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreditCardTransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreditCardTransactionDetail', fromsubclass_=False):
        if self.AuthorizationId is not None:
            showIndent(outfile, level)
            outfile.write('<%sAuthorizationId>%s</%sAuthorizationId>\n' % (namespace_, self.gds_format_string(quote_xml(self.AuthorizationId).encode(ExternalEncoding), input_name='AuthorizationId'), namespace_))
        if self.AuthorizationType is not None:
            showIndent(outfile, level)
            outfile.write('<%sAuthorizationType>%s</%sAuthorizationType>\n' % (namespace_, self.gds_format_string(quote_xml(self.AuthorizationType).encode(ExternalEncoding), input_name='AuthorizationType'), namespace_))
        if self.FraudDetectionDetail:
            self.FraudDetectionDetail.export(outfile, level, namespace_, name_='FraudDetectionDetail')
    def hasContent_(self):
        if (
            self.AuthorizationId is not None or
            self.AuthorizationType is not None or
            self.FraudDetectionDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AuthorizationId is not None:
            showIndent(outfile, level)
            outfile.write('AuthorizationId=%s,\n' % quote_python(self.AuthorizationId).encode(ExternalEncoding))
        if self.AuthorizationType is not None:
            showIndent(outfile, level)
            outfile.write('AuthorizationType=%s,\n' % quote_python(self.AuthorizationType).encode(ExternalEncoding))
        if self.FraudDetectionDetail is not None:
            showIndent(outfile, level)
            outfile.write('FraudDetectionDetail=model_.CreditFraudDetectionDetail(\n')
            self.FraudDetectionDetail.exportLiteral(outfile, level, name_='FraudDetectionDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AuthorizationId':
            AuthorizationId_ = child_.text
            AuthorizationId_ = self.gds_validate_string(AuthorizationId_, node, 'AuthorizationId')
            self.AuthorizationId = AuthorizationId_
        elif nodeName_ == 'AuthorizationType':
            AuthorizationType_ = child_.text
            AuthorizationType_ = self.gds_validate_string(AuthorizationType_, node, 'AuthorizationType')
            self.AuthorizationType = AuthorizationType_
            self.validate_CreditCardAuthorizationType(self.AuthorizationType)    # validate type CreditCardAuthorizationType
        elif nodeName_ == 'FraudDetectionDetail':
            obj_ = CreditFraudDetectionDetail.factory()
            obj_.build(child_)
            self.set_FraudDetectionDetail(obj_)
# end class CreditCardTransactionDetail


class CreditFraudDetectionDetail(GeneratedsSuper):
    """This class is a rename of the previous VerifyCreditFraudDetail; the
    name change reflects the fact that it is no longer tied to a
    "verify" usage."""
    subclass = None
    superclass = None
    def __init__(self, IpAddress=None, ClientCookiesEnabled=None, DevicePrint=None):
        self.IpAddress = IpAddress
        self.ClientCookiesEnabled = ClientCookiesEnabled
        self.DevicePrint = DevicePrint
    def factory(*args_, **kwargs_):
        if CreditFraudDetectionDetail.subclass:
            return CreditFraudDetectionDetail.subclass(*args_, **kwargs_)
        else:
            return CreditFraudDetectionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IpAddress(self): return self.IpAddress
    def set_IpAddress(self, IpAddress): self.IpAddress = IpAddress
    def get_ClientCookiesEnabled(self): return self.ClientCookiesEnabled
    def set_ClientCookiesEnabled(self, ClientCookiesEnabled): self.ClientCookiesEnabled = ClientCookiesEnabled
    def get_DevicePrint(self): return self.DevicePrint
    def set_DevicePrint(self, DevicePrint): self.DevicePrint = DevicePrint
    def export(self, outfile, level, namespace_='ns:', name_='CreditFraudDetectionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditFraudDetectionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CreditFraudDetectionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CreditFraudDetectionDetail', fromsubclass_=False):
        if self.IpAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sIpAddress>%s</%sIpAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.IpAddress).encode(ExternalEncoding), input_name='IpAddress'), namespace_))
        if self.ClientCookiesEnabled is not None:
            showIndent(outfile, level)
            outfile.write('<%sClientCookiesEnabled>%s</%sClientCookiesEnabled>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ClientCookiesEnabled)), input_name='ClientCookiesEnabled'), namespace_))
        if self.DevicePrint is not None:
            showIndent(outfile, level)
            outfile.write('<%sDevicePrint>%s</%sDevicePrint>\n' % (namespace_, self.gds_format_string(quote_xml(self.DevicePrint).encode(ExternalEncoding), input_name='DevicePrint'), namespace_))
    def hasContent_(self):
        if (
            self.IpAddress is not None or
            self.ClientCookiesEnabled is not None or
            self.DevicePrint is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditFraudDetectionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IpAddress is not None:
            showIndent(outfile, level)
            outfile.write('IpAddress=%s,\n' % quote_python(self.IpAddress).encode(ExternalEncoding))
        if self.ClientCookiesEnabled is not None:
            showIndent(outfile, level)
            outfile.write('ClientCookiesEnabled=%s,\n' % self.ClientCookiesEnabled)
        if self.DevicePrint is not None:
            showIndent(outfile, level)
            outfile.write('DevicePrint=%s,\n' % quote_python(self.DevicePrint).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IpAddress':
            IpAddress_ = child_.text
            IpAddress_ = self.gds_validate_string(IpAddress_, node, 'IpAddress')
            self.IpAddress = IpAddress_
        elif nodeName_ == 'ClientCookiesEnabled':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ClientCookiesEnabled')
            self.ClientCookiesEnabled = ival_
        elif nodeName_ == 'DevicePrint':
            DevicePrint_ = child_.text
            DevicePrint_ = self.gds_validate_string(DevicePrint_, node, 'DevicePrint')
            self.DevicePrint = DevicePrint_
# end class CreditFraudDetectionDetail


class CustomDeliveryWindowDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, RequestTime=None, RequestRange=None, RequestDate=None):
        self.Type = Type
        self.RequestTime = RequestTime
        self.RequestRange = RequestRange
        self.RequestDate = RequestDate
    def factory(*args_, **kwargs_):
        if CustomDeliveryWindowDetail.subclass:
            return CustomDeliveryWindowDetail.subclass(*args_, **kwargs_)
        else:
            return CustomDeliveryWindowDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_CustomDeliveryWindowType(self, value):
        # Validate type CustomDeliveryWindowType, a restriction on xs:string.
        pass
    def get_RequestTime(self): return self.RequestTime
    def set_RequestTime(self, RequestTime): self.RequestTime = RequestTime
    def get_RequestRange(self): return self.RequestRange
    def set_RequestRange(self, RequestRange): self.RequestRange = RequestRange
    def get_RequestDate(self): return self.RequestDate
    def set_RequestDate(self, RequestDate): self.RequestDate = RequestDate
    def export(self, outfile, level, namespace_='ns:', name_='CustomDeliveryWindowDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomDeliveryWindowDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CustomDeliveryWindowDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CustomDeliveryWindowDetail', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.RequestTime:
            self.RequestTime.export(outfile, level, namespace_, name_='RequestTime')
        if self.RequestRange:
            self.RequestRange.export(outfile, level, namespace_, name_='RequestRange')
        if self.RequestDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestDate>%s</%sRequestDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestDate).encode(ExternalEncoding), input_name='RequestDate'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.RequestTime is not None or
            self.RequestRange is not None or
            self.RequestDate is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomDeliveryWindowDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.RequestTime is not None:
            showIndent(outfile, level)
            outfile.write('RequestTime=model_.xs_time(\n')
            self.RequestTime.exportLiteral(outfile, level, name_='RequestTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RequestRange is not None:
            showIndent(outfile, level)
            outfile.write('RequestRange=model_.DateRange(\n')
            self.RequestRange.exportLiteral(outfile, level, name_='RequestRange')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RequestDate is not None:
            showIndent(outfile, level)
            outfile.write('RequestDate=%s,\n' % quote_python(self.RequestDate).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_CustomDeliveryWindowType(self.Type)    # validate type CustomDeliveryWindowType
        elif nodeName_ == 'RequestTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_RequestTime(obj_)
        elif nodeName_ == 'RequestRange':
            obj_ = DateRange.factory()
            obj_.build(child_)
            self.set_RequestRange(obj_)
        elif nodeName_ == 'RequestDate':
            RequestDate_ = child_.text
            RequestDate_ = self.gds_validate_string(RequestDate_, node, 'RequestDate')
            self.RequestDate = RequestDate_
# end class CustomDeliveryWindowDetail


class DateRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Begins=None, Ends=None):
        self.Begins = Begins
        self.Ends = Ends
    def factory(*args_, **kwargs_):
        if DateRange.subclass:
            return DateRange.subclass(*args_, **kwargs_)
        else:
            return DateRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Begins(self): return self.Begins
    def set_Begins(self, Begins): self.Begins = Begins
    def get_Ends(self): return self.Ends
    def set_Ends(self, Ends): self.Ends = Ends
    def export(self, outfile, level, namespace_='ns:', name_='DateRange', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DateRange')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DateRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DateRange', fromsubclass_=False):
        if self.Begins is not None:
            showIndent(outfile, level)
            outfile.write('<%sBegins>%s</%sBegins>\n' % (namespace_, self.gds_format_string(quote_xml(self.Begins).encode(ExternalEncoding), input_name='Begins'), namespace_))
        if self.Ends is not None:
            showIndent(outfile, level)
            outfile.write('<%sEnds>%s</%sEnds>\n' % (namespace_, self.gds_format_string(quote_xml(self.Ends).encode(ExternalEncoding), input_name='Ends'), namespace_))
    def hasContent_(self):
        if (
            self.Begins is not None or
            self.Ends is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DateRange'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Begins is not None:
            showIndent(outfile, level)
            outfile.write('Begins=%s,\n' % quote_python(self.Begins).encode(ExternalEncoding))
        if self.Ends is not None:
            showIndent(outfile, level)
            outfile.write('Ends=%s,\n' % quote_python(self.Ends).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Begins':
            Begins_ = child_.text
            Begins_ = self.gds_validate_string(Begins_, node, 'Begins')
            self.Begins = Begins_
        elif nodeName_ == 'Ends':
            Ends_ = child_.text
            Ends_ = self.gds_validate_string(Ends_, node, 'Ends')
            self.Ends = Ends_
# end class DateRange


class DetentionDetail(GeneratedsSuper):
    """Specifications for pup/set or vehicle delayed for loading or
    unloading."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if DetentionDetail.subclass:
            return DetentionDetail.subclass(*args_, **kwargs_)
        else:
            return DetentionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def export(self, outfile, level, namespace_='ns:', name_='DetentionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DetentionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DetentionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DetentionDetail', fromsubclass_=False):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuration>%s</%sDuration>\n' % (namespace_, self.gds_format_string(quote_xml(self.Duration).encode(ExternalEncoding), input_name='Duration'), namespace_))
    def hasContent_(self):
        if (
            self.Duration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DetentionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('Duration=%s,\n' % quote_python(self.Duration).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class DetentionDetail


class Dimensions(GeneratedsSuper):
    """Descriptive data detailing the length, width, and height of a
    package."""
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None):
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.Units = Units
    def factory(*args_, **kwargs_):
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_LinearUnits(self, value):
        # Validate type LinearUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='Dimensions', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Dimensions', fromsubclass_=False):
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('<%sLength>%s</%sLength>\n' % (namespace_, self.gds_format_integer(self.Length, input_name='Length'), namespace_))
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('<%sWidth>%s</%sWidth>\n' % (namespace_, self.gds_format_integer(self.Width, input_name='Width'), namespace_))
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('<%sHeight>%s</%sHeight>\n' % (namespace_, self.gds_format_integer(self.Height, input_name='Height'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Dimensions'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('Length=%d,\n' % self.Length)
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('Width=%d,\n' % self.Width)
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('Height=%d,\n' % self.Height)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_LinearUnits(self.Units)    # validate type LinearUnits
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.Value = Value
        self.Units = Units
    def factory(*args_, **kwargs_):
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Distance'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_DistanceUnits(self.Units)    # validate type DistanceUnits
# end class Distance


class EMailLabelDetail(GeneratedsSuper):
    """Describes specific information about the email label shipment."""
    subclass = None
    superclass = None
    def __init__(self, NotificationEMailAddress=None, NotificationMessage=None):
        self.NotificationEMailAddress = NotificationEMailAddress
        self.NotificationMessage = NotificationMessage
    def factory(*args_, **kwargs_):
        if EMailLabelDetail.subclass:
            return EMailLabelDetail.subclass(*args_, **kwargs_)
        else:
            return EMailLabelDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationEMailAddress(self): return self.NotificationEMailAddress
    def set_NotificationEMailAddress(self, NotificationEMailAddress): self.NotificationEMailAddress = NotificationEMailAddress
    def get_NotificationMessage(self): return self.NotificationMessage
    def set_NotificationMessage(self, NotificationMessage): self.NotificationMessage = NotificationMessage
    def export(self, outfile, level, namespace_='ns:', name_='EMailLabelDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailLabelDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailLabelDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailLabelDetail', fromsubclass_=False):
        if self.NotificationEMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sNotificationEMailAddress>%s</%sNotificationEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.NotificationEMailAddress).encode(ExternalEncoding), input_name='NotificationEMailAddress'), namespace_))
        if self.NotificationMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sNotificationMessage>%s</%sNotificationMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.NotificationMessage).encode(ExternalEncoding), input_name='NotificationMessage'), namespace_))
    def hasContent_(self):
        if (
            self.NotificationEMailAddress is not None or
            self.NotificationMessage is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EMailLabelDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NotificationEMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('NotificationEMailAddress=%s,\n' % quote_python(self.NotificationEMailAddress).encode(ExternalEncoding))
        if self.NotificationMessage is not None:
            showIndent(outfile, level)
            outfile.write('NotificationMessage=%s,\n' % quote_python(self.NotificationMessage).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationEMailAddress':
            NotificationEMailAddress_ = child_.text
            NotificationEMailAddress_ = self.gds_validate_string(NotificationEMailAddress_, node, 'NotificationEMailAddress')
            self.NotificationEMailAddress = NotificationEMailAddress_
        elif nodeName_ == 'NotificationMessage':
            NotificationMessage_ = child_.text
            NotificationMessage_ = self.gds_validate_string(NotificationMessage_, node, 'NotificationMessage')
            self.NotificationMessage = NotificationMessage_
# end class EMailLabelDetail


class EMailNotificationDetail(GeneratedsSuper):
    """Information describing email notifications that will be sent in
    relation to events that occur during package movement"""
    subclass = None
    superclass = None
    def __init__(self, AggregationType=None, PersonalMessage=None, Recipients=None):
        self.AggregationType = AggregationType
        self.PersonalMessage = PersonalMessage
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
    def factory(*args_, **kwargs_):
        if EMailNotificationDetail.subclass:
            return EMailNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AggregationType(self): return self.AggregationType
    def set_AggregationType(self, AggregationType): self.AggregationType = AggregationType
    def validate_EMailNotificationAggregationType(self, value):
        # Validate type EMailNotificationAggregationType, a restriction on xs:string.
        pass
    def get_PersonalMessage(self): return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage): self.PersonalMessage = PersonalMessage
    def get_Recipients(self): return self.Recipients
    def set_Recipients(self, Recipients): self.Recipients = Recipients
    def add_Recipients(self, value): self.Recipients.append(value)
    def insert_Recipients(self, index, value): self.Recipients[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='EMailNotificationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailNotificationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailNotificationDetail', fromsubclass_=False):
        if self.AggregationType is not None:
            showIndent(outfile, level)
            outfile.write('<%sAggregationType>%s</%sAggregationType>\n' % (namespace_, self.gds_format_string(quote_xml(self.AggregationType).encode(ExternalEncoding), input_name='AggregationType'), namespace_))
        if self.PersonalMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.PersonalMessage).encode(ExternalEncoding), input_name='PersonalMessage'), namespace_))
        for Recipients_ in self.Recipients:
            Recipients_.export(outfile, level, namespace_, name_='Recipients')
    def hasContent_(self):
        if (
            self.AggregationType is not None or
            self.PersonalMessage is not None or
            self.Recipients
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EMailNotificationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AggregationType is not None:
            showIndent(outfile, level)
            outfile.write('AggregationType=%s,\n' % quote_python(self.AggregationType).encode(ExternalEncoding))
        if self.PersonalMessage is not None:
            showIndent(outfile, level)
            outfile.write('PersonalMessage=%s,\n' % quote_python(self.PersonalMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Recipients=[\n')
        level += 1
        for Recipients_ in self.Recipients:
            showIndent(outfile, level)
            outfile.write('model_.EMailNotificationRecipient(\n')
            Recipients_.exportLiteral(outfile, level, name_='EMailNotificationRecipient')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AggregationType':
            AggregationType_ = child_.text
            AggregationType_ = self.gds_validate_string(AggregationType_, node, 'AggregationType')
            self.AggregationType = AggregationType_
            self.validate_EMailNotificationAggregationType(self.AggregationType)    # validate type EMailNotificationAggregationType
        elif nodeName_ == 'PersonalMessage':
            PersonalMessage_ = child_.text
            PersonalMessage_ = self.gds_validate_string(PersonalMessage_, node, 'PersonalMessage')
            self.PersonalMessage = PersonalMessage_
        elif nodeName_ == 'Recipients':
            obj_ = EMailNotificationRecipient.factory()
            obj_.build(child_)
            self.Recipients.append(obj_)
# end class EMailNotificationDetail


class EMailNotificationRecipient(GeneratedsSuper):
    """The descriptive data for a FedEx email notification recipient."""
    subclass = None
    superclass = None
    def __init__(self, EMailNotificationRecipientType=None, EMailAddress=None, NotificationEventsRequested=None, Format=None, Localization=None):
        self.EMailNotificationRecipientType = EMailNotificationRecipientType
        self.EMailAddress = EMailAddress
        if NotificationEventsRequested is None:
            self.NotificationEventsRequested = []
        else:
            self.NotificationEventsRequested = NotificationEventsRequested
        self.Format = Format
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if EMailNotificationRecipient.subclass:
            return EMailNotificationRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailNotificationRecipientType(self): return self.EMailNotificationRecipientType
    def set_EMailNotificationRecipientType(self, EMailNotificationRecipientType): self.EMailNotificationRecipientType = EMailNotificationRecipientType
    def validate_EMailNotificationRecipientType(self, value):
        # Validate type EMailNotificationRecipientType, a restriction on xs:string.
        pass
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_NotificationEventsRequested(self): return self.NotificationEventsRequested
    def set_NotificationEventsRequested(self, NotificationEventsRequested): self.NotificationEventsRequested = NotificationEventsRequested
    def add_NotificationEventsRequested(self, value): self.NotificationEventsRequested.append(value)
    def insert_NotificationEventsRequested(self, index, value): self.NotificationEventsRequested[index] = value
    def validate_EMailNotificationEventType(self, value):
        # Validate type EMailNotificationEventType, a restriction on xs:string.
        pass
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def validate_EMailNotificationFormatType(self, value):
        # Validate type EMailNotificationFormatType, a restriction on xs:string.
        pass
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='EMailNotificationRecipient', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailNotificationRecipient')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailNotificationRecipient'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailNotificationRecipient', fromsubclass_=False):
        if self.EMailNotificationRecipientType is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailNotificationRecipientType>%s</%sEMailNotificationRecipientType>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailNotificationRecipientType).encode(ExternalEncoding), input_name='EMailNotificationRecipientType'), namespace_))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailAddress).encode(ExternalEncoding), input_name='EMailAddress'), namespace_))
        for NotificationEventsRequested_ in self.NotificationEventsRequested:
            showIndent(outfile, level)
            outfile.write('<%sNotificationEventsRequested>%s</%sNotificationEventsRequested>\n' % (namespace_, self.gds_format_string(quote_xml(NotificationEventsRequested_).encode(ExternalEncoding), input_name='NotificationEventsRequested'), namespace_))
        if self.Format is not None:
            showIndent(outfile, level)
            outfile.write('<%sFormat>%s</%sFormat>\n' % (namespace_, self.gds_format_string(quote_xml(self.Format).encode(ExternalEncoding), input_name='Format'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.EMailNotificationRecipientType is not None or
            self.EMailAddress is not None or
            self.NotificationEventsRequested or
            self.Format is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EMailNotificationRecipient'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.EMailNotificationRecipientType is not None:
            showIndent(outfile, level)
            outfile.write('EMailNotificationRecipientType=%s,\n' % quote_python(self.EMailNotificationRecipientType).encode(ExternalEncoding))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('EMailAddress=%s,\n' % quote_python(self.EMailAddress).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('NotificationEventsRequested=[\n')
        level += 1
        for NotificationEventsRequested_ in self.NotificationEventsRequested:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(NotificationEventsRequested_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Format is not None:
            showIndent(outfile, level)
            outfile.write('Format=%s,\n' % quote_python(self.Format).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailNotificationRecipientType':
            EMailNotificationRecipientType_ = child_.text
            EMailNotificationRecipientType_ = self.gds_validate_string(EMailNotificationRecipientType_, node, 'EMailNotificationRecipientType')
            self.EMailNotificationRecipientType = EMailNotificationRecipientType_
            self.validate_EMailNotificationRecipientType(self.EMailNotificationRecipientType)    # validate type EMailNotificationRecipientType
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'NotificationEventsRequested':
            NotificationEventsRequested_ = child_.text
            NotificationEventsRequested_ = self.gds_validate_string(NotificationEventsRequested_, node, 'NotificationEventsRequested')
            self.NotificationEventsRequested.append(NotificationEventsRequested_)
            self.validate_EMailNotificationEventType(self.NotificationEventsRequested)    # validate type EMailNotificationEventType
        elif nodeName_ == 'Format':
            Format_ = child_.text
            Format_ = self.gds_validate_string(Format_, node, 'Format')
            self.Format = Format_
            self.validate_EMailNotificationFormatType(self.Format)    # validate type EMailNotificationFormatType
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class EMailNotificationRecipient


class EtdDetail(GeneratedsSuper):
    """Electronic Trade document references used with the ETD special
    service."""
    subclass = None
    superclass = None
    def __init__(self, Confirmation=None, RequestedDocumentCopies=None, Documents=None, DocumentReferences=None):
        self.Confirmation = Confirmation
        if RequestedDocumentCopies is None:
            self.RequestedDocumentCopies = []
        else:
            self.RequestedDocumentCopies = RequestedDocumentCopies
        if Documents is None:
            self.Documents = []
        else:
            self.Documents = Documents
        if DocumentReferences is None:
            self.DocumentReferences = []
        else:
            self.DocumentReferences = DocumentReferences
    def factory(*args_, **kwargs_):
        if EtdDetail.subclass:
            return EtdDetail.subclass(*args_, **kwargs_)
        else:
            return EtdDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Confirmation(self): return self.Confirmation
    def set_Confirmation(self, Confirmation): self.Confirmation = Confirmation
    def validate_EtdConfirmationType(self, value):
        # Validate type EtdConfirmationType, a restriction on xs:string.
        pass
    def get_RequestedDocumentCopies(self): return self.RequestedDocumentCopies
    def set_RequestedDocumentCopies(self, RequestedDocumentCopies): self.RequestedDocumentCopies = RequestedDocumentCopies
    def add_RequestedDocumentCopies(self, value): self.RequestedDocumentCopies.append(value)
    def insert_RequestedDocumentCopies(self, index, value): self.RequestedDocumentCopies[index] = value
    def validate_RequestedShippingDocumentType(self, value):
        # Validate type RequestedShippingDocumentType, a restriction on xs:string.
        pass
    def get_Documents(self): return self.Documents
    def set_Documents(self, Documents): self.Documents = Documents
    def add_Documents(self, value): self.Documents.append(value)
    def insert_Documents(self, index, value): self.Documents[index] = value
    def get_DocumentReferences(self): return self.DocumentReferences
    def set_DocumentReferences(self, DocumentReferences): self.DocumentReferences = DocumentReferences
    def add_DocumentReferences(self, value): self.DocumentReferences.append(value)
    def insert_DocumentReferences(self, index, value): self.DocumentReferences[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='EtdDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EtdDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EtdDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EtdDetail', fromsubclass_=False):
        if self.Confirmation is not None:
            showIndent(outfile, level)
            outfile.write('<%sConfirmation>%s</%sConfirmation>\n' % (namespace_, self.gds_format_string(quote_xml(self.Confirmation).encode(ExternalEncoding), input_name='Confirmation'), namespace_))
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            showIndent(outfile, level)
            outfile.write('<%sRequestedDocumentCopies>%s</%sRequestedDocumentCopies>\n' % (namespace_, self.gds_format_string(quote_xml(RequestedDocumentCopies_).encode(ExternalEncoding), input_name='RequestedDocumentCopies'), namespace_))
        for Documents_ in self.Documents:
            Documents_.export(outfile, level, namespace_, name_='Documents')
        for DocumentReferences_ in self.DocumentReferences:
            DocumentReferences_.export(outfile, level, namespace_, name_='DocumentReferences')
    def hasContent_(self):
        if (
            self.Confirmation is not None or
            self.RequestedDocumentCopies or
            self.Documents or
            self.DocumentReferences
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EtdDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Confirmation is not None:
            showIndent(outfile, level)
            outfile.write('Confirmation=%s,\n' % quote_python(self.Confirmation).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RequestedDocumentCopies=[\n')
        level += 1
        for RequestedDocumentCopies_ in self.RequestedDocumentCopies:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(RequestedDocumentCopies_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Documents=[\n')
        level += 1
        for Documents_ in self.Documents:
            showIndent(outfile, level)
            outfile.write('model_.UploadDocumentDetail(\n')
            Documents_.exportLiteral(outfile, level, name_='UploadDocumentDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DocumentReferences=[\n')
        level += 1
        for DocumentReferences_ in self.DocumentReferences:
            showIndent(outfile, level)
            outfile.write('model_.UploadDocumentReferenceDetail(\n')
            DocumentReferences_.exportLiteral(outfile, level, name_='UploadDocumentReferenceDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Confirmation':
            Confirmation_ = child_.text
            Confirmation_ = self.gds_validate_string(Confirmation_, node, 'Confirmation')
            self.Confirmation = Confirmation_
            self.validate_EtdConfirmationType(self.Confirmation)    # validate type EtdConfirmationType
        elif nodeName_ == 'RequestedDocumentCopies':
            RequestedDocumentCopies_ = child_.text
            RequestedDocumentCopies_ = self.gds_validate_string(RequestedDocumentCopies_, node, 'RequestedDocumentCopies')
            self.RequestedDocumentCopies.append(RequestedDocumentCopies_)
            self.validate_RequestedShippingDocumentType(self.RequestedDocumentCopies)    # validate type RequestedShippingDocumentType
        elif nodeName_ == 'Documents':
            obj_ = UploadDocumentDetail.factory()
            obj_.build(child_)
            self.Documents.append(obj_)
        elif nodeName_ == 'DocumentReferences':
            obj_ = UploadDocumentReferenceDetail.factory()
            obj_.build(child_)
            self.DocumentReferences.append(obj_)
# end class EtdDetail


class ExpressFreightPickupDetail(GeneratedsSuper):
    """Descriptive data regarding an express freight service pickup
    request."""
    subclass = None
    superclass = None
    def __init__(self, Service=None, BookingNumber=None, Dimensions=None, TruckType=None, TrailerSize=None):
        self.Service = Service
        self.BookingNumber = BookingNumber
        self.Dimensions = Dimensions
        self.TruckType = TruckType
        self.TrailerSize = TrailerSize
    def factory(*args_, **kwargs_):
        if ExpressFreightPickupDetail.subclass:
            return ExpressFreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return ExpressFreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_BookingNumber(self): return self.BookingNumber
    def set_BookingNumber(self, BookingNumber): self.BookingNumber = BookingNumber
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_TruckType(self): return self.TruckType
    def set_TruckType(self, TruckType): self.TruckType = TruckType
    def validate_TruckType(self, value):
        # Validate type TruckType, a restriction on xs:string.
        pass
    def get_TrailerSize(self): return self.TrailerSize
    def set_TrailerSize(self, TrailerSize): self.TrailerSize = TrailerSize
    def validate_TrailerSizeType(self, value):
        # Validate type TrailerSizeType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='ExpressFreightPickupDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpressFreightPickupDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ExpressFreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ExpressFreightPickupDetail', fromsubclass_=False):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('<%sService>%s</%sService>\n' % (namespace_, self.gds_format_string(quote_xml(self.Service).encode(ExternalEncoding), input_name='Service'), namespace_))
        if self.BookingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sBookingNumber>%s</%sBookingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.BookingNumber).encode(ExternalEncoding), input_name='BookingNumber'), namespace_))
        if self.Dimensions:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions')
        if self.TruckType is not None:
            showIndent(outfile, level)
            outfile.write('<%sTruckType>%s</%sTruckType>\n' % (namespace_, self.gds_format_string(quote_xml(self.TruckType).encode(ExternalEncoding), input_name='TruckType'), namespace_))
        if self.TrailerSize is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrailerSize>%s</%sTrailerSize>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrailerSize).encode(ExternalEncoding), input_name='TrailerSize'), namespace_))
    def hasContent_(self):
        if (
            self.Service is not None or
            self.BookingNumber is not None or
            self.Dimensions is not None or
            self.TruckType is not None or
            self.TrailerSize is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ExpressFreightPickupDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=%s,\n' % quote_python(self.Service).encode(ExternalEncoding))
        if self.BookingNumber is not None:
            showIndent(outfile, level)
            outfile.write('BookingNumber=%s,\n' % quote_python(self.BookingNumber).encode(ExternalEncoding))
        if self.Dimensions is not None:
            showIndent(outfile, level)
            outfile.write('Dimensions=model_.Dimensions(\n')
            self.Dimensions.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TruckType is not None:
            showIndent(outfile, level)
            outfile.write('TruckType=%s,\n' % quote_python(self.TruckType).encode(ExternalEncoding))
        if self.TrailerSize is not None:
            showIndent(outfile, level)
            outfile.write('TrailerSize=%s,\n' % quote_python(self.TrailerSize).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            self.validate_ServiceType(self.Service)    # validate type ServiceType
        elif nodeName_ == 'BookingNumber':
            BookingNumber_ = child_.text
            BookingNumber_ = self.gds_validate_string(BookingNumber_, node, 'BookingNumber')
            self.BookingNumber = BookingNumber_
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.set_Dimensions(obj_)
        elif nodeName_ == 'TruckType':
            TruckType_ = child_.text
            TruckType_ = self.gds_validate_string(TruckType_, node, 'TruckType')
            self.TruckType = TruckType_
            self.validate_TruckType(self.TruckType)    # validate type TruckType
        elif nodeName_ == 'TrailerSize':
            TrailerSize_ = child_.text
            TrailerSize_ = self.gds_validate_string(TrailerSize_, node, 'TrailerSize')
            self.TrailerSize = TrailerSize_
            self.validate_TrailerSizeType(self.TrailerSize)    # validate type TrailerSizeType
# end class ExpressFreightPickupDetail


class ExtraLaborDetail(GeneratedsSuper):
    """Specification for labor time spent handling shipment."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if ExtraLaborDetail.subclass:
            return ExtraLaborDetail.subclass(*args_, **kwargs_)
        else:
            return ExtraLaborDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def export(self, outfile, level, namespace_='ns:', name_='ExtraLaborDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExtraLaborDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ExtraLaborDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ExtraLaborDetail', fromsubclass_=False):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuration>%s</%sDuration>\n' % (namespace_, self.gds_format_string(quote_xml(self.Duration).encode(ExternalEncoding), input_name='Duration'), namespace_))
    def hasContent_(self):
        if (
            self.Duration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ExtraLaborDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('Duration=%s,\n' % quote_python(self.Duration).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class ExtraLaborDetail


class FlatbedTrailerDetail(GeneratedsSuper):
    """Specifies the optional features/characteristics requested for a
    Freight shipment utilizing a flatbed trailer."""
    subclass = None
    superclass = None
    def __init__(self, Options=None):
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if FlatbedTrailerDetail.subclass:
            return FlatbedTrailerDetail.subclass(*args_, **kwargs_)
        else:
            return FlatbedTrailerDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options(self, index, value): self.Options[index] = value
    def validate_FlatbedTrailerOption(self, value):
        # Validate type FlatbedTrailerOption, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='FlatbedTrailerDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FlatbedTrailerDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FlatbedTrailerDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FlatbedTrailerDetail', fromsubclass_=False):
        for Options_ in self.Options:
            showIndent(outfile, level)
            outfile.write('<%sOptions>%s</%sOptions>\n' % (namespace_, self.gds_format_string(quote_xml(Options_).encode(ExternalEncoding), input_name='Options'), namespace_))
    def hasContent_(self):
        if (
            self.Options
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FlatbedTrailerDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Options=[\n')
        level += 1
        for Options_ in self.Options:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Options_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Options':
            Options_ = child_.text
            Options_ = self.gds_validate_string(Options_, node, 'Options')
            self.Options.append(Options_)
            self.validate_FlatbedTrailerOption(self.Options)    # validate type FlatbedTrailerOption
# end class FlatbedTrailerDetail


class FreightGuaranteeDetail(GeneratedsSuper):
    """Descriptive data regarding a FedEx freight service pickup request."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Date=None):
        self.Type = Type
        self.Date = Date
    def factory(*args_, **kwargs_):
        if FreightGuaranteeDetail.subclass:
            return FreightGuaranteeDetail.subclass(*args_, **kwargs_)
        else:
            return FreightGuaranteeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_FreightGuaranteeType(self, value):
        # Validate type FreightGuaranteeType, a restriction on xs:string.
        pass
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def export(self, outfile, level, namespace_='ns:', name_='FreightGuaranteeDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightGuaranteeDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightGuaranteeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightGuaranteeDetail', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.Date is not None:
            showIndent(outfile, level)
            outfile.write('<%sDate>%s</%sDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.Date).encode(ExternalEncoding), input_name='Date'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FreightGuaranteeDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.Date is not None:
            showIndent(outfile, level)
            outfile.write('Date=%s,\n' % quote_python(self.Date).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_FreightGuaranteeType(self.Type)    # validate type FreightGuaranteeType
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
# end class FreightGuaranteeDetail


class FreightPickupDetail(GeneratedsSuper):
    """Descriptive data regarding a FedEx freight service pickup request."""
    subclass = None
    superclass = None
    def __init__(self, ApprovedBy=None, Payment=None, Role=None, SubmittedBy=None, LineItems=None):
        self.ApprovedBy = ApprovedBy
        self.Payment = Payment
        self.Role = Role
        self.SubmittedBy = SubmittedBy
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
    def factory(*args_, **kwargs_):
        if FreightPickupDetail.subclass:
            return FreightPickupDetail.subclass(*args_, **kwargs_)
        else:
            return FreightPickupDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ApprovedBy(self): return self.ApprovedBy
    def set_ApprovedBy(self, ApprovedBy): self.ApprovedBy = ApprovedBy
    def get_Payment(self): return self.Payment
    def set_Payment(self, Payment): self.Payment = Payment
    def validate_FreightAccountPaymentType(self, value):
        # Validate type FreightAccountPaymentType, a restriction on xs:string.
        pass
    def get_Role(self): return self.Role
    def set_Role(self, Role): self.Role = Role
    def validate_FreightShipmentRoleType(self, value):
        # Validate type FreightShipmentRoleType, a restriction on xs:string.
        pass
    def get_SubmittedBy(self): return self.SubmittedBy
    def set_SubmittedBy(self, SubmittedBy): self.SubmittedBy = SubmittedBy
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems(self, index, value): self.LineItems[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='FreightPickupDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightPickupDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightPickupDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightPickupDetail', fromsubclass_=False):
        if self.ApprovedBy:
            self.ApprovedBy.export(outfile, level, namespace_, name_='ApprovedBy')
        if self.Payment is not None:
            showIndent(outfile, level)
            outfile.write('<%sPayment>%s</%sPayment>\n' % (namespace_, self.gds_format_string(quote_xml(self.Payment).encode(ExternalEncoding), input_name='Payment'), namespace_))
        if self.Role is not None:
            showIndent(outfile, level)
            outfile.write('<%sRole>%s</%sRole>\n' % (namespace_, self.gds_format_string(quote_xml(self.Role).encode(ExternalEncoding), input_name='Role'), namespace_))
        if self.SubmittedBy:
            self.SubmittedBy.export(outfile, level, namespace_, name_='SubmittedBy')
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems')
    def hasContent_(self):
        if (
            self.ApprovedBy is not None or
            self.Payment is not None or
            self.Role is not None or
            self.SubmittedBy is not None or
            self.LineItems
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FreightPickupDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ApprovedBy is not None:
            showIndent(outfile, level)
            outfile.write('ApprovedBy=model_.Contact(\n')
            self.ApprovedBy.exportLiteral(outfile, level, name_='ApprovedBy')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Payment is not None:
            showIndent(outfile, level)
            outfile.write('Payment=%s,\n' % quote_python(self.Payment).encode(ExternalEncoding))
        if self.Role is not None:
            showIndent(outfile, level)
            outfile.write('Role=%s,\n' % quote_python(self.Role).encode(ExternalEncoding))
        if self.SubmittedBy is not None:
            showIndent(outfile, level)
            outfile.write('SubmittedBy=model_.Contact(\n')
            self.SubmittedBy.exportLiteral(outfile, level, name_='SubmittedBy')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('LineItems=[\n')
        level += 1
        for LineItems_ in self.LineItems:
            showIndent(outfile, level)
            outfile.write('model_.FreightPickupLineItem(\n')
            LineItems_.exportLiteral(outfile, level, name_='FreightPickupLineItem')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ApprovedBy':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_ApprovedBy(obj_)
        elif nodeName_ == 'Payment':
            Payment_ = child_.text
            Payment_ = self.gds_validate_string(Payment_, node, 'Payment')
            self.Payment = Payment_
            self.validate_FreightAccountPaymentType(self.Payment)    # validate type FreightAccountPaymentType
        elif nodeName_ == 'Role':
            Role_ = child_.text
            Role_ = self.gds_validate_string(Role_, node, 'Role')
            self.Role = Role_
            self.validate_FreightShipmentRoleType(self.Role)    # validate type FreightShipmentRoleType
        elif nodeName_ == 'SubmittedBy':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_SubmittedBy(obj_)
        elif nodeName_ == 'LineItems':
            obj_ = FreightPickupLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
# end class FreightPickupDetail


class FreightPickupLineItem(GeneratedsSuper):
    """Identifies details about the contents of the shipment to be picked
    up."""
    subclass = None
    superclass = None
    def __init__(self, Service=None, SequenceNumber=None, Destination=None, Packaging=None, Pieces=None, Weight=None, TotalHandlingUnits=None, PurchaseOrderNumber=None, JustOneMore=None, SpecialServicesRequested=None, FreightGuaranteeDetail=None, Description=None):
        self.Service = Service
        self.SequenceNumber = SequenceNumber
        self.Destination = Destination
        self.Packaging = Packaging
        self.Pieces = Pieces
        self.Weight = Weight
        self.TotalHandlingUnits = TotalHandlingUnits
        self.PurchaseOrderNumber = PurchaseOrderNumber
        self.JustOneMore = JustOneMore
        self.SpecialServicesRequested = SpecialServicesRequested
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.Description = Description
    def factory(*args_, **kwargs_):
        if FreightPickupLineItem.subclass:
            return FreightPickupLineItem.subclass(*args_, **kwargs_)
        else:
            return FreightPickupLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_SequenceNumber(self): return self.SequenceNumber
    def set_SequenceNumber(self, SequenceNumber): self.SequenceNumber = SequenceNumber
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def validate_PhysicalPackagingType(self, value):
        # Validate type PhysicalPackagingType, a restriction on xs:string.
        pass
    def get_Pieces(self): return self.Pieces
    def set_Pieces(self, Pieces): self.Pieces = Pieces
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_TotalHandlingUnits(self): return self.TotalHandlingUnits
    def set_TotalHandlingUnits(self, TotalHandlingUnits): self.TotalHandlingUnits = TotalHandlingUnits
    def get_PurchaseOrderNumber(self): return self.PurchaseOrderNumber
    def set_PurchaseOrderNumber(self, PurchaseOrderNumber): self.PurchaseOrderNumber = PurchaseOrderNumber
    def get_JustOneMore(self): return self.JustOneMore
    def set_JustOneMore(self, JustOneMore): self.JustOneMore = JustOneMore
    def get_SpecialServicesRequested(self): return self.SpecialServicesRequested
    def set_SpecialServicesRequested(self, SpecialServicesRequested): self.SpecialServicesRequested = SpecialServicesRequested
    def get_FreightGuaranteeDetail(self): return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail): self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='ns:', name_='FreightPickupLineItem', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightPickupLineItem')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightPickupLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightPickupLineItem', fromsubclass_=False):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('<%sService>%s</%sService>\n' % (namespace_, self.gds_format_string(quote_xml(self.Service).encode(ExternalEncoding), input_name='Service'), namespace_))
        if self.SequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sSequenceNumber>%s</%sSequenceNumber>\n' % (namespace_, self.gds_format_integer(self.SequenceNumber, input_name='SequenceNumber'), namespace_))
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackaging>%s</%sPackaging>\n' % (namespace_, self.gds_format_string(quote_xml(self.Packaging).encode(ExternalEncoding), input_name='Packaging'), namespace_))
        if self.Pieces is not None:
            showIndent(outfile, level)
            outfile.write('<%sPieces>%s</%sPieces>\n' % (namespace_, self.gds_format_integer(self.Pieces, input_name='Pieces'), namespace_))
        if self.Weight:
            self.Weight.export(outfile, level, namespace_, name_='Weight')
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level)
            outfile.write('<%sTotalHandlingUnits>%s</%sTotalHandlingUnits>\n' % (namespace_, self.gds_format_integer(self.TotalHandlingUnits, input_name='TotalHandlingUnits'), namespace_))
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPurchaseOrderNumber>%s</%sPurchaseOrderNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseOrderNumber).encode(ExternalEncoding), input_name='PurchaseOrderNumber'), namespace_))
        if self.JustOneMore is not None:
            showIndent(outfile, level)
            outfile.write('<%sJustOneMore>%s</%sJustOneMore>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.JustOneMore)), input_name='JustOneMore'), namespace_))
        if self.SpecialServicesRequested:
            self.SpecialServicesRequested.export(outfile, level, namespace_, name_='SpecialServicesRequested')
        if self.FreightGuaranteeDetail:
            self.FreightGuaranteeDetail.export(outfile, level, namespace_, name_='FreightGuaranteeDetail')
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Service is not None or
            self.SequenceNumber is not None or
            self.Destination is not None or
            self.Packaging is not None or
            self.Pieces is not None or
            self.Weight is not None or
            self.TotalHandlingUnits is not None or
            self.PurchaseOrderNumber is not None or
            self.JustOneMore is not None or
            self.SpecialServicesRequested is not None or
            self.FreightGuaranteeDetail is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FreightPickupLineItem'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=%s,\n' % quote_python(self.Service).encode(ExternalEncoding))
        if self.SequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('SequenceNumber=%d,\n' % self.SequenceNumber)
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.Address(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('Packaging=%s,\n' % quote_python(self.Packaging).encode(ExternalEncoding))
        if self.Pieces is not None:
            showIndent(outfile, level)
            outfile.write('Pieces=%d,\n' % self.Pieces)
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=model_.Weight(\n')
            self.Weight.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalHandlingUnits is not None:
            showIndent(outfile, level)
            outfile.write('TotalHandlingUnits=%d,\n' % self.TotalHandlingUnits)
        if self.PurchaseOrderNumber is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseOrderNumber=%s,\n' % quote_python(self.PurchaseOrderNumber).encode(ExternalEncoding))
        if self.JustOneMore is not None:
            showIndent(outfile, level)
            outfile.write('JustOneMore=%s,\n' % self.JustOneMore)
        if self.SpecialServicesRequested is not None:
            showIndent(outfile, level)
            outfile.write('SpecialServicesRequested=model_.ShipmentSpecialServicesRequested(\n')
            self.SpecialServicesRequested.exportLiteral(outfile, level, name_='SpecialServicesRequested')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FreightGuaranteeDetail is not None:
            showIndent(outfile, level)
            outfile.write('FreightGuaranteeDetail=model_.FreightGuaranteeDetail(\n')
            self.FreightGuaranteeDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            self.validate_ServiceType(self.Service)    # validate type ServiceType
        elif nodeName_ == 'SequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'SequenceNumber')
            self.SequenceNumber = ival_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
        elif nodeName_ == 'Packaging':
            Packaging_ = child_.text
            Packaging_ = self.gds_validate_string(Packaging_, node, 'Packaging')
            self.Packaging = Packaging_
            self.validate_PhysicalPackagingType(self.Packaging)    # validate type PhysicalPackagingType
        elif nodeName_ == 'Pieces':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Pieces')
            self.Pieces = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_Weight(obj_)
        elif nodeName_ == 'TotalHandlingUnits':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TotalHandlingUnits')
            self.TotalHandlingUnits = ival_
        elif nodeName_ == 'PurchaseOrderNumber':
            PurchaseOrderNumber_ = child_.text
            PurchaseOrderNumber_ = self.gds_validate_string(PurchaseOrderNumber_, node, 'PurchaseOrderNumber')
            self.PurchaseOrderNumber = PurchaseOrderNumber_
        elif nodeName_ == 'JustOneMore':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'JustOneMore')
            self.JustOneMore = ival_
        elif nodeName_ == 'SpecialServicesRequested':
            obj_ = ShipmentSpecialServicesRequested.factory()
            obj_.build(child_)
            self.set_SpecialServicesRequested(obj_)
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory()
            obj_.build(child_)
            self.set_FreightGuaranteeDetail(obj_)
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class FreightPickupLineItem


class FreightServiceCenterDetail(GeneratedsSuper):
    """This class describes the relationship between a customer-specified
    address and the FedEx Freight / FedEx National Freight Service
    Center that supports that address."""
    subclass = None
    superclass = None
    def __init__(self, InterlineCarrierCode=None, InterlineCarrierName=None, AdditionalDays=None, LocalService=None, LocalDistance=None, LocalDuration=None, LocalServiceScheduling=None, LimitedServiceDays=None, GatewayLocationId=None, Location=None, ContactAndAddress=None):
        self.InterlineCarrierCode = InterlineCarrierCode
        self.InterlineCarrierName = InterlineCarrierName
        self.AdditionalDays = AdditionalDays
        self.LocalService = LocalService
        self.LocalDistance = LocalDistance
        self.LocalDuration = LocalDuration
        self.LocalServiceScheduling = LocalServiceScheduling
        if LimitedServiceDays is None:
            self.LimitedServiceDays = []
        else:
            self.LimitedServiceDays = LimitedServiceDays
        self.GatewayLocationId = GatewayLocationId
        self.Location = Location
        self.ContactAndAddress = ContactAndAddress
    def factory(*args_, **kwargs_):
        if FreightServiceCenterDetail.subclass:
            return FreightServiceCenterDetail.subclass(*args_, **kwargs_)
        else:
            return FreightServiceCenterDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InterlineCarrierCode(self): return self.InterlineCarrierCode
    def set_InterlineCarrierCode(self, InterlineCarrierCode): self.InterlineCarrierCode = InterlineCarrierCode
    def get_InterlineCarrierName(self): return self.InterlineCarrierName
    def set_InterlineCarrierName(self, InterlineCarrierName): self.InterlineCarrierName = InterlineCarrierName
    def get_AdditionalDays(self): return self.AdditionalDays
    def set_AdditionalDays(self, AdditionalDays): self.AdditionalDays = AdditionalDays
    def get_LocalService(self): return self.LocalService
    def set_LocalService(self, LocalService): self.LocalService = LocalService
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_LocalDistance(self): return self.LocalDistance
    def set_LocalDistance(self, LocalDistance): self.LocalDistance = LocalDistance
    def get_LocalDuration(self): return self.LocalDuration
    def set_LocalDuration(self, LocalDuration): self.LocalDuration = LocalDuration
    def get_LocalServiceScheduling(self): return self.LocalServiceScheduling
    def set_LocalServiceScheduling(self, LocalServiceScheduling): self.LocalServiceScheduling = LocalServiceScheduling
    def validate_FreightServiceSchedulingType(self, value):
        # Validate type FreightServiceSchedulingType, a restriction on xs:string.
        pass
    def get_LimitedServiceDays(self): return self.LimitedServiceDays
    def set_LimitedServiceDays(self, LimitedServiceDays): self.LimitedServiceDays = LimitedServiceDays
    def add_LimitedServiceDays(self, value): self.LimitedServiceDays.append(value)
    def insert_LimitedServiceDays(self, index, value): self.LimitedServiceDays[index] = value
    def validate_DayOfWeekType(self, value):
        # Validate type DayOfWeekType, a restriction on xs:string.
        pass
    def get_GatewayLocationId(self): return self.GatewayLocationId
    def set_GatewayLocationId(self, GatewayLocationId): self.GatewayLocationId = GatewayLocationId
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_ContactAndAddress(self): return self.ContactAndAddress
    def set_ContactAndAddress(self, ContactAndAddress): self.ContactAndAddress = ContactAndAddress
    def export(self, outfile, level, namespace_='ns:', name_='FreightServiceCenterDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FreightServiceCenterDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FreightServiceCenterDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FreightServiceCenterDetail', fromsubclass_=False):
        if self.InterlineCarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sInterlineCarrierCode>%s</%sInterlineCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.InterlineCarrierCode).encode(ExternalEncoding), input_name='InterlineCarrierCode'), namespace_))
        if self.InterlineCarrierName is not None:
            showIndent(outfile, level)
            outfile.write('<%sInterlineCarrierName>%s</%sInterlineCarrierName>\n' % (namespace_, self.gds_format_string(quote_xml(self.InterlineCarrierName).encode(ExternalEncoding), input_name='InterlineCarrierName'), namespace_))
        if self.AdditionalDays is not None:
            showIndent(outfile, level)
            outfile.write('<%sAdditionalDays>%s</%sAdditionalDays>\n' % (namespace_, self.gds_format_integer(self.AdditionalDays, input_name='AdditionalDays'), namespace_))
        if self.LocalService is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalService>%s</%sLocalService>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalService).encode(ExternalEncoding), input_name='LocalService'), namespace_))
        if self.LocalDistance:
            self.LocalDistance.export(outfile, level, namespace_, name_='LocalDistance')
        if self.LocalDuration is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalDuration>%s</%sLocalDuration>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalDuration).encode(ExternalEncoding), input_name='LocalDuration'), namespace_))
        if self.LocalServiceScheduling is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalServiceScheduling>%s</%sLocalServiceScheduling>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalServiceScheduling).encode(ExternalEncoding), input_name='LocalServiceScheduling'), namespace_))
        for LimitedServiceDays_ in self.LimitedServiceDays:
            showIndent(outfile, level)
            outfile.write('<%sLimitedServiceDays>%s</%sLimitedServiceDays>\n' % (namespace_, self.gds_format_string(quote_xml(LimitedServiceDays_).encode(ExternalEncoding), input_name='LimitedServiceDays'), namespace_))
        if self.GatewayLocationId is not None:
            showIndent(outfile, level)
            outfile.write('<%sGatewayLocationId>%s</%sGatewayLocationId>\n' % (namespace_, self.gds_format_string(quote_xml(self.GatewayLocationId).encode(ExternalEncoding), input_name='GatewayLocationId'), namespace_))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocation>%s</%sLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.Location).encode(ExternalEncoding), input_name='Location'), namespace_))
        if self.ContactAndAddress:
            self.ContactAndAddress.export(outfile, level, namespace_, name_='ContactAndAddress')
    def hasContent_(self):
        if (
            self.InterlineCarrierCode is not None or
            self.InterlineCarrierName is not None or
            self.AdditionalDays is not None or
            self.LocalService is not None or
            self.LocalDistance is not None or
            self.LocalDuration is not None or
            self.LocalServiceScheduling is not None or
            self.LimitedServiceDays or
            self.GatewayLocationId is not None or
            self.Location is not None or
            self.ContactAndAddress is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FreightServiceCenterDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InterlineCarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('InterlineCarrierCode=%s,\n' % quote_python(self.InterlineCarrierCode).encode(ExternalEncoding))
        if self.InterlineCarrierName is not None:
            showIndent(outfile, level)
            outfile.write('InterlineCarrierName=%s,\n' % quote_python(self.InterlineCarrierName).encode(ExternalEncoding))
        if self.AdditionalDays is not None:
            showIndent(outfile, level)
            outfile.write('AdditionalDays=%d,\n' % self.AdditionalDays)
        if self.LocalService is not None:
            showIndent(outfile, level)
            outfile.write('LocalService=%s,\n' % quote_python(self.LocalService).encode(ExternalEncoding))
        if self.LocalDistance is not None:
            showIndent(outfile, level)
            outfile.write('LocalDistance=model_.Distance(\n')
            self.LocalDistance.exportLiteral(outfile, level, name_='LocalDistance')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.LocalDuration is not None:
            showIndent(outfile, level)
            outfile.write('LocalDuration=%s,\n' % quote_python(self.LocalDuration).encode(ExternalEncoding))
        if self.LocalServiceScheduling is not None:
            showIndent(outfile, level)
            outfile.write('LocalServiceScheduling=%s,\n' % quote_python(self.LocalServiceScheduling).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('LimitedServiceDays=[\n')
        level += 1
        for LimitedServiceDays_ in self.LimitedServiceDays:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(LimitedServiceDays_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.GatewayLocationId is not None:
            showIndent(outfile, level)
            outfile.write('GatewayLocationId=%s,\n' % quote_python(self.GatewayLocationId).encode(ExternalEncoding))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=%s,\n' % quote_python(self.Location).encode(ExternalEncoding))
        if self.ContactAndAddress is not None:
            showIndent(outfile, level)
            outfile.write('ContactAndAddress=model_.ContactAndAddress(\n')
            self.ContactAndAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InterlineCarrierCode':
            InterlineCarrierCode_ = child_.text
            InterlineCarrierCode_ = self.gds_validate_string(InterlineCarrierCode_, node, 'InterlineCarrierCode')
            self.InterlineCarrierCode = InterlineCarrierCode_
        elif nodeName_ == 'InterlineCarrierName':
            InterlineCarrierName_ = child_.text
            InterlineCarrierName_ = self.gds_validate_string(InterlineCarrierName_, node, 'InterlineCarrierName')
            self.InterlineCarrierName = InterlineCarrierName_
        elif nodeName_ == 'AdditionalDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AdditionalDays')
            self.AdditionalDays = ival_
        elif nodeName_ == 'LocalService':
            LocalService_ = child_.text
            LocalService_ = self.gds_validate_string(LocalService_, node, 'LocalService')
            self.LocalService = LocalService_
            self.validate_ServiceType(self.LocalService)    # validate type ServiceType
        elif nodeName_ == 'LocalDistance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.set_LocalDistance(obj_)
        elif nodeName_ == 'LocalDuration':
            LocalDuration_ = child_.text
            LocalDuration_ = self.gds_validate_string(LocalDuration_, node, 'LocalDuration')
            self.LocalDuration = LocalDuration_
        elif nodeName_ == 'LocalServiceScheduling':
            LocalServiceScheduling_ = child_.text
            LocalServiceScheduling_ = self.gds_validate_string(LocalServiceScheduling_, node, 'LocalServiceScheduling')
            self.LocalServiceScheduling = LocalServiceScheduling_
            self.validate_FreightServiceSchedulingType(self.LocalServiceScheduling)    # validate type FreightServiceSchedulingType
        elif nodeName_ == 'LimitedServiceDays':
            LimitedServiceDays_ = child_.text
            LimitedServiceDays_ = self.gds_validate_string(LimitedServiceDays_, node, 'LimitedServiceDays')
            self.LimitedServiceDays.append(LimitedServiceDays_)
            self.validate_DayOfWeekType(self.LimitedServiceDays)    # validate type DayOfWeekType
        elif nodeName_ == 'GatewayLocationId':
            GatewayLocationId_ = child_.text
            GatewayLocationId_ = self.gds_validate_string(GatewayLocationId_, node, 'GatewayLocationId')
            self.GatewayLocationId = GatewayLocationId_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'ContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_ContactAndAddress(obj_)
# end class FreightServiceCenterDetail


class HoldAtLocationDetail(GeneratedsSuper):
    """Descriptive data required for a FedEx shipment that is to be held at
    the destination FedEx location for pickup by the recipient."""
    subclass = None
    superclass = None
    def __init__(self, PhoneNumber=None, LocationContactAndAddress=None, LocationType=None, LocationId=None, LocationNumber=None):
        self.PhoneNumber = PhoneNumber
        self.LocationContactAndAddress = LocationContactAndAddress
        self.LocationType = LocationType
        self.LocationId = LocationId
        self.LocationNumber = LocationNumber
    def factory(*args_, **kwargs_):
        if HoldAtLocationDetail.subclass:
            return HoldAtLocationDetail.subclass(*args_, **kwargs_)
        else:
            return HoldAtLocationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_LocationContactAndAddress(self): return self.LocationContactAndAddress
    def set_LocationContactAndAddress(self, LocationContactAndAddress): self.LocationContactAndAddress = LocationContactAndAddress
    def get_LocationType(self): return self.LocationType
    def set_LocationType(self, LocationType): self.LocationType = LocationType
    def validate_FedExLocationType(self, value):
        # Validate type FedExLocationType, a restriction on xs:string.
        pass
    def get_LocationId(self): return self.LocationId
    def set_LocationId(self, LocationId): self.LocationId = LocationId
    def get_LocationNumber(self): return self.LocationNumber
    def set_LocationNumber(self, LocationNumber): self.LocationNumber = LocationNumber
    def export(self, outfile, level, namespace_='ns:', name_='HoldAtLocationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HoldAtLocationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='HoldAtLocationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='HoldAtLocationDetail', fromsubclass_=False):
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
        if self.LocationContactAndAddress:
            self.LocationContactAndAddress.export(outfile, level, namespace_, name_='LocationContactAndAddress')
        if self.LocationType is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocationType>%s</%sLocationType>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocationType).encode(ExternalEncoding), input_name='LocationType'), namespace_))
        if self.LocationId is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocationId>%s</%sLocationId>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocationId).encode(ExternalEncoding), input_name='LocationId'), namespace_))
        if self.LocationNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocationNumber>%s</%sLocationNumber>\n' % (namespace_, self.gds_format_integer(self.LocationNumber, input_name='LocationNumber'), namespace_))
    def hasContent_(self):
        if (
            self.PhoneNumber is not None or
            self.LocationContactAndAddress is not None or
            self.LocationType is not None or
            self.LocationId is not None or
            self.LocationNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='HoldAtLocationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
        if self.LocationContactAndAddress is not None:
            showIndent(outfile, level)
            outfile.write('LocationContactAndAddress=model_.ContactAndAddress(\n')
            self.LocationContactAndAddress.exportLiteral(outfile, level, name_='LocationContactAndAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.LocationType is not None:
            showIndent(outfile, level)
            outfile.write('LocationType=%s,\n' % quote_python(self.LocationType).encode(ExternalEncoding))
        if self.LocationId is not None:
            showIndent(outfile, level)
            outfile.write('LocationId=%s,\n' % quote_python(self.LocationId).encode(ExternalEncoding))
        if self.LocationNumber is not None:
            showIndent(outfile, level)
            outfile.write('LocationNumber=%d,\n' % self.LocationNumber)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'LocationContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_LocationContactAndAddress(obj_)
        elif nodeName_ == 'LocationType':
            LocationType_ = child_.text
            LocationType_ = self.gds_validate_string(LocationType_, node, 'LocationType')
            self.LocationType = LocationType_
            self.validate_FedExLocationType(self.LocationType)    # validate type FedExLocationType
        elif nodeName_ == 'LocationId':
            LocationId_ = child_.text
            LocationId_ = self.gds_validate_string(LocationId_, node, 'LocationId')
            self.LocationId = LocationId_
        elif nodeName_ == 'LocationNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'LocationNumber')
            self.LocationNumber = ival_
# end class HoldAtLocationDetail


class HomeDeliveryPremiumDetail(GeneratedsSuper):
    """The descriptive data required by FedEx for home delivery services."""
    subclass = None
    superclass = None
    def __init__(self, HomeDeliveryPremiumType=None, Date=None, PhoneNumber=None):
        self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
        self.Date = Date
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if HomeDeliveryPremiumDetail.subclass:
            return HomeDeliveryPremiumDetail.subclass(*args_, **kwargs_)
        else:
            return HomeDeliveryPremiumDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HomeDeliveryPremiumType(self): return self.HomeDeliveryPremiumType
    def set_HomeDeliveryPremiumType(self, HomeDeliveryPremiumType): self.HomeDeliveryPremiumType = HomeDeliveryPremiumType
    def validate_HomeDeliveryPremiumType(self, value):
        # Validate type HomeDeliveryPremiumType, a restriction on xs:string.
        pass
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def export(self, outfile, level, namespace_='ns:', name_='HomeDeliveryPremiumDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HomeDeliveryPremiumDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='HomeDeliveryPremiumDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='HomeDeliveryPremiumDetail', fromsubclass_=False):
        if self.HomeDeliveryPremiumType is not None:
            showIndent(outfile, level)
            outfile.write('<%sHomeDeliveryPremiumType>%s</%sHomeDeliveryPremiumType>\n' % (namespace_, self.gds_format_string(quote_xml(self.HomeDeliveryPremiumType).encode(ExternalEncoding), input_name='HomeDeliveryPremiumType'), namespace_))
        if self.Date is not None:
            showIndent(outfile, level)
            outfile.write('<%sDate>%s</%sDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.Date).encode(ExternalEncoding), input_name='Date'), namespace_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
    def hasContent_(self):
        if (
            self.HomeDeliveryPremiumType is not None or
            self.Date is not None or
            self.PhoneNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='HomeDeliveryPremiumDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HomeDeliveryPremiumType is not None:
            showIndent(outfile, level)
            outfile.write('HomeDeliveryPremiumType=%s,\n' % quote_python(self.HomeDeliveryPremiumType).encode(ExternalEncoding))
        if self.Date is not None:
            showIndent(outfile, level)
            outfile.write('Date=%s,\n' % quote_python(self.Date).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HomeDeliveryPremiumType':
            HomeDeliveryPremiumType_ = child_.text
            HomeDeliveryPremiumType_ = self.gds_validate_string(HomeDeliveryPremiumType_, node, 'HomeDeliveryPremiumType')
            self.HomeDeliveryPremiumType = HomeDeliveryPremiumType_
            self.validate_HomeDeliveryPremiumType(self.HomeDeliveryPremiumType)    # validate type HomeDeliveryPremiumType
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
# end class HomeDeliveryPremiumDetail


class InternationalControlledExportDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, ForeignTradeZoneCode=None, EntryNumber=None, LicenseOrPermitNumber=None, LicenseOrPermitExpirationDate=None):
        self.Type = Type
        self.ForeignTradeZoneCode = ForeignTradeZoneCode
        self.EntryNumber = EntryNumber
        self.LicenseOrPermitNumber = LicenseOrPermitNumber
        self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def factory(*args_, **kwargs_):
        if InternationalControlledExportDetail.subclass:
            return InternationalControlledExportDetail.subclass(*args_, **kwargs_)
        else:
            return InternationalControlledExportDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_InternationalControlledExportType(self, value):
        # Validate type InternationalControlledExportType, a restriction on xs:string.
        pass
    def get_ForeignTradeZoneCode(self): return self.ForeignTradeZoneCode
    def set_ForeignTradeZoneCode(self, ForeignTradeZoneCode): self.ForeignTradeZoneCode = ForeignTradeZoneCode
    def get_EntryNumber(self): return self.EntryNumber
    def set_EntryNumber(self, EntryNumber): self.EntryNumber = EntryNumber
    def get_LicenseOrPermitNumber(self): return self.LicenseOrPermitNumber
    def set_LicenseOrPermitNumber(self, LicenseOrPermitNumber): self.LicenseOrPermitNumber = LicenseOrPermitNumber
    def get_LicenseOrPermitExpirationDate(self): return self.LicenseOrPermitExpirationDate
    def set_LicenseOrPermitExpirationDate(self, LicenseOrPermitExpirationDate): self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate
    def export(self, outfile, level, namespace_='ns:', name_='InternationalControlledExportDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InternationalControlledExportDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='InternationalControlledExportDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='InternationalControlledExportDetail', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.ForeignTradeZoneCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sForeignTradeZoneCode>%s</%sForeignTradeZoneCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.ForeignTradeZoneCode).encode(ExternalEncoding), input_name='ForeignTradeZoneCode'), namespace_))
        if self.EntryNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sEntryNumber>%s</%sEntryNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.EntryNumber).encode(ExternalEncoding), input_name='EntryNumber'), namespace_))
        if self.LicenseOrPermitNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sLicenseOrPermitNumber>%s</%sLicenseOrPermitNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.LicenseOrPermitNumber).encode(ExternalEncoding), input_name='LicenseOrPermitNumber'), namespace_))
        if self.LicenseOrPermitExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sLicenseOrPermitExpirationDate>%s</%sLicenseOrPermitExpirationDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.LicenseOrPermitExpirationDate).encode(ExternalEncoding), input_name='LicenseOrPermitExpirationDate'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ForeignTradeZoneCode is not None or
            self.EntryNumber is not None or
            self.LicenseOrPermitNumber is not None or
            self.LicenseOrPermitExpirationDate is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InternationalControlledExportDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.ForeignTradeZoneCode is not None:
            showIndent(outfile, level)
            outfile.write('ForeignTradeZoneCode=%s,\n' % quote_python(self.ForeignTradeZoneCode).encode(ExternalEncoding))
        if self.EntryNumber is not None:
            showIndent(outfile, level)
            outfile.write('EntryNumber=%s,\n' % quote_python(self.EntryNumber).encode(ExternalEncoding))
        if self.LicenseOrPermitNumber is not None:
            showIndent(outfile, level)
            outfile.write('LicenseOrPermitNumber=%s,\n' % quote_python(self.LicenseOrPermitNumber).encode(ExternalEncoding))
        if self.LicenseOrPermitExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('LicenseOrPermitExpirationDate=%s,\n' % quote_python(self.LicenseOrPermitExpirationDate).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_InternationalControlledExportType(self.Type)    # validate type InternationalControlledExportType
        elif nodeName_ == 'ForeignTradeZoneCode':
            ForeignTradeZoneCode_ = child_.text
            ForeignTradeZoneCode_ = self.gds_validate_string(ForeignTradeZoneCode_, node, 'ForeignTradeZoneCode')
            self.ForeignTradeZoneCode = ForeignTradeZoneCode_
        elif nodeName_ == 'EntryNumber':
            EntryNumber_ = child_.text
            EntryNumber_ = self.gds_validate_string(EntryNumber_, node, 'EntryNumber')
            self.EntryNumber = EntryNumber_
        elif nodeName_ == 'LicenseOrPermitNumber':
            LicenseOrPermitNumber_ = child_.text
            LicenseOrPermitNumber_ = self.gds_validate_string(LicenseOrPermitNumber_, node, 'LicenseOrPermitNumber')
            self.LicenseOrPermitNumber = LicenseOrPermitNumber_
        elif nodeName_ == 'LicenseOrPermitExpirationDate':
            LicenseOrPermitExpirationDate_ = child_.text
            LicenseOrPermitExpirationDate_ = self.gds_validate_string(LicenseOrPermitExpirationDate_, node, 'LicenseOrPermitExpirationDate')
            self.LicenseOrPermitExpirationDate = LicenseOrPermitExpirationDate_
# end class InternationalControlledExportDetail


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class MarkingOrTaggingDetail(GeneratedsSuper):
    """Specification for marking or tagging of pieces in shipment."""
    subclass = None
    superclass = None
    def __init__(self, Count=None):
        self.Count = Count
    def factory(*args_, **kwargs_):
        if MarkingOrTaggingDetail.subclass:
            return MarkingOrTaggingDetail.subclass(*args_, **kwargs_)
        else:
            return MarkingOrTaggingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Count(self): return self.Count
    def set_Count(self, Count): self.Count = Count
    def export(self, outfile, level, namespace_='ns:', name_='MarkingOrTaggingDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MarkingOrTaggingDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='MarkingOrTaggingDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='MarkingOrTaggingDetail', fromsubclass_=False):
        if self.Count is not None:
            showIndent(outfile, level)
            outfile.write('<%sCount>%s</%sCount>\n' % (namespace_, self.gds_format_integer(self.Count, input_name='Count'), namespace_))
    def hasContent_(self):
        if (
            self.Count is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MarkingOrTaggingDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Count is not None:
            showIndent(outfile, level)
            outfile.write('Count=%d,\n' % self.Count)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Count')
            self.Count = ival_
# end class MarkingOrTaggingDetail


class Money(GeneratedsSuper):
    """The descriptive data for the medium of exchange for FedEx services."""
    subclass = None
    superclass = None
    def __init__(self, Currency=None, Amount=None):
        self.Currency = Currency
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if Money.subclass:
            return Money.subclass(*args_, **kwargs_)
        else:
            return Money(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Currency(self): return self.Currency
    def set_Currency(self, Currency): self.Currency = Currency
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def export(self, outfile, level, namespace_='ns:', name_='Money', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Money')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Money'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Money', fromsubclass_=False):
        if self.Currency is not None:
            showIndent(outfile, level)
            outfile.write('<%sCurrency>%s</%sCurrency>\n' % (namespace_, self.gds_format_string(quote_xml(self.Currency).encode(ExternalEncoding), input_name='Currency'), namespace_))
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('<%sAmount>%s</%sAmount>\n' % (namespace_, self.gds_format_float(self.Amount, input_name='Amount'), namespace_))
    def hasContent_(self):
        if (
            self.Currency is not None or
            self.Amount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Money'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Currency is not None:
            showIndent(outfile, level)
            outfile.write('Currency=%s,\n' % quote_python(self.Currency).encode(ExternalEncoding))
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%f,\n' % self.Amount)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Currency':
            Currency_ = child_.text
            Currency_ = self.gds_validate_string(Currency_, node, 'Currency')
            self.Currency = Currency_
        elif nodeName_ == 'Amount':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Amount')
            self.Amount = fval_
# end class Money


class NonBusinessTimeDetail(GeneratedsSuper):
    """Specification for services performed during non-business hours
    and/or days."""
    subclass = None
    superclass = None
    def __init__(self, PersonDays=None, PersonHours=None):
        self.PersonDays = PersonDays
        self.PersonHours = PersonHours
    def factory(*args_, **kwargs_):
        if NonBusinessTimeDetail.subclass:
            return NonBusinessTimeDetail.subclass(*args_, **kwargs_)
        else:
            return NonBusinessTimeDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonDays(self): return self.PersonDays
    def set_PersonDays(self, PersonDays): self.PersonDays = PersonDays
    def get_PersonHours(self): return self.PersonHours
    def set_PersonHours(self, PersonHours): self.PersonHours = PersonHours
    def export(self, outfile, level, namespace_='ns:', name_='NonBusinessTimeDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NonBusinessTimeDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NonBusinessTimeDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NonBusinessTimeDetail', fromsubclass_=False):
        if self.PersonDays is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonDays>%s</%sPersonDays>\n' % (namespace_, self.gds_format_integer(self.PersonDays, input_name='PersonDays'), namespace_))
        if self.PersonHours is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonHours>%s</%sPersonHours>\n' % (namespace_, self.gds_format_integer(self.PersonHours, input_name='PersonHours'), namespace_))
    def hasContent_(self):
        if (
            self.PersonDays is not None or
            self.PersonHours is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NonBusinessTimeDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PersonDays is not None:
            showIndent(outfile, level)
            outfile.write('PersonDays=%d,\n' % self.PersonDays)
        if self.PersonHours is not None:
            showIndent(outfile, level)
            outfile.write('PersonHours=%d,\n' % self.PersonHours)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonDays')
            self.PersonDays = ival_
        elif nodeName_ == 'PersonHours':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PersonHours')
            self.PersonHours = ival_
# end class NonBusinessTimeDetail


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class PalletShrinkwrapDetail(GeneratedsSuper):
    """Specifications for pallets to be shrinkwrapped as part of a Freight
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None):
        self.PalletCount = PalletCount
    def factory(*args_, **kwargs_):
        if PalletShrinkwrapDetail.subclass:
            return PalletShrinkwrapDetail.subclass(*args_, **kwargs_)
        else:
            return PalletShrinkwrapDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletCount(self): return self.PalletCount
    def set_PalletCount(self, PalletCount): self.PalletCount = PalletCount
    def export(self, outfile, level, namespace_='ns:', name_='PalletShrinkwrapDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletShrinkwrapDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PalletShrinkwrapDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PalletShrinkwrapDetail', fromsubclass_=False):
        if self.PalletCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPalletCount>%s</%sPalletCount>\n' % (namespace_, self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespace_))
    def hasContent_(self):
        if (
            self.PalletCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PalletShrinkwrapDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PalletCount is not None:
            showIndent(outfile, level)
            outfile.write('PalletCount=%d,\n' % self.PalletCount)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
# end class PalletShrinkwrapDetail


class PalletsProvidedDetail(GeneratedsSuper):
    """Specifications for pallets to be provided on Freight shipment."""
    subclass = None
    superclass = None
    def __init__(self, PalletCount=None):
        self.PalletCount = PalletCount
    def factory(*args_, **kwargs_):
        if PalletsProvidedDetail.subclass:
            return PalletsProvidedDetail.subclass(*args_, **kwargs_)
        else:
            return PalletsProvidedDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PalletCount(self): return self.PalletCount
    def set_PalletCount(self, PalletCount): self.PalletCount = PalletCount
    def export(self, outfile, level, namespace_='ns:', name_='PalletsProvidedDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PalletsProvidedDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PalletsProvidedDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PalletsProvidedDetail', fromsubclass_=False):
        if self.PalletCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPalletCount>%s</%sPalletCount>\n' % (namespace_, self.gds_format_integer(self.PalletCount, input_name='PalletCount'), namespace_))
    def hasContent_(self):
        if (
            self.PalletCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PalletsProvidedDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PalletCount is not None:
            showIndent(outfile, level)
            outfile.write('PalletCount=%d,\n' % self.PalletCount)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PalletCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PalletCount')
            self.PalletCount = ival_
# end class PalletsProvidedDetail


class ParsedContact(GeneratedsSuper):
    """This type contains equivalent data to Contact, but uses a form of
    person name with separate first and last names."""
    subclass = None
    superclass = None
    def __init__(self, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if ParsedContact.subclass:
            return ParsedContact.subclass(*args_, **kwargs_)
        else:
            return ParsedContact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def export(self, outfile, level, namespace_='ns:', name_='ParsedContact', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedContact')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedContact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedContact', fromsubclass_=False):
        if self.PersonName:
            self.PersonName.export(outfile, level, namespace_, name_='PersonName')
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('<%sTitle>%s</%sTitle>\n' % (namespace_, self.gds_format_string(quote_xml(self.Title).encode(ExternalEncoding), input_name='Title'), namespace_))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagerNumber).encode(ExternalEncoding), input_name='PagerNumber'), namespace_))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.FaxNumber).encode(ExternalEncoding), input_name='FaxNumber'), namespace_))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailAddress).encode(ExternalEncoding), input_name='EMailAddress'), namespace_))
    def hasContent_(self):
        if (
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedContact'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PersonName is not None:
            showIndent(outfile, level)
            outfile.write('PersonName=model_.ParsedPersonName(\n')
            self.PersonName.exportLiteral(outfile, level, name_='PersonName')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('Title=%s,\n' % quote_python(self.Title).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('PagerNumber=%s,\n' % quote_python(self.PagerNumber).encode(ExternalEncoding))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('FaxNumber=%s,\n' % quote_python(self.FaxNumber).encode(ExternalEncoding))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('EMailAddress=%s,\n' % quote_python(self.EMailAddress).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonName':
            obj_ = ParsedPersonName.factory()
            obj_.build(child_)
            self.set_PersonName(obj_)
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class ParsedContact


class ParsedContactAndAddress(GeneratedsSuper):
    """This type contains equivalent data to ContactAndAddress, but uses a
    form of person name with separate first, middle and last names."""
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None):
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ParsedContactAndAddress.subclass:
            return ParsedContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ParsedContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='ParsedContactAndAddress', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedContactAndAddress')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedContactAndAddress', fromsubclass_=False):
        if self.Contact:
            self.Contact.export(outfile, level, namespace_, name_='Contact')
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address')
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedContactAndAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=model_.ParsedContact(\n')
            self.Contact.exportLiteral(outfile, level, name_='Contact')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = ParsedContact.factory()
            obj_.build(child_)
            self.set_Contact(obj_)
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ParsedContactAndAddress


class ParsedPersonName(GeneratedsSuper):
    """Middle name added to support credit card fraud detection."""
    subclass = None
    superclass = None
    def __init__(self, FirstName=None, MiddleName=None, LastName=None):
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
    def factory(*args_, **kwargs_):
        if ParsedPersonName.subclass:
            return ParsedPersonName.subclass(*args_, **kwargs_)
        else:
            return ParsedPersonName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def export(self, outfile, level, namespace_='ns:', name_='ParsedPersonName', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedPersonName')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedPersonName'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedPersonName', fromsubclass_=False):
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('<%sFirstName>%s</%sFirstName>\n' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('<%sMiddleName>%s</%sMiddleName>\n' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('<%sLastName>%s</%sLastName>\n' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_))
    def hasContent_(self):
        if (
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedPersonName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
# end class ParsedPersonName


class Party(GeneratedsSuper):
    """The descriptive data for a person or company entitiy doing business
    with FedEx."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, Tins=None, Contact=None, Address=None):
        self.AccountNumber = AccountNumber
        if Tins is None:
            self.Tins = []
        else:
            self.Tins = Tins
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if Party.subclass:
            return Party.subclass(*args_, **kwargs_)
        else:
            return Party(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Tins(self): return self.Tins
    def set_Tins(self, Tins): self.Tins = Tins
    def add_Tins(self, value): self.Tins.append(value)
    def insert_Tins(self, index, value): self.Tins[index] = value
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='Party', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Party')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Party'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Party', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        for Tins_ in self.Tins:
            Tins_.export(outfile, level, namespace_, name_='Tins')
        if self.Contact:
            self.Contact.export(outfile, level, namespace_, name_='Contact')
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.Tins or
            self.Contact is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Party'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Tins=[\n')
        level += 1
        for Tins_ in self.Tins:
            showIndent(outfile, level)
            outfile.write('model_.TaxpayerIdentification(\n')
            Tins_.exportLiteral(outfile, level, name_='TaxpayerIdentification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=model_.Contact(\n')
            self.Contact.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Tins':
            obj_ = TaxpayerIdentification.factory()
            obj_.build(child_)
            self.Tins.append(obj_)
        elif nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_Contact(obj_)
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class Party


class Payment(GeneratedsSuper):
    """The descriptive data for the monetary compensation given to FedEx
    for services rendered to the customer."""
    subclass = None
    superclass = None
    def __init__(self, PaymentType=None, Payor=None, CreditCard=None, CreditCardTransactionDetail=None, Amount=None):
        self.PaymentType = PaymentType
        self.Payor = Payor
        self.CreditCard = CreditCard
        self.CreditCardTransactionDetail = CreditCardTransactionDetail
        self.Amount = Amount
    def factory(*args_, **kwargs_):
        if Payment.subclass:
            return Payment.subclass(*args_, **kwargs_)
        else:
            return Payment(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PaymentType(self): return self.PaymentType
    def set_PaymentType(self, PaymentType): self.PaymentType = PaymentType
    def validate_PaymentType(self, value):
        # Validate type PaymentType, a restriction on xs:string.
        pass
    def get_Payor(self): return self.Payor
    def set_Payor(self, Payor): self.Payor = Payor
    def get_CreditCard(self): return self.CreditCard
    def set_CreditCard(self, CreditCard): self.CreditCard = CreditCard
    def get_CreditCardTransactionDetail(self): return self.CreditCardTransactionDetail
    def set_CreditCardTransactionDetail(self, CreditCardTransactionDetail): self.CreditCardTransactionDetail = CreditCardTransactionDetail
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def export(self, outfile, level, namespace_='ns:', name_='Payment', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Payment')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Payment'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Payment', fromsubclass_=False):
        if self.PaymentType is not None:
            showIndent(outfile, level)
            outfile.write('<%sPaymentType>%s</%sPaymentType>\n' % (namespace_, self.gds_format_string(quote_xml(self.PaymentType).encode(ExternalEncoding), input_name='PaymentType'), namespace_))
        if self.Payor:
            self.Payor.export(outfile, level, namespace_, name_='Payor')
        if self.CreditCard:
            self.CreditCard.export(outfile, level, namespace_, name_='CreditCard')
        if self.CreditCardTransactionDetail:
            self.CreditCardTransactionDetail.export(outfile, level, namespace_, name_='CreditCardTransactionDetail')
        if self.Amount:
            self.Amount.export(outfile, level, namespace_, name_='Amount')
    def hasContent_(self):
        if (
            self.PaymentType is not None or
            self.Payor is not None or
            self.CreditCard is not None or
            self.CreditCardTransactionDetail is not None or
            self.Amount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Payment'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PaymentType is not None:
            showIndent(outfile, level)
            outfile.write('PaymentType=%s,\n' % quote_python(self.PaymentType).encode(ExternalEncoding))
        if self.Payor is not None:
            showIndent(outfile, level)
            outfile.write('Payor=model_.Payor(\n')
            self.Payor.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCard is not None:
            showIndent(outfile, level)
            outfile.write('CreditCard=model_.CreditCard(\n')
            self.CreditCard.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardTransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTransactionDetail=model_.CreditCardTransactionDetail(\n')
            self.CreditCardTransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=model_.Money(\n')
            self.Amount.exportLiteral(outfile, level, name_='Amount')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PaymentType':
            PaymentType_ = child_.text
            PaymentType_ = self.gds_validate_string(PaymentType_, node, 'PaymentType')
            self.PaymentType = PaymentType_
            self.validate_PaymentType(self.PaymentType)    # validate type PaymentType
        elif nodeName_ == 'Payor':
            obj_ = Payor.factory()
            obj_.build(child_)
            self.set_Payor(obj_)
        elif nodeName_ == 'CreditCard':
            obj_ = CreditCard.factory()
            obj_.build(child_)
            self.set_CreditCard(obj_)
        elif nodeName_ == 'CreditCardTransactionDetail':
            obj_ = CreditCardTransactionDetail.factory()
            obj_.build(child_)
            self.set_CreditCardTransactionDetail(obj_)
        elif nodeName_ == 'Amount':
            obj_ = Money.factory()
            obj_.build(child_)
            self.set_Amount(obj_)
# end class Payment


class Payor(GeneratedsSuper):
    """The descriptive data identifying the party responsible for payment
    for a service."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, CountryCode=None, AssociatedAccounts=None):
        self.AccountNumber = AccountNumber
        self.CountryCode = CountryCode
        if AssociatedAccounts is None:
            self.AssociatedAccounts = []
        else:
            self.AssociatedAccounts = AssociatedAccounts
    def factory(*args_, **kwargs_):
        if Payor.subclass:
            return Payor.subclass(*args_, **kwargs_)
        else:
            return Payor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_AssociatedAccounts(self): return self.AssociatedAccounts
    def set_AssociatedAccounts(self, AssociatedAccounts): self.AssociatedAccounts = AssociatedAccounts
    def add_AssociatedAccounts(self, value): self.AssociatedAccounts.append(value)
    def insert_AssociatedAccounts(self, index, value): self.AssociatedAccounts[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Payor', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Payor')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Payor'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Payor', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        for AssociatedAccounts_ in self.AssociatedAccounts:
            AssociatedAccounts_.export(outfile, level, namespace_, name_='AssociatedAccounts')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.CountryCode is not None or
            self.AssociatedAccounts
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Payor'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AssociatedAccounts=[\n')
        level += 1
        for AssociatedAccounts_ in self.AssociatedAccounts:
            showIndent(outfile, level)
            outfile.write('model_.AssociatedAccount(\n')
            AssociatedAccounts_.exportLiteral(outfile, level, name_='AssociatedAccount')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'AssociatedAccounts':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.AssociatedAccounts.append(obj_)
# end class Payor


class PendingShipmentDetail(GeneratedsSuper):
    """This information describes the kind of pending shipment being
    requested."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, ExpirationDate=None, EmailLabelDetail=None):
        self.Type = Type
        self.ExpirationDate = ExpirationDate
        self.EmailLabelDetail = EmailLabelDetail
    def factory(*args_, **kwargs_):
        if PendingShipmentDetail.subclass:
            return PendingShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return PendingShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_PendingShipmentType(self, value):
        # Validate type PendingShipmentType, a restriction on xs:string.
        pass
    def get_ExpirationDate(self): return self.ExpirationDate
    def set_ExpirationDate(self, ExpirationDate): self.ExpirationDate = ExpirationDate
    def get_EmailLabelDetail(self): return self.EmailLabelDetail
    def set_EmailLabelDetail(self, EmailLabelDetail): self.EmailLabelDetail = EmailLabelDetail
    def export(self, outfile, level, namespace_='ns:', name_='PendingShipmentDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PendingShipmentDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PendingShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PendingShipmentDetail', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.ExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpirationDate>%s</%sExpirationDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ExpirationDate).encode(ExternalEncoding), input_name='ExpirationDate'), namespace_))
        if self.EmailLabelDetail:
            self.EmailLabelDetail.export(outfile, level, namespace_, name_='EmailLabelDetail')
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ExpirationDate is not None or
            self.EmailLabelDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PendingShipmentDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.ExpirationDate is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationDate=%s,\n' % quote_python(self.ExpirationDate).encode(ExternalEncoding))
        if self.EmailLabelDetail is not None:
            showIndent(outfile, level)
            outfile.write('EmailLabelDetail=model_.EMailLabelDetail(\n')
            self.EmailLabelDetail.exportLiteral(outfile, level, name_='EmailLabelDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_PendingShipmentType(self.Type)    # validate type PendingShipmentType
        elif nodeName_ == 'ExpirationDate':
            ExpirationDate_ = child_.text
            ExpirationDate_ = self.gds_validate_string(ExpirationDate_, node, 'ExpirationDate')
            self.ExpirationDate = ExpirationDate_
        elif nodeName_ == 'EmailLabelDetail':
            obj_ = EMailLabelDetail.factory()
            obj_.build(child_)
            self.set_EmailLabelDetail(obj_)
# end class PendingShipmentDetail


class PickupAvailabilityReply(GeneratedsSuper):
    """The descriptive data returned to a client in response to a cancel
    dispatch request."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, RequestTimestamp=None, Options=None, CloseTimeType=None, CloseTime=None, LocalTime=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.RequestTimestamp = RequestTimestamp
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
        self.CloseTimeType = CloseTimeType
        self.CloseTime = CloseTime
        self.LocalTime = LocalTime
    def factory(*args_, **kwargs_):
        if PickupAvailabilityReply.subclass:
            return PickupAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_RequestTimestamp(self): return self.RequestTimestamp
    def set_RequestTimestamp(self, RequestTimestamp): self.RequestTimestamp = RequestTimestamp
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options(self, index, value): self.Options[index] = value
    def get_CloseTimeType(self): return self.CloseTimeType
    def set_CloseTimeType(self, CloseTimeType): self.CloseTimeType = CloseTimeType
    def validate_CloseTimeType(self, value):
        # Validate type CloseTimeType, a restriction on xs:string.
        pass
    def get_CloseTime(self): return self.CloseTime
    def set_CloseTime(self, CloseTime): self.CloseTime = CloseTime
    def get_LocalTime(self): return self.LocalTime
    def set_LocalTime(self, LocalTime): self.LocalTime = LocalTime
    def export(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupAvailabilityReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.RequestTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestTimestamp>%s</%sRequestTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestTimestamp).encode(ExternalEncoding), input_name='RequestTimestamp'), namespace_))
        for Options_ in self.Options:
            Options_.export(outfile, level, namespace_, name_='Options')
        if self.CloseTimeType is not None:
            showIndent(outfile, level)
            outfile.write('<%sCloseTimeType>%s</%sCloseTimeType>\n' % (namespace_, self.gds_format_string(quote_xml(self.CloseTimeType).encode(ExternalEncoding), input_name='CloseTimeType'), namespace_))
        if self.CloseTime:
            self.CloseTime.export(outfile, level, namespace_, name_='CloseTime')
        if self.LocalTime:
            self.LocalTime.export(outfile, level, namespace_, name_='LocalTime')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestTimestamp is not None or
            self.Options or
            self.CloseTimeType is not None or
            self.CloseTime is not None or
            self.LocalTime is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PickupAvailabilityReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RequestTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('RequestTimestamp=%s,\n' % quote_python(self.RequestTimestamp).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Options=[\n')
        level += 1
        for Options_ in self.Options:
            showIndent(outfile, level)
            outfile.write('model_.PickupScheduleOption(\n')
            Options_.exportLiteral(outfile, level, name_='PickupScheduleOption')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CloseTimeType is not None:
            showIndent(outfile, level)
            outfile.write('CloseTimeType=%s,\n' % quote_python(self.CloseTimeType).encode(ExternalEncoding))
        if self.CloseTime is not None:
            showIndent(outfile, level)
            outfile.write('CloseTime=model_.xs_time(\n')
            self.CloseTime.exportLiteral(outfile, level, name_='CloseTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.LocalTime is not None:
            showIndent(outfile, level)
            outfile.write('LocalTime=model_.xs_time(\n')
            self.LocalTime.exportLiteral(outfile, level, name_='LocalTime')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'RequestTimestamp':
            RequestTimestamp_ = child_.text
            RequestTimestamp_ = self.gds_validate_string(RequestTimestamp_, node, 'RequestTimestamp')
            self.RequestTimestamp = RequestTimestamp_
        elif nodeName_ == 'Options':
            obj_ = PickupScheduleOption.factory()
            obj_.build(child_)
            self.Options.append(obj_)
        elif nodeName_ == 'CloseTimeType':
            CloseTimeType_ = child_.text
            CloseTimeType_ = self.gds_validate_string(CloseTimeType_, node, 'CloseTimeType')
            self.CloseTimeType = CloseTimeType_
            self.validate_CloseTimeType(self.CloseTimeType)    # validate type CloseTimeType
        elif nodeName_ == 'CloseTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_CloseTime(obj_)
        elif nodeName_ == 'LocalTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_LocalTime(obj_)
# end class PickupAvailabilityReply


class PickupAvailabilityRequest(GeneratedsSuper):
    """The descriptive data to request availability of pickup."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, AccountNumber=None, PickupAddress=None, PickupRequestType=None, DispatchDate=None, NumberOfBusinessDays=None, PackageReadyTime=None, CustomerCloseTime=None, Carriers=None, ShipmentAttributes=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.AccountNumber = AccountNumber
        self.PickupAddress = PickupAddress
        if PickupRequestType is None:
            self.PickupRequestType = []
        else:
            self.PickupRequestType = PickupRequestType
        self.DispatchDate = DispatchDate
        self.NumberOfBusinessDays = NumberOfBusinessDays
        self.PackageReadyTime = PackageReadyTime
        self.CustomerCloseTime = CustomerCloseTime
        if Carriers is None:
            self.Carriers = []
        else:
            self.Carriers = Carriers
        self.ShipmentAttributes = ShipmentAttributes
    def factory(*args_, **kwargs_):
        if PickupAvailabilityRequest.subclass:
            return PickupAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return PickupAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_PickupAddress(self): return self.PickupAddress
    def set_PickupAddress(self, PickupAddress): self.PickupAddress = PickupAddress
    def get_PickupRequestType(self): return self.PickupRequestType
    def set_PickupRequestType(self, PickupRequestType): self.PickupRequestType = PickupRequestType
    def add_PickupRequestType(self, value): self.PickupRequestType.append(value)
    def insert_PickupRequestType(self, index, value): self.PickupRequestType[index] = value
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        pass
    def get_DispatchDate(self): return self.DispatchDate
    def set_DispatchDate(self, DispatchDate): self.DispatchDate = DispatchDate
    def get_NumberOfBusinessDays(self): return self.NumberOfBusinessDays
    def set_NumberOfBusinessDays(self, NumberOfBusinessDays): self.NumberOfBusinessDays = NumberOfBusinessDays
    def get_PackageReadyTime(self): return self.PackageReadyTime
    def set_PackageReadyTime(self, PackageReadyTime): self.PackageReadyTime = PackageReadyTime
    def get_CustomerCloseTime(self): return self.CustomerCloseTime
    def set_CustomerCloseTime(self, CustomerCloseTime): self.CustomerCloseTime = CustomerCloseTime
    def get_Carriers(self): return self.Carriers
    def set_Carriers(self, Carriers): self.Carriers = Carriers
    def add_Carriers(self, value): self.Carriers.append(value)
    def insert_Carriers(self, index, value): self.Carriers[index] = value
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_ShipmentAttributes(self): return self.ShipmentAttributes
    def set_ShipmentAttributes(self, ShipmentAttributes): self.ShipmentAttributes = ShipmentAttributes
    def export(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupAvailabilityRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.AccountNumber:
            self.AccountNumber.export(outfile, level, namespace_, name_='AccountNumber')
        if self.PickupAddress:
            self.PickupAddress.export(outfile, level, namespace_, name_='PickupAddress')
        for PickupRequestType_ in self.PickupRequestType:
            showIndent(outfile, level)
            outfile.write('<%sPickupRequestType>%s</%sPickupRequestType>\n' % (namespace_, self.gds_format_string(quote_xml(PickupRequestType_).encode(ExternalEncoding), input_name='PickupRequestType'), namespace_))
        if self.DispatchDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sDispatchDate>%s</%sDispatchDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.DispatchDate).encode(ExternalEncoding), input_name='DispatchDate'), namespace_))
        if self.NumberOfBusinessDays is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumberOfBusinessDays>%s</%sNumberOfBusinessDays>\n' % (namespace_, self.gds_format_integer(self.NumberOfBusinessDays, input_name='NumberOfBusinessDays'), namespace_))
        if self.PackageReadyTime:
            self.PackageReadyTime.export(outfile, level, namespace_, name_='PackageReadyTime')
        if self.CustomerCloseTime:
            self.CustomerCloseTime.export(outfile, level, namespace_, name_='CustomerCloseTime')
        for Carriers_ in self.Carriers:
            showIndent(outfile, level)
            outfile.write('<%sCarriers>%s</%sCarriers>\n' % (namespace_, self.gds_format_string(quote_xml(Carriers_).encode(ExternalEncoding), input_name='Carriers'), namespace_))
        if self.ShipmentAttributes:
            self.ShipmentAttributes.export(outfile, level, namespace_, name_='ShipmentAttributes')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.AccountNumber is not None or
            self.PickupAddress is not None or
            self.PickupRequestType or
            self.DispatchDate is not None or
            self.NumberOfBusinessDays is not None or
            self.PackageReadyTime is not None or
            self.CustomerCloseTime is not None or
            self.Carriers or
            self.ShipmentAttributes is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PickupAvailabilityRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=model_.AssociatedAccount(\n')
            self.AccountNumber.exportLiteral(outfile, level, name_='AccountNumber')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PickupAddress is not None:
            showIndent(outfile, level)
            outfile.write('PickupAddress=model_.Address(\n')
            self.PickupAddress.exportLiteral(outfile, level, name_='PickupAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('PickupRequestType=[\n')
        level += 1
        for PickupRequestType_ in self.PickupRequestType:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(PickupRequestType_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.DispatchDate is not None:
            showIndent(outfile, level)
            outfile.write('DispatchDate=%s,\n' % quote_python(self.DispatchDate).encode(ExternalEncoding))
        if self.NumberOfBusinessDays is not None:
            showIndent(outfile, level)
            outfile.write('NumberOfBusinessDays=%d,\n' % self.NumberOfBusinessDays)
        if self.PackageReadyTime is not None:
            showIndent(outfile, level)
            outfile.write('PackageReadyTime=model_.xs_time(\n')
            self.PackageReadyTime.exportLiteral(outfile, level, name_='PackageReadyTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CustomerCloseTime is not None:
            showIndent(outfile, level)
            outfile.write('CustomerCloseTime=model_.xs_time(\n')
            self.CustomerCloseTime.exportLiteral(outfile, level, name_='CustomerCloseTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Carriers=[\n')
        level += 1
        for Carriers_ in self.Carriers:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Carriers_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ShipmentAttributes is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentAttributes=model_.PickupShipmentAttributes(\n')
            self.ShipmentAttributes.exportLiteral(outfile, level, name_='ShipmentAttributes')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'AccountNumber':
            obj_ = AssociatedAccount.factory()
            obj_.build(child_)
            self.set_AccountNumber(obj_)
        elif nodeName_ == 'PickupAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_PickupAddress(obj_)
        elif nodeName_ == 'PickupRequestType':
            PickupRequestType_ = child_.text
            PickupRequestType_ = self.gds_validate_string(PickupRequestType_, node, 'PickupRequestType')
            self.PickupRequestType.append(PickupRequestType_)
            self.validate_PickupRequestType(self.PickupRequestType)    # validate type PickupRequestType
        elif nodeName_ == 'DispatchDate':
            DispatchDate_ = child_.text
            DispatchDate_ = self.gds_validate_string(DispatchDate_, node, 'DispatchDate')
            self.DispatchDate = DispatchDate_
        elif nodeName_ == 'NumberOfBusinessDays':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberOfBusinessDays')
            self.NumberOfBusinessDays = ival_
        elif nodeName_ == 'PackageReadyTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_PackageReadyTime(obj_)
        elif nodeName_ == 'CustomerCloseTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_CustomerCloseTime(obj_)
        elif nodeName_ == 'Carriers':
            Carriers_ = child_.text
            Carriers_ = self.gds_validate_string(Carriers_, node, 'Carriers')
            self.Carriers.append(Carriers_)
            self.validate_CarrierCodeType(self.Carriers)    # validate type CarrierCodeType
        elif nodeName_ == 'ShipmentAttributes':
            obj_ = PickupShipmentAttributes.factory()
            obj_.build(child_)
            self.set_ShipmentAttributes(obj_)
# end class PickupAvailabilityRequest


class PickupOriginDetail(GeneratedsSuper):
    """Descriptive data about the origin of the shipment being picked up by
    FedEx."""
    subclass = None
    superclass = None
    def __init__(self, UseAccountAddress=None, AddressId=None, PickupLocation=None, PackageLocation=None, BuildingPart=None, BuildingPartDescription=None, ReadyTimestamp=None, CompanyCloseTime=None, StayLate=None, PickupDateType=None, LastAccessTime=None, GeographicalPostalCode=None, Location=None, DeleteLastUsed=None, SuppliesRequested=None, EarlyPickup=None):
        self.UseAccountAddress = UseAccountAddress
        self.AddressId = AddressId
        self.PickupLocation = PickupLocation
        self.PackageLocation = PackageLocation
        self.BuildingPart = BuildingPart
        self.BuildingPartDescription = BuildingPartDescription
        self.ReadyTimestamp = ReadyTimestamp
        self.CompanyCloseTime = CompanyCloseTime
        self.StayLate = StayLate
        self.PickupDateType = PickupDateType
        self.LastAccessTime = LastAccessTime
        self.GeographicalPostalCode = GeographicalPostalCode
        self.Location = Location
        self.DeleteLastUsed = DeleteLastUsed
        self.SuppliesRequested = SuppliesRequested
        self.EarlyPickup = EarlyPickup
    def factory(*args_, **kwargs_):
        if PickupOriginDetail.subclass:
            return PickupOriginDetail.subclass(*args_, **kwargs_)
        else:
            return PickupOriginDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UseAccountAddress(self): return self.UseAccountAddress
    def set_UseAccountAddress(self, UseAccountAddress): self.UseAccountAddress = UseAccountAddress
    def get_AddressId(self): return self.AddressId
    def set_AddressId(self, AddressId): self.AddressId = AddressId
    def get_PickupLocation(self): return self.PickupLocation
    def set_PickupLocation(self, PickupLocation): self.PickupLocation = PickupLocation
    def get_PackageLocation(self): return self.PackageLocation
    def set_PackageLocation(self, PackageLocation): self.PackageLocation = PackageLocation
    def validate_PickupBuildingLocationType(self, value):
        # Validate type PickupBuildingLocationType, a restriction on xs:string.
        pass
    def get_BuildingPart(self): return self.BuildingPart
    def set_BuildingPart(self, BuildingPart): self.BuildingPart = BuildingPart
    def validate_BuildingPartCode(self, value):
        # Validate type BuildingPartCode, a restriction on xs:string.
        pass
    def get_BuildingPartDescription(self): return self.BuildingPartDescription
    def set_BuildingPartDescription(self, BuildingPartDescription): self.BuildingPartDescription = BuildingPartDescription
    def get_ReadyTimestamp(self): return self.ReadyTimestamp
    def set_ReadyTimestamp(self, ReadyTimestamp): self.ReadyTimestamp = ReadyTimestamp
    def get_CompanyCloseTime(self): return self.CompanyCloseTime
    def set_CompanyCloseTime(self, CompanyCloseTime): self.CompanyCloseTime = CompanyCloseTime
    def get_StayLate(self): return self.StayLate
    def set_StayLate(self, StayLate): self.StayLate = StayLate
    def get_PickupDateType(self): return self.PickupDateType
    def set_PickupDateType(self, PickupDateType): self.PickupDateType = PickupDateType
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        pass
    def get_LastAccessTime(self): return self.LastAccessTime
    def set_LastAccessTime(self, LastAccessTime): self.LastAccessTime = LastAccessTime
    def get_GeographicalPostalCode(self): return self.GeographicalPostalCode
    def set_GeographicalPostalCode(self, GeographicalPostalCode): self.GeographicalPostalCode = GeographicalPostalCode
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_DeleteLastUsed(self): return self.DeleteLastUsed
    def set_DeleteLastUsed(self, DeleteLastUsed): self.DeleteLastUsed = DeleteLastUsed
    def get_SuppliesRequested(self): return self.SuppliesRequested
    def set_SuppliesRequested(self, SuppliesRequested): self.SuppliesRequested = SuppliesRequested
    def get_EarlyPickup(self): return self.EarlyPickup
    def set_EarlyPickup(self, EarlyPickup): self.EarlyPickup = EarlyPickup
    def export(self, outfile, level, namespace_='ns:', name_='PickupOriginDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupOriginDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupOriginDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupOriginDetail', fromsubclass_=False):
        if self.UseAccountAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sUseAccountAddress>%s</%sUseAccountAddress>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.UseAccountAddress)), input_name='UseAccountAddress'), namespace_))
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressId>%s</%sAddressId>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressId).encode(ExternalEncoding), input_name='AddressId'), namespace_))
        if self.PickupLocation:
            self.PickupLocation.export(outfile, level, namespace_, name_='PickupLocation')
        if self.PackageLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackageLocation>%s</%sPackageLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.PackageLocation).encode(ExternalEncoding), input_name='PackageLocation'), namespace_))
        if self.BuildingPart is not None:
            showIndent(outfile, level)
            outfile.write('<%sBuildingPart>%s</%sBuildingPart>\n' % (namespace_, self.gds_format_string(quote_xml(self.BuildingPart).encode(ExternalEncoding), input_name='BuildingPart'), namespace_))
        if self.BuildingPartDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sBuildingPartDescription>%s</%sBuildingPartDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.BuildingPartDescription).encode(ExternalEncoding), input_name='BuildingPartDescription'), namespace_))
        if self.ReadyTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sReadyTimestamp>%s</%sReadyTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReadyTimestamp).encode(ExternalEncoding), input_name='ReadyTimestamp'), namespace_))
        if self.CompanyCloseTime:
            self.CompanyCloseTime.export(outfile, level, namespace_, name_='CompanyCloseTime')
        if self.StayLate is not None:
            showIndent(outfile, level)
            outfile.write('<%sStayLate>%s</%sStayLate>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.StayLate)), input_name='StayLate'), namespace_))
        if self.PickupDateType is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickupDateType>%s</%sPickupDateType>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickupDateType).encode(ExternalEncoding), input_name='PickupDateType'), namespace_))
        if self.LastAccessTime:
            self.LastAccessTime.export(outfile, level, namespace_, name_='LastAccessTime')
        if self.GeographicalPostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sGeographicalPostalCode>%s</%sGeographicalPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.GeographicalPostalCode).encode(ExternalEncoding), input_name='GeographicalPostalCode'), namespace_))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocation>%s</%sLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.Location).encode(ExternalEncoding), input_name='Location'), namespace_))
        if self.DeleteLastUsed is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeleteLastUsed>%s</%sDeleteLastUsed>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.DeleteLastUsed)), input_name='DeleteLastUsed'), namespace_))
        if self.SuppliesRequested is not None:
            showIndent(outfile, level)
            outfile.write('<%sSuppliesRequested>%s</%sSuppliesRequested>\n' % (namespace_, self.gds_format_string(quote_xml(self.SuppliesRequested).encode(ExternalEncoding), input_name='SuppliesRequested'), namespace_))
        if self.EarlyPickup is not None:
            showIndent(outfile, level)
            outfile.write('<%sEarlyPickup>%s</%sEarlyPickup>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.EarlyPickup)), input_name='EarlyPickup'), namespace_))
    def hasContent_(self):
        if (
            self.UseAccountAddress is not None or
            self.AddressId is not None or
            self.PickupLocation is not None or
            self.PackageLocation is not None or
            self.BuildingPart is not None or
            self.BuildingPartDescription is not None or
            self.ReadyTimestamp is not None or
            self.CompanyCloseTime is not None or
            self.StayLate is not None or
            self.PickupDateType is not None or
            self.LastAccessTime is not None or
            self.GeographicalPostalCode is not None or
            self.Location is not None or
            self.DeleteLastUsed is not None or
            self.SuppliesRequested is not None or
            self.EarlyPickup is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PickupOriginDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UseAccountAddress is not None:
            showIndent(outfile, level)
            outfile.write('UseAccountAddress=%s,\n' % self.UseAccountAddress)
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('AddressId=%s,\n' % quote_python(self.AddressId).encode(ExternalEncoding))
        if self.PickupLocation is not None:
            showIndent(outfile, level)
            outfile.write('PickupLocation=model_.ContactAndAddress(\n')
            self.PickupLocation.exportLiteral(outfile, level, name_='PickupLocation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PackageLocation is not None:
            showIndent(outfile, level)
            outfile.write('PackageLocation=%s,\n' % quote_python(self.PackageLocation).encode(ExternalEncoding))
        if self.BuildingPart is not None:
            showIndent(outfile, level)
            outfile.write('BuildingPart=%s,\n' % quote_python(self.BuildingPart).encode(ExternalEncoding))
        if self.BuildingPartDescription is not None:
            showIndent(outfile, level)
            outfile.write('BuildingPartDescription=%s,\n' % quote_python(self.BuildingPartDescription).encode(ExternalEncoding))
        if self.ReadyTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('ReadyTimestamp=%s,\n' % quote_python(self.ReadyTimestamp).encode(ExternalEncoding))
        if self.CompanyCloseTime is not None:
            showIndent(outfile, level)
            outfile.write('CompanyCloseTime=model_.xs_time(\n')
            self.CompanyCloseTime.exportLiteral(outfile, level, name_='CompanyCloseTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.StayLate is not None:
            showIndent(outfile, level)
            outfile.write('StayLate=%s,\n' % self.StayLate)
        if self.PickupDateType is not None:
            showIndent(outfile, level)
            outfile.write('PickupDateType=%s,\n' % quote_python(self.PickupDateType).encode(ExternalEncoding))
        if self.LastAccessTime is not None:
            showIndent(outfile, level)
            outfile.write('LastAccessTime=model_.xs_time(\n')
            self.LastAccessTime.exportLiteral(outfile, level, name_='LastAccessTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.GeographicalPostalCode is not None:
            showIndent(outfile, level)
            outfile.write('GeographicalPostalCode=%s,\n' % quote_python(self.GeographicalPostalCode).encode(ExternalEncoding))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=%s,\n' % quote_python(self.Location).encode(ExternalEncoding))
        if self.DeleteLastUsed is not None:
            showIndent(outfile, level)
            outfile.write('DeleteLastUsed=%s,\n' % self.DeleteLastUsed)
        if self.SuppliesRequested is not None:
            showIndent(outfile, level)
            outfile.write('SuppliesRequested=%s,\n' % quote_python(self.SuppliesRequested).encode(ExternalEncoding))
        if self.EarlyPickup is not None:
            showIndent(outfile, level)
            outfile.write('EarlyPickup=%s,\n' % self.EarlyPickup)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UseAccountAddress':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'UseAccountAddress')
            self.UseAccountAddress = ival_
        elif nodeName_ == 'AddressId':
            AddressId_ = child_.text
            AddressId_ = self.gds_validate_string(AddressId_, node, 'AddressId')
            self.AddressId = AddressId_
        elif nodeName_ == 'PickupLocation':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_PickupLocation(obj_)
        elif nodeName_ == 'PackageLocation':
            PackageLocation_ = child_.text
            PackageLocation_ = self.gds_validate_string(PackageLocation_, node, 'PackageLocation')
            self.PackageLocation = PackageLocation_
            self.validate_PickupBuildingLocationType(self.PackageLocation)    # validate type PickupBuildingLocationType
        elif nodeName_ == 'BuildingPart':
            BuildingPart_ = child_.text
            BuildingPart_ = self.gds_validate_string(BuildingPart_, node, 'BuildingPart')
            self.BuildingPart = BuildingPart_
            self.validate_BuildingPartCode(self.BuildingPart)    # validate type BuildingPartCode
        elif nodeName_ == 'BuildingPartDescription':
            BuildingPartDescription_ = child_.text
            BuildingPartDescription_ = self.gds_validate_string(BuildingPartDescription_, node, 'BuildingPartDescription')
            self.BuildingPartDescription = BuildingPartDescription_
        elif nodeName_ == 'ReadyTimestamp':
            ReadyTimestamp_ = child_.text
            ReadyTimestamp_ = self.gds_validate_string(ReadyTimestamp_, node, 'ReadyTimestamp')
            self.ReadyTimestamp = ReadyTimestamp_
        elif nodeName_ == 'CompanyCloseTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_CompanyCloseTime(obj_)
        elif nodeName_ == 'StayLate':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'StayLate')
            self.StayLate = ival_
        elif nodeName_ == 'PickupDateType':
            PickupDateType_ = child_.text
            PickupDateType_ = self.gds_validate_string(PickupDateType_, node, 'PickupDateType')
            self.PickupDateType = PickupDateType_
            self.validate_PickupRequestType(self.PickupDateType)    # validate type PickupRequestType
        elif nodeName_ == 'LastAccessTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_LastAccessTime(obj_)
        elif nodeName_ == 'GeographicalPostalCode':
            GeographicalPostalCode_ = child_.text
            GeographicalPostalCode_ = self.gds_validate_string(GeographicalPostalCode_, node, 'GeographicalPostalCode')
            self.GeographicalPostalCode = GeographicalPostalCode_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'DeleteLastUsed':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DeleteLastUsed')
            self.DeleteLastUsed = ival_
        elif nodeName_ == 'SuppliesRequested':
            SuppliesRequested_ = child_.text
            SuppliesRequested_ = self.gds_validate_string(SuppliesRequested_, node, 'SuppliesRequested')
            self.SuppliesRequested = SuppliesRequested_
        elif nodeName_ == 'EarlyPickup':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'EarlyPickup')
            self.EarlyPickup = ival_
# end class PickupOriginDetail


class PickupScheduleOption(GeneratedsSuper):
    """The constraints on the scheduling of a dispatch, where that dispatch
    would be made by the Carrier, occur on the PickupDate, and would
    be scheduled (created by means of a CourierDispatchRequest) on a
    date related to the PickupDate as described by the "ScheduleDay"
    (SAME_DAY meaning that the creation would occur on the
    PickupDate, and FUTURE_DAY meaning that the creation would occur
    on a date prior to the PickupDate)."""
    subclass = None
    superclass = None
    def __init__(self, Carrier=None, Description=None, ScheduleDay=None, Available=None, PickupDate=None, CutOffTime=None, AccessTime=None, ResidentialAvailable=None, CountryRelationship=None):
        self.Carrier = Carrier
        self.Description = Description
        self.ScheduleDay = ScheduleDay
        self.Available = Available
        self.PickupDate = PickupDate
        self.CutOffTime = CutOffTime
        self.AccessTime = AccessTime
        self.ResidentialAvailable = ResidentialAvailable
        self.CountryRelationship = CountryRelationship
    def factory(*args_, **kwargs_):
        if PickupScheduleOption.subclass:
            return PickupScheduleOption.subclass(*args_, **kwargs_)
        else:
            return PickupScheduleOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_ScheduleDay(self): return self.ScheduleDay
    def set_ScheduleDay(self, ScheduleDay): self.ScheduleDay = ScheduleDay
    def validate_PickupRequestType(self, value):
        # Validate type PickupRequestType, a restriction on xs:string.
        pass
    def get_Available(self): return self.Available
    def set_Available(self, Available): self.Available = Available
    def get_PickupDate(self): return self.PickupDate
    def set_PickupDate(self, PickupDate): self.PickupDate = PickupDate
    def get_CutOffTime(self): return self.CutOffTime
    def set_CutOffTime(self, CutOffTime): self.CutOffTime = CutOffTime
    def get_AccessTime(self): return self.AccessTime
    def set_AccessTime(self, AccessTime): self.AccessTime = AccessTime
    def get_ResidentialAvailable(self): return self.ResidentialAvailable
    def set_ResidentialAvailable(self, ResidentialAvailable): self.ResidentialAvailable = ResidentialAvailable
    def get_CountryRelationship(self): return self.CountryRelationship
    def set_CountryRelationship(self, CountryRelationship): self.CountryRelationship = CountryRelationship
    def validate_CountryRelationshipType(self, value):
        # Validate type CountryRelationshipType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='PickupScheduleOption', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupScheduleOption')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupScheduleOption'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupScheduleOption', fromsubclass_=False):
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.gds_format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
        if self.ScheduleDay is not None:
            showIndent(outfile, level)
            outfile.write('<%sScheduleDay>%s</%sScheduleDay>\n' % (namespace_, self.gds_format_string(quote_xml(self.ScheduleDay).encode(ExternalEncoding), input_name='ScheduleDay'), namespace_))
        if self.Available is not None:
            showIndent(outfile, level)
            outfile.write('<%sAvailable>%s</%sAvailable>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Available)), input_name='Available'), namespace_))
        if self.PickupDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickupDate>%s</%sPickupDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickupDate).encode(ExternalEncoding), input_name='PickupDate'), namespace_))
        if self.CutOffTime:
            self.CutOffTime.export(outfile, level, namespace_, name_='CutOffTime')
        if self.AccessTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccessTime>%s</%sAccessTime>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccessTime).encode(ExternalEncoding), input_name='AccessTime'), namespace_))
        if self.ResidentialAvailable is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidentialAvailable>%s</%sResidentialAvailable>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ResidentialAvailable)), input_name='ResidentialAvailable'), namespace_))
        if self.CountryRelationship is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryRelationship>%s</%sCountryRelationship>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryRelationship).encode(ExternalEncoding), input_name='CountryRelationship'), namespace_))
    def hasContent_(self):
        if (
            self.Carrier is not None or
            self.Description is not None or
            self.ScheduleDay is not None or
            self.Available is not None or
            self.PickupDate is not None or
            self.CutOffTime is not None or
            self.AccessTime is not None or
            self.ResidentialAvailable is not None or
            self.CountryRelationship is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PickupScheduleOption'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
        if self.ScheduleDay is not None:
            showIndent(outfile, level)
            outfile.write('ScheduleDay=%s,\n' % quote_python(self.ScheduleDay).encode(ExternalEncoding))
        if self.Available is not None:
            showIndent(outfile, level)
            outfile.write('Available=%s,\n' % self.Available)
        if self.PickupDate is not None:
            showIndent(outfile, level)
            outfile.write('PickupDate=%s,\n' % quote_python(self.PickupDate).encode(ExternalEncoding))
        if self.CutOffTime is not None:
            showIndent(outfile, level)
            outfile.write('CutOffTime=model_.xs_time(\n')
            self.CutOffTime.exportLiteral(outfile, level, name_='CutOffTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AccessTime is not None:
            showIndent(outfile, level)
            outfile.write('AccessTime=%s,\n' % quote_python(self.AccessTime).encode(ExternalEncoding))
        if self.ResidentialAvailable is not None:
            showIndent(outfile, level)
            outfile.write('ResidentialAvailable=%s,\n' % self.ResidentialAvailable)
        if self.CountryRelationship is not None:
            showIndent(outfile, level)
            outfile.write('CountryRelationship=%s,\n' % quote_python(self.CountryRelationship).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Carrier':
            Carrier_ = child_.text
            Carrier_ = self.gds_validate_string(Carrier_, node, 'Carrier')
            self.Carrier = Carrier_
            self.validate_CarrierCodeType(self.Carrier)    # validate type CarrierCodeType
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'ScheduleDay':
            ScheduleDay_ = child_.text
            ScheduleDay_ = self.gds_validate_string(ScheduleDay_, node, 'ScheduleDay')
            self.ScheduleDay = ScheduleDay_
            self.validate_PickupRequestType(self.ScheduleDay)    # validate type PickupRequestType
        elif nodeName_ == 'Available':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Available')
            self.Available = ival_
        elif nodeName_ == 'PickupDate':
            PickupDate_ = child_.text
            PickupDate_ = self.gds_validate_string(PickupDate_, node, 'PickupDate')
            self.PickupDate = PickupDate_
        elif nodeName_ == 'CutOffTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_CutOffTime(obj_)
        elif nodeName_ == 'AccessTime':
            AccessTime_ = child_.text
            AccessTime_ = self.gds_validate_string(AccessTime_, node, 'AccessTime')
            self.AccessTime = AccessTime_
        elif nodeName_ == 'ResidentialAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ResidentialAvailable')
            self.ResidentialAvailable = ival_
        elif nodeName_ == 'CountryRelationship':
            CountryRelationship_ = child_.text
            CountryRelationship_ = self.gds_validate_string(CountryRelationship_, node, 'CountryRelationship')
            self.CountryRelationship = CountryRelationship_
            self.validate_CountryRelationshipType(self.CountryRelationship)    # validate type CountryRelationshipType
# end class PickupScheduleOption


class PickupShipmentAttributes(GeneratedsSuper):
    """Descriptive information about the shipment."""
    subclass = None
    superclass = None
    def __init__(self, ServiceType=None, PackagingType=None, Dimensions=None, Weight=None):
        self.ServiceType = ServiceType
        self.PackagingType = PackagingType
        self.Dimensions = Dimensions
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if PickupShipmentAttributes.subclass:
            return PickupShipmentAttributes.subclass(*args_, **kwargs_)
        else:
            return PickupShipmentAttributes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceType(self): return self.ServiceType
    def set_ServiceType(self, ServiceType): self.ServiceType = ServiceType
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def validate_PackagingType(self, value):
        # Validate type PackagingType, a restriction on xs:string.
        pass
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def export(self, outfile, level, namespace_='ns:', name_='PickupShipmentAttributes', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PickupShipmentAttributes')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PickupShipmentAttributes'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PickupShipmentAttributes', fromsubclass_=False):
        if self.ServiceType is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceType>%s</%sServiceType>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceType).encode(ExternalEncoding), input_name='ServiceType'), namespace_))
        if self.PackagingType is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackagingType>%s</%sPackagingType>\n' % (namespace_, self.gds_format_string(quote_xml(self.PackagingType).encode(ExternalEncoding), input_name='PackagingType'), namespace_))
        if self.Dimensions:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions')
        if self.Weight:
            self.Weight.export(outfile, level, namespace_, name_='Weight')
    def hasContent_(self):
        if (
            self.ServiceType is not None or
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.Weight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PickupShipmentAttributes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceType is not None:
            showIndent(outfile, level)
            outfile.write('ServiceType=%s,\n' % quote_python(self.ServiceType).encode(ExternalEncoding))
        if self.PackagingType is not None:
            showIndent(outfile, level)
            outfile.write('PackagingType=%s,\n' % quote_python(self.PackagingType).encode(ExternalEncoding))
        if self.Dimensions is not None:
            showIndent(outfile, level)
            outfile.write('Dimensions=model_.Dimensions(\n')
            self.Dimensions.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=model_.Weight(\n')
            self.Weight.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceType':
            ServiceType_ = child_.text
            ServiceType_ = self.gds_validate_string(ServiceType_, node, 'ServiceType')
            self.ServiceType = ServiceType_
            self.validate_ServiceType(self.ServiceType)    # validate type ServiceType
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
            self.validate_PackagingType(self.PackagingType)    # validate type PackagingType
        elif nodeName_ == 'Dimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.set_Dimensions(obj_)
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_Weight(obj_)
# end class PickupShipmentAttributes


class ReturnEMailDetail(GeneratedsSuper):
    """Return Email Details"""
    subclass = None
    superclass = None
    def __init__(self, MerchantPhoneNumber=None, AllowedSpecialServices=None):
        self.MerchantPhoneNumber = MerchantPhoneNumber
        if AllowedSpecialServices is None:
            self.AllowedSpecialServices = []
        else:
            self.AllowedSpecialServices = AllowedSpecialServices
    def factory(*args_, **kwargs_):
        if ReturnEMailDetail.subclass:
            return ReturnEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MerchantPhoneNumber(self): return self.MerchantPhoneNumber
    def set_MerchantPhoneNumber(self, MerchantPhoneNumber): self.MerchantPhoneNumber = MerchantPhoneNumber
    def get_AllowedSpecialServices(self): return self.AllowedSpecialServices
    def set_AllowedSpecialServices(self, AllowedSpecialServices): self.AllowedSpecialServices = AllowedSpecialServices
    def add_AllowedSpecialServices(self, value): self.AllowedSpecialServices.append(value)
    def insert_AllowedSpecialServices(self, index, value): self.AllowedSpecialServices[index] = value
    def validate_ReturnEMailAllowedSpecialServiceType(self, value):
        # Validate type ReturnEMailAllowedSpecialServiceType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='ReturnEMailDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnEMailDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReturnEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReturnEMailDetail', fromsubclass_=False):
        if self.MerchantPhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMerchantPhoneNumber>%s</%sMerchantPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MerchantPhoneNumber).encode(ExternalEncoding), input_name='MerchantPhoneNumber'), namespace_))
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            showIndent(outfile, level)
            outfile.write('<%sAllowedSpecialServices>%s</%sAllowedSpecialServices>\n' % (namespace_, self.gds_format_string(quote_xml(AllowedSpecialServices_).encode(ExternalEncoding), input_name='AllowedSpecialServices'), namespace_))
    def hasContent_(self):
        if (
            self.MerchantPhoneNumber is not None or
            self.AllowedSpecialServices
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReturnEMailDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MerchantPhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('MerchantPhoneNumber=%s,\n' % quote_python(self.MerchantPhoneNumber).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AllowedSpecialServices=[\n')
        level += 1
        for AllowedSpecialServices_ in self.AllowedSpecialServices:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AllowedSpecialServices_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MerchantPhoneNumber':
            MerchantPhoneNumber_ = child_.text
            MerchantPhoneNumber_ = self.gds_validate_string(MerchantPhoneNumber_, node, 'MerchantPhoneNumber')
            self.MerchantPhoneNumber = MerchantPhoneNumber_
        elif nodeName_ == 'AllowedSpecialServices':
            AllowedSpecialServices_ = child_.text
            AllowedSpecialServices_ = self.gds_validate_string(AllowedSpecialServices_, node, 'AllowedSpecialServices')
            self.AllowedSpecialServices.append(AllowedSpecialServices_)
            self.validate_ReturnEMailAllowedSpecialServiceType(self.AllowedSpecialServices)    # validate type ReturnEMailAllowedSpecialServiceType
# end class ReturnEMailDetail


class ReturnShipmentDetail(GeneratedsSuper):
    """Information relating to a return shipment."""
    subclass = None
    superclass = None
    def __init__(self, ReturnType=None, Rma=None, ReturnEMailDetail=None):
        self.ReturnType = ReturnType
        self.Rma = Rma
        self.ReturnEMailDetail = ReturnEMailDetail
    def factory(*args_, **kwargs_):
        if ReturnShipmentDetail.subclass:
            return ReturnShipmentDetail.subclass(*args_, **kwargs_)
        else:
            return ReturnShipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReturnType(self): return self.ReturnType
    def set_ReturnType(self, ReturnType): self.ReturnType = ReturnType
    def validate_ReturnType(self, value):
        # Validate type ReturnType, a restriction on xs:string.
        pass
    def get_Rma(self): return self.Rma
    def set_Rma(self, Rma): self.Rma = Rma
    def get_ReturnEMailDetail(self): return self.ReturnEMailDetail
    def set_ReturnEMailDetail(self, ReturnEMailDetail): self.ReturnEMailDetail = ReturnEMailDetail
    def export(self, outfile, level, namespace_='ns:', name_='ReturnShipmentDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReturnShipmentDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReturnShipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReturnShipmentDetail', fromsubclass_=False):
        if self.ReturnType is not None:
            showIndent(outfile, level)
            outfile.write('<%sReturnType>%s</%sReturnType>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReturnType).encode(ExternalEncoding), input_name='ReturnType'), namespace_))
        if self.Rma:
            self.Rma.export(outfile, level, namespace_, name_='Rma')
        if self.ReturnEMailDetail:
            self.ReturnEMailDetail.export(outfile, level, namespace_, name_='ReturnEMailDetail')
    def hasContent_(self):
        if (
            self.ReturnType is not None or
            self.Rma is not None or
            self.ReturnEMailDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReturnShipmentDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ReturnType is not None:
            showIndent(outfile, level)
            outfile.write('ReturnType=%s,\n' % quote_python(self.ReturnType).encode(ExternalEncoding))
        if self.Rma is not None:
            showIndent(outfile, level)
            outfile.write('Rma=model_.Rma(\n')
            self.Rma.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReturnEMailDetail is not None:
            showIndent(outfile, level)
            outfile.write('ReturnEMailDetail=model_.ReturnEMailDetail(\n')
            self.ReturnEMailDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ReturnType':
            ReturnType_ = child_.text
            ReturnType_ = self.gds_validate_string(ReturnType_, node, 'ReturnType')
            self.ReturnType = ReturnType_
            self.validate_ReturnType(self.ReturnType)    # validate type ReturnType
        elif nodeName_ == 'Rma':
            obj_ = Rma.factory()
            obj_.build(child_)
            self.set_Rma(obj_)
        elif nodeName_ == 'ReturnEMailDetail':
            obj_ = ReturnEMailDetail.factory()
            obj_.build(child_)
            self.set_ReturnEMailDetail(obj_)
# end class ReturnShipmentDetail


class Rma(GeneratedsSuper):
    """Return Merchant Authorization"""
    subclass = None
    superclass = None
    def __init__(self, Number=None, Reason=None):
        self.Number = Number
        self.Reason = Reason
    def factory(*args_, **kwargs_):
        if Rma.subclass:
            return Rma.subclass(*args_, **kwargs_)
        else:
            return Rma(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Reason(self): return self.Reason
    def set_Reason(self, Reason): self.Reason = Reason
    def export(self, outfile, level, namespace_='ns:', name_='Rma', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Rma')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Rma'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Rma', fromsubclass_=False):
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumber>%s</%sNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.Number).encode(ExternalEncoding), input_name='Number'), namespace_))
        if self.Reason is not None:
            showIndent(outfile, level)
            outfile.write('<%sReason>%s</%sReason>\n' % (namespace_, self.gds_format_string(quote_xml(self.Reason).encode(ExternalEncoding), input_name='Reason'), namespace_))
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Reason is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Rma'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('Number=%s,\n' % quote_python(self.Number).encode(ExternalEncoding))
        if self.Reason is not None:
            showIndent(outfile, level)
            outfile.write('Reason=%s,\n' % quote_python(self.Reason).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Reason':
            Reason_ = child_.text
            Reason_ = self.gds_validate_string(Reason_, node, 'Reason')
            self.Reason = Reason_
# end class Rma


class ShipmentAssemblyDetail(GeneratedsSuper):
    """Specification for assembly performed on shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None):
        self.PieceCount = PieceCount
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if ShipmentAssemblyDetail.subclass:
            return ShipmentAssemblyDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentAssemblyDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentAssemblyDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentAssemblyDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentAssemblyDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentAssemblyDetail', fromsubclass_=False):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPieceCount>%s</%sPieceCount>\n' % (namespace_, self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespace_))
        if self.Weight:
            self.Weight.export(outfile, level, namespace_, name_='Weight')
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipmentAssemblyDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('PieceCount=%d,\n' % self.PieceCount)
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=model_.Weight(\n')
            self.Weight.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_Weight(obj_)
# end class ShipmentAssemblyDetail


class ShipmentDryIceDetail(GeneratedsSuper):
    """Shipment-level totals of dry ice data across all packages."""
    subclass = None
    superclass = None
    def __init__(self, PackageCount=None, TotalWeight=None):
        self.PackageCount = PackageCount
        self.TotalWeight = TotalWeight
    def factory(*args_, **kwargs_):
        if ShipmentDryIceDetail.subclass:
            return ShipmentDryIceDetail.subclass(*args_, **kwargs_)
        else:
            return ShipmentDryIceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_TotalWeight(self): return self.TotalWeight
    def set_TotalWeight(self, TotalWeight): self.TotalWeight = TotalWeight
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentDryIceDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentDryIceDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentDryIceDetail', fromsubclass_=False):
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackageCount>%s</%sPackageCount>\n' % (namespace_, self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespace_))
        if self.TotalWeight:
            self.TotalWeight.export(outfile, level, namespace_, name_='TotalWeight')
    def hasContent_(self):
        if (
            self.PackageCount is not None or
            self.TotalWeight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipmentDryIceDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('PackageCount=%d,\n' % self.PackageCount)
        if self.TotalWeight is not None:
            showIndent(outfile, level)
            outfile.write('TotalWeight=model_.Weight(\n')
            self.TotalWeight.exportLiteral(outfile, level, name_='TotalWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'TotalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_TotalWeight(obj_)
# end class ShipmentDryIceDetail


class ShipmentSpecialServicesRequested(GeneratedsSuper):
    """These special services are available at the shipment level for some
    or all service types. If the shipper is requesting a special
    service which requires additional data (such as the COD amount),
    the shipment special service type must be present in the
    specialServiceTypes collection, and the supporting detail must
    be provided in the appropriate sub-object below."""
    subclass = None
    superclass = None
    def __init__(self, SpecialServiceTypes=None, CodDetail=None, HoldAtLocationDetail=None, EMailNotificationDetail=None, ReturnShipmentDetail=None, PendingShipmentDetail=None, InternationalControlledExportDetail=None, ShipmentDryIceDetail=None, HomeDeliveryPremiumDetail=None, FlatbedTrailerDetail=None, FreightGuaranteeDetail=None, EtdDetail=None, ExtraLaborDetail=None, PalletShrinkwrapDetail=None, PalletsProvidedDetail=None, DetentionDetail=None, MarkingOrTaggingDetail=None, NonBusinessTimeDetail=None, ShipmentAssemblyDetail=None, SortAndSegregateDetail=None, SpecialEquipmentDetail=None, StorageDetail=None, WeighingDetail=None, CustomDeliveryWindowDetail=None):
        if SpecialServiceTypes is None:
            self.SpecialServiceTypes = []
        else:
            self.SpecialServiceTypes = SpecialServiceTypes
        self.CodDetail = CodDetail
        self.HoldAtLocationDetail = HoldAtLocationDetail
        self.EMailNotificationDetail = EMailNotificationDetail
        self.ReturnShipmentDetail = ReturnShipmentDetail
        self.PendingShipmentDetail = PendingShipmentDetail
        self.InternationalControlledExportDetail = InternationalControlledExportDetail
        self.ShipmentDryIceDetail = ShipmentDryIceDetail
        self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
        self.FlatbedTrailerDetail = FlatbedTrailerDetail
        self.FreightGuaranteeDetail = FreightGuaranteeDetail
        self.EtdDetail = EtdDetail
        self.ExtraLaborDetail = ExtraLaborDetail
        self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
        self.PalletsProvidedDetail = PalletsProvidedDetail
        self.DetentionDetail = DetentionDetail
        self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
        self.NonBusinessTimeDetail = NonBusinessTimeDetail
        self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
        self.SortAndSegregateDetail = SortAndSegregateDetail
        self.SpecialEquipmentDetail = SpecialEquipmentDetail
        self.StorageDetail = StorageDetail
        self.WeighingDetail = WeighingDetail
        self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def factory(*args_, **kwargs_):
        if ShipmentSpecialServicesRequested.subclass:
            return ShipmentSpecialServicesRequested.subclass(*args_, **kwargs_)
        else:
            return ShipmentSpecialServicesRequested(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SpecialServiceTypes(self): return self.SpecialServiceTypes
    def set_SpecialServiceTypes(self, SpecialServiceTypes): self.SpecialServiceTypes = SpecialServiceTypes
    def add_SpecialServiceTypes(self, value): self.SpecialServiceTypes.append(value)
    def insert_SpecialServiceTypes(self, index, value): self.SpecialServiceTypes[index] = value
    def validate_ShipmentSpecialServiceType(self, value):
        # Validate type ShipmentSpecialServiceType, a restriction on xs:string.
        pass
    def get_CodDetail(self): return self.CodDetail
    def set_CodDetail(self, CodDetail): self.CodDetail = CodDetail
    def get_HoldAtLocationDetail(self): return self.HoldAtLocationDetail
    def set_HoldAtLocationDetail(self, HoldAtLocationDetail): self.HoldAtLocationDetail = HoldAtLocationDetail
    def get_EMailNotificationDetail(self): return self.EMailNotificationDetail
    def set_EMailNotificationDetail(self, EMailNotificationDetail): self.EMailNotificationDetail = EMailNotificationDetail
    def get_ReturnShipmentDetail(self): return self.ReturnShipmentDetail
    def set_ReturnShipmentDetail(self, ReturnShipmentDetail): self.ReturnShipmentDetail = ReturnShipmentDetail
    def get_PendingShipmentDetail(self): return self.PendingShipmentDetail
    def set_PendingShipmentDetail(self, PendingShipmentDetail): self.PendingShipmentDetail = PendingShipmentDetail
    def get_InternationalControlledExportDetail(self): return self.InternationalControlledExportDetail
    def set_InternationalControlledExportDetail(self, InternationalControlledExportDetail): self.InternationalControlledExportDetail = InternationalControlledExportDetail
    def get_ShipmentDryIceDetail(self): return self.ShipmentDryIceDetail
    def set_ShipmentDryIceDetail(self, ShipmentDryIceDetail): self.ShipmentDryIceDetail = ShipmentDryIceDetail
    def get_HomeDeliveryPremiumDetail(self): return self.HomeDeliveryPremiumDetail
    def set_HomeDeliveryPremiumDetail(self, HomeDeliveryPremiumDetail): self.HomeDeliveryPremiumDetail = HomeDeliveryPremiumDetail
    def get_FlatbedTrailerDetail(self): return self.FlatbedTrailerDetail
    def set_FlatbedTrailerDetail(self, FlatbedTrailerDetail): self.FlatbedTrailerDetail = FlatbedTrailerDetail
    def get_FreightGuaranteeDetail(self): return self.FreightGuaranteeDetail
    def set_FreightGuaranteeDetail(self, FreightGuaranteeDetail): self.FreightGuaranteeDetail = FreightGuaranteeDetail
    def get_EtdDetail(self): return self.EtdDetail
    def set_EtdDetail(self, EtdDetail): self.EtdDetail = EtdDetail
    def get_ExtraLaborDetail(self): return self.ExtraLaborDetail
    def set_ExtraLaborDetail(self, ExtraLaborDetail): self.ExtraLaborDetail = ExtraLaborDetail
    def get_PalletShrinkwrapDetail(self): return self.PalletShrinkwrapDetail
    def set_PalletShrinkwrapDetail(self, PalletShrinkwrapDetail): self.PalletShrinkwrapDetail = PalletShrinkwrapDetail
    def get_PalletsProvidedDetail(self): return self.PalletsProvidedDetail
    def set_PalletsProvidedDetail(self, PalletsProvidedDetail): self.PalletsProvidedDetail = PalletsProvidedDetail
    def get_DetentionDetail(self): return self.DetentionDetail
    def set_DetentionDetail(self, DetentionDetail): self.DetentionDetail = DetentionDetail
    def get_MarkingOrTaggingDetail(self): return self.MarkingOrTaggingDetail
    def set_MarkingOrTaggingDetail(self, MarkingOrTaggingDetail): self.MarkingOrTaggingDetail = MarkingOrTaggingDetail
    def get_NonBusinessTimeDetail(self): return self.NonBusinessTimeDetail
    def set_NonBusinessTimeDetail(self, NonBusinessTimeDetail): self.NonBusinessTimeDetail = NonBusinessTimeDetail
    def get_ShipmentAssemblyDetail(self): return self.ShipmentAssemblyDetail
    def set_ShipmentAssemblyDetail(self, ShipmentAssemblyDetail): self.ShipmentAssemblyDetail = ShipmentAssemblyDetail
    def get_SortAndSegregateDetail(self): return self.SortAndSegregateDetail
    def set_SortAndSegregateDetail(self, SortAndSegregateDetail): self.SortAndSegregateDetail = SortAndSegregateDetail
    def get_SpecialEquipmentDetail(self): return self.SpecialEquipmentDetail
    def set_SpecialEquipmentDetail(self, SpecialEquipmentDetail): self.SpecialEquipmentDetail = SpecialEquipmentDetail
    def get_StorageDetail(self): return self.StorageDetail
    def set_StorageDetail(self, StorageDetail): self.StorageDetail = StorageDetail
    def get_WeighingDetail(self): return self.WeighingDetail
    def set_WeighingDetail(self, WeighingDetail): self.WeighingDetail = WeighingDetail
    def get_CustomDeliveryWindowDetail(self): return self.CustomDeliveryWindowDetail
    def set_CustomDeliveryWindowDetail(self, CustomDeliveryWindowDetail): self.CustomDeliveryWindowDetail = CustomDeliveryWindowDetail
    def export(self, outfile, level, namespace_='ns:', name_='ShipmentSpecialServicesRequested', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentSpecialServicesRequested')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShipmentSpecialServicesRequested'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShipmentSpecialServicesRequested', fromsubclass_=False):
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            showIndent(outfile, level)
            outfile.write('<%sSpecialServiceTypes>%s</%sSpecialServiceTypes>\n' % (namespace_, self.gds_format_string(quote_xml(SpecialServiceTypes_).encode(ExternalEncoding), input_name='SpecialServiceTypes'), namespace_))
        if self.CodDetail:
            self.CodDetail.export(outfile, level, namespace_, name_='CodDetail')
        if self.HoldAtLocationDetail:
            self.HoldAtLocationDetail.export(outfile, level, namespace_, name_='HoldAtLocationDetail')
        if self.EMailNotificationDetail:
            self.EMailNotificationDetail.export(outfile, level, namespace_, name_='EMailNotificationDetail')
        if self.ReturnShipmentDetail:
            self.ReturnShipmentDetail.export(outfile, level, namespace_, name_='ReturnShipmentDetail')
        if self.PendingShipmentDetail:
            self.PendingShipmentDetail.export(outfile, level, namespace_, name_='PendingShipmentDetail')
        if self.InternationalControlledExportDetail:
            self.InternationalControlledExportDetail.export(outfile, level, namespace_, name_='InternationalControlledExportDetail')
        if self.ShipmentDryIceDetail:
            self.ShipmentDryIceDetail.export(outfile, level, namespace_, name_='ShipmentDryIceDetail')
        if self.HomeDeliveryPremiumDetail:
            self.HomeDeliveryPremiumDetail.export(outfile, level, namespace_, name_='HomeDeliveryPremiumDetail')
        if self.FlatbedTrailerDetail:
            self.FlatbedTrailerDetail.export(outfile, level, namespace_, name_='FlatbedTrailerDetail')
        if self.FreightGuaranteeDetail:
            self.FreightGuaranteeDetail.export(outfile, level, namespace_, name_='FreightGuaranteeDetail')
        if self.EtdDetail:
            self.EtdDetail.export(outfile, level, namespace_, name_='EtdDetail')
        if self.ExtraLaborDetail:
            self.ExtraLaborDetail.export(outfile, level, namespace_, name_='ExtraLaborDetail')
        if self.PalletShrinkwrapDetail:
            self.PalletShrinkwrapDetail.export(outfile, level, namespace_, name_='PalletShrinkwrapDetail')
        if self.PalletsProvidedDetail:
            self.PalletsProvidedDetail.export(outfile, level, namespace_, name_='PalletsProvidedDetail')
        if self.DetentionDetail:
            self.DetentionDetail.export(outfile, level, namespace_, name_='DetentionDetail')
        if self.MarkingOrTaggingDetail:
            self.MarkingOrTaggingDetail.export(outfile, level, namespace_, name_='MarkingOrTaggingDetail')
        if self.NonBusinessTimeDetail:
            self.NonBusinessTimeDetail.export(outfile, level, namespace_, name_='NonBusinessTimeDetail')
        if self.ShipmentAssemblyDetail:
            self.ShipmentAssemblyDetail.export(outfile, level, namespace_, name_='ShipmentAssemblyDetail')
        if self.SortAndSegregateDetail:
            self.SortAndSegregateDetail.export(outfile, level, namespace_, name_='SortAndSegregateDetail')
        if self.SpecialEquipmentDetail:
            self.SpecialEquipmentDetail.export(outfile, level, namespace_, name_='SpecialEquipmentDetail')
        if self.StorageDetail:
            self.StorageDetail.export(outfile, level, namespace_, name_='StorageDetail')
        if self.WeighingDetail:
            self.WeighingDetail.export(outfile, level, namespace_, name_='WeighingDetail')
        if self.CustomDeliveryWindowDetail:
            self.CustomDeliveryWindowDetail.export(outfile, level, namespace_, name_='CustomDeliveryWindowDetail')
    def hasContent_(self):
        if (
            self.SpecialServiceTypes or
            self.CodDetail is not None or
            self.HoldAtLocationDetail is not None or
            self.EMailNotificationDetail is not None or
            self.ReturnShipmentDetail is not None or
            self.PendingShipmentDetail is not None or
            self.InternationalControlledExportDetail is not None or
            self.ShipmentDryIceDetail is not None or
            self.HomeDeliveryPremiumDetail is not None or
            self.FlatbedTrailerDetail is not None or
            self.FreightGuaranteeDetail is not None or
            self.EtdDetail is not None or
            self.ExtraLaborDetail is not None or
            self.PalletShrinkwrapDetail is not None or
            self.PalletsProvidedDetail is not None or
            self.DetentionDetail is not None or
            self.MarkingOrTaggingDetail is not None or
            self.NonBusinessTimeDetail is not None or
            self.ShipmentAssemblyDetail is not None or
            self.SortAndSegregateDetail is not None or
            self.SpecialEquipmentDetail is not None or
            self.StorageDetail is not None or
            self.WeighingDetail is not None or
            self.CustomDeliveryWindowDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipmentSpecialServicesRequested'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SpecialServiceTypes=[\n')
        level += 1
        for SpecialServiceTypes_ in self.SpecialServiceTypes:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(SpecialServiceTypes_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CodDetail is not None:
            showIndent(outfile, level)
            outfile.write('CodDetail=model_.CodDetail(\n')
            self.CodDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HoldAtLocationDetail is not None:
            showIndent(outfile, level)
            outfile.write('HoldAtLocationDetail=model_.HoldAtLocationDetail(\n')
            self.HoldAtLocationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EMailNotificationDetail is not None:
            showIndent(outfile, level)
            outfile.write('EMailNotificationDetail=model_.EMailNotificationDetail(\n')
            self.EMailNotificationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReturnShipmentDetail is not None:
            showIndent(outfile, level)
            outfile.write('ReturnShipmentDetail=model_.ReturnShipmentDetail(\n')
            self.ReturnShipmentDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PendingShipmentDetail is not None:
            showIndent(outfile, level)
            outfile.write('PendingShipmentDetail=model_.PendingShipmentDetail(\n')
            self.PendingShipmentDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InternationalControlledExportDetail is not None:
            showIndent(outfile, level)
            outfile.write('InternationalControlledExportDetail=model_.InternationalControlledExportDetail(\n')
            self.InternationalControlledExportDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipmentDryIceDetail is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentDryIceDetail=model_.ShipmentDryIceDetail(\n')
            self.ShipmentDryIceDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HomeDeliveryPremiumDetail is not None:
            showIndent(outfile, level)
            outfile.write('HomeDeliveryPremiumDetail=model_.HomeDeliveryPremiumDetail(\n')
            self.HomeDeliveryPremiumDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FlatbedTrailerDetail is not None:
            showIndent(outfile, level)
            outfile.write('FlatbedTrailerDetail=model_.FlatbedTrailerDetail(\n')
            self.FlatbedTrailerDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FreightGuaranteeDetail is not None:
            showIndent(outfile, level)
            outfile.write('FreightGuaranteeDetail=model_.FreightGuaranteeDetail(\n')
            self.FreightGuaranteeDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EtdDetail is not None:
            showIndent(outfile, level)
            outfile.write('EtdDetail=model_.EtdDetail(\n')
            self.EtdDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExtraLaborDetail is not None:
            showIndent(outfile, level)
            outfile.write('ExtraLaborDetail=model_.ExtraLaborDetail(\n')
            self.ExtraLaborDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PalletShrinkwrapDetail is not None:
            showIndent(outfile, level)
            outfile.write('PalletShrinkwrapDetail=model_.PalletShrinkwrapDetail(\n')
            self.PalletShrinkwrapDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PalletsProvidedDetail is not None:
            showIndent(outfile, level)
            outfile.write('PalletsProvidedDetail=model_.PalletsProvidedDetail(\n')
            self.PalletsProvidedDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DetentionDetail is not None:
            showIndent(outfile, level)
            outfile.write('DetentionDetail=model_.DetentionDetail(\n')
            self.DetentionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MarkingOrTaggingDetail is not None:
            showIndent(outfile, level)
            outfile.write('MarkingOrTaggingDetail=model_.MarkingOrTaggingDetail(\n')
            self.MarkingOrTaggingDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.NonBusinessTimeDetail is not None:
            showIndent(outfile, level)
            outfile.write('NonBusinessTimeDetail=model_.NonBusinessTimeDetail(\n')
            self.NonBusinessTimeDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipmentAssemblyDetail is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentAssemblyDetail=model_.ShipmentAssemblyDetail(\n')
            self.ShipmentAssemblyDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SortAndSegregateDetail is not None:
            showIndent(outfile, level)
            outfile.write('SortAndSegregateDetail=model_.SortAndSegregateDetail(\n')
            self.SortAndSegregateDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SpecialEquipmentDetail is not None:
            showIndent(outfile, level)
            outfile.write('SpecialEquipmentDetail=model_.SpecialEquipmentDetail(\n')
            self.SpecialEquipmentDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.StorageDetail is not None:
            showIndent(outfile, level)
            outfile.write('StorageDetail=model_.StorageDetail(\n')
            self.StorageDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.WeighingDetail is not None:
            showIndent(outfile, level)
            outfile.write('WeighingDetail=model_.WeighingDetail(\n')
            self.WeighingDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CustomDeliveryWindowDetail is not None:
            showIndent(outfile, level)
            outfile.write('CustomDeliveryWindowDetail=model_.CustomDeliveryWindowDetail(\n')
            self.CustomDeliveryWindowDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SpecialServiceTypes':
            SpecialServiceTypes_ = child_.text
            SpecialServiceTypes_ = self.gds_validate_string(SpecialServiceTypes_, node, 'SpecialServiceTypes')
            self.SpecialServiceTypes.append(SpecialServiceTypes_)
            self.validate_ShipmentSpecialServiceType(self.SpecialServiceTypes)    # validate type ShipmentSpecialServiceType
        elif nodeName_ == 'CodDetail':
            obj_ = CodDetail.factory()
            obj_.build(child_)
            self.set_CodDetail(obj_)
        elif nodeName_ == 'HoldAtLocationDetail':
            obj_ = HoldAtLocationDetail.factory()
            obj_.build(child_)
            self.set_HoldAtLocationDetail(obj_)
        elif nodeName_ == 'EMailNotificationDetail':
            obj_ = EMailNotificationDetail.factory()
            obj_.build(child_)
            self.set_EMailNotificationDetail(obj_)
        elif nodeName_ == 'ReturnShipmentDetail':
            obj_ = ReturnShipmentDetail.factory()
            obj_.build(child_)
            self.set_ReturnShipmentDetail(obj_)
        elif nodeName_ == 'PendingShipmentDetail':
            obj_ = PendingShipmentDetail.factory()
            obj_.build(child_)
            self.set_PendingShipmentDetail(obj_)
        elif nodeName_ == 'InternationalControlledExportDetail':
            obj_ = InternationalControlledExportDetail.factory()
            obj_.build(child_)
            self.set_InternationalControlledExportDetail(obj_)
        elif nodeName_ == 'ShipmentDryIceDetail':
            obj_ = ShipmentDryIceDetail.factory()
            obj_.build(child_)
            self.set_ShipmentDryIceDetail(obj_)
        elif nodeName_ == 'HomeDeliveryPremiumDetail':
            obj_ = HomeDeliveryPremiumDetail.factory()
            obj_.build(child_)
            self.set_HomeDeliveryPremiumDetail(obj_)
        elif nodeName_ == 'FlatbedTrailerDetail':
            obj_ = FlatbedTrailerDetail.factory()
            obj_.build(child_)
            self.set_FlatbedTrailerDetail(obj_)
        elif nodeName_ == 'FreightGuaranteeDetail':
            obj_ = FreightGuaranteeDetail.factory()
            obj_.build(child_)
            self.set_FreightGuaranteeDetail(obj_)
        elif nodeName_ == 'EtdDetail':
            obj_ = EtdDetail.factory()
            obj_.build(child_)
            self.set_EtdDetail(obj_)
        elif nodeName_ == 'ExtraLaborDetail':
            obj_ = ExtraLaborDetail.factory()
            obj_.build(child_)
            self.set_ExtraLaborDetail(obj_)
        elif nodeName_ == 'PalletShrinkwrapDetail':
            obj_ = PalletShrinkwrapDetail.factory()
            obj_.build(child_)
            self.set_PalletShrinkwrapDetail(obj_)
        elif nodeName_ == 'PalletsProvidedDetail':
            obj_ = PalletsProvidedDetail.factory()
            obj_.build(child_)
            self.set_PalletsProvidedDetail(obj_)
        elif nodeName_ == 'DetentionDetail':
            obj_ = DetentionDetail.factory()
            obj_.build(child_)
            self.set_DetentionDetail(obj_)
        elif nodeName_ == 'MarkingOrTaggingDetail':
            obj_ = MarkingOrTaggingDetail.factory()
            obj_.build(child_)
            self.set_MarkingOrTaggingDetail(obj_)
        elif nodeName_ == 'NonBusinessTimeDetail':
            obj_ = NonBusinessTimeDetail.factory()
            obj_.build(child_)
            self.set_NonBusinessTimeDetail(obj_)
        elif nodeName_ == 'ShipmentAssemblyDetail':
            obj_ = ShipmentAssemblyDetail.factory()
            obj_.build(child_)
            self.set_ShipmentAssemblyDetail(obj_)
        elif nodeName_ == 'SortAndSegregateDetail':
            obj_ = SortAndSegregateDetail.factory()
            obj_.build(child_)
            self.set_SortAndSegregateDetail(obj_)
        elif nodeName_ == 'SpecialEquipmentDetail':
            obj_ = SpecialEquipmentDetail.factory()
            obj_.build(child_)
            self.set_SpecialEquipmentDetail(obj_)
        elif nodeName_ == 'StorageDetail':
            obj_ = StorageDetail.factory()
            obj_.build(child_)
            self.set_StorageDetail(obj_)
        elif nodeName_ == 'WeighingDetail':
            obj_ = WeighingDetail.factory()
            obj_.build(child_)
            self.set_WeighingDetail(obj_)
        elif nodeName_ == 'CustomDeliveryWindowDetail':
            obj_ = CustomDeliveryWindowDetail.factory()
            obj_.build(child_)
            self.set_CustomDeliveryWindowDetail(obj_)
# end class ShipmentSpecialServicesRequested


class SortAndSegregateDetail(GeneratedsSuper):
    """Specification for sorting and/or segregating performed on shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Weight=None):
        self.PieceCount = PieceCount
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if SortAndSegregateDetail.subclass:
            return SortAndSegregateDetail.subclass(*args_, **kwargs_)
        else:
            return SortAndSegregateDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def export(self, outfile, level, namespace_='ns:', name_='SortAndSegregateDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SortAndSegregateDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SortAndSegregateDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SortAndSegregateDetail', fromsubclass_=False):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPieceCount>%s</%sPieceCount>\n' % (namespace_, self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespace_))
        if self.Weight:
            self.Weight.export(outfile, level, namespace_, name_='Weight')
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Weight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SortAndSegregateDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('PieceCount=%d,\n' % self.PieceCount)
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=model_.Weight(\n')
            self.Weight.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Weight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_Weight(obj_)
# end class SortAndSegregateDetail


class SpecialEquipmentDetail(GeneratedsSuper):
    """Specification for special equipment used in loading/unloading
    shipment."""
    subclass = None
    superclass = None
    def __init__(self, LineItems=None):
        if LineItems is None:
            self.LineItems = []
        else:
            self.LineItems = LineItems
    def factory(*args_, **kwargs_):
        if SpecialEquipmentDetail.subclass:
            return SpecialEquipmentDetail.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineItems(self): return self.LineItems
    def set_LineItems(self, LineItems): self.LineItems = LineItems
    def add_LineItems(self, value): self.LineItems.append(value)
    def insert_LineItems(self, index, value): self.LineItems[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialEquipmentDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SpecialEquipmentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentDetail', fromsubclass_=False):
        for LineItems_ in self.LineItems:
            LineItems_.export(outfile, level, namespace_, name_='LineItems')
    def hasContent_(self):
        if (
            self.LineItems
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SpecialEquipmentDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('LineItems=[\n')
        level += 1
        for LineItems_ in self.LineItems:
            showIndent(outfile, level)
            outfile.write('model_.SpecialEquipmentLineItem(\n')
            LineItems_.exportLiteral(outfile, level, name_='SpecialEquipmentLineItem')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineItems':
            obj_ = SpecialEquipmentLineItem.factory()
            obj_.build(child_)
            self.LineItems.append(obj_)
# end class SpecialEquipmentDetail


class SpecialEquipmentLineItem(GeneratedsSuper):
    """Specifies the usage of a single type of special equipment while
    loading/unloading a shipment"""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Duration=None):
        self.Type = Type
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if SpecialEquipmentLineItem.subclass:
            return SpecialEquipmentLineItem.subclass(*args_, **kwargs_)
        else:
            return SpecialEquipmentLineItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_SpecialEquipmentType(self, value):
        # Validate type SpecialEquipmentType, a restriction on xs:string.
        pass
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def export(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentLineItem', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialEquipmentLineItem')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SpecialEquipmentLineItem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SpecialEquipmentLineItem', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuration>%s</%sDuration>\n' % (namespace_, self.gds_format_string(quote_xml(self.Duration).encode(ExternalEncoding), input_name='Duration'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Duration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SpecialEquipmentLineItem'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('Duration=%s,\n' % quote_python(self.Duration).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_SpecialEquipmentType(self.Type)    # validate type SpecialEquipmentType
        elif nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class SpecialEquipmentLineItem


class StorageDetail(GeneratedsSuper):
    """Specification for storage provided for shipment."""
    subclass = None
    superclass = None
    def __init__(self, Duration=None):
        self.Duration = Duration
    def factory(*args_, **kwargs_):
        if StorageDetail.subclass:
            return StorageDetail.subclass(*args_, **kwargs_)
        else:
            return StorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Duration(self): return self.Duration
    def set_Duration(self, Duration): self.Duration = Duration
    def export(self, outfile, level, namespace_='ns:', name_='StorageDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StorageDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='StorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='StorageDetail', fromsubclass_=False):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuration>%s</%sDuration>\n' % (namespace_, self.gds_format_string(quote_xml(self.Duration).encode(ExternalEncoding), input_name='Duration'), namespace_))
    def hasContent_(self):
        if (
            self.Duration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StorageDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Duration is not None:
            showIndent(outfile, level)
            outfile.write('Duration=%s,\n' % quote_python(self.Duration).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Duration':
            Duration_ = child_.text
            Duration_ = self.gds_validate_string(Duration_, node, 'Duration')
            self.Duration = Duration_
# end class StorageDetail


class TaxpayerIdentification(GeneratedsSuper):
    """The descriptive data for taxpayer identification information."""
    subclass = None
    superclass = None
    def __init__(self, TinType=None, Number=None, Usage=None):
        self.TinType = TinType
        self.Number = Number
        self.Usage = Usage
    def factory(*args_, **kwargs_):
        if TaxpayerIdentification.subclass:
            return TaxpayerIdentification.subclass(*args_, **kwargs_)
        else:
            return TaxpayerIdentification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TinType(self): return self.TinType
    def set_TinType(self, TinType): self.TinType = TinType
    def validate_TinType(self, value):
        # Validate type TinType, a restriction on xs:string.
        pass
    def get_Number(self): return self.Number
    def set_Number(self, Number): self.Number = Number
    def get_Usage(self): return self.Usage
    def set_Usage(self, Usage): self.Usage = Usage
    def export(self, outfile, level, namespace_='ns:', name_='TaxpayerIdentification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxpayerIdentification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TaxpayerIdentification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TaxpayerIdentification', fromsubclass_=False):
        if self.TinType is not None:
            showIndent(outfile, level)
            outfile.write('<%sTinType>%s</%sTinType>\n' % (namespace_, self.gds_format_string(quote_xml(self.TinType).encode(ExternalEncoding), input_name='TinType'), namespace_))
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('<%sNumber>%s</%sNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.Number).encode(ExternalEncoding), input_name='Number'), namespace_))
        if self.Usage is not None:
            showIndent(outfile, level)
            outfile.write('<%sUsage>%s</%sUsage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Usage).encode(ExternalEncoding), input_name='Usage'), namespace_))
    def hasContent_(self):
        if (
            self.TinType is not None or
            self.Number is not None or
            self.Usage is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TaxpayerIdentification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TinType is not None:
            showIndent(outfile, level)
            outfile.write('TinType=%s,\n' % quote_python(self.TinType).encode(ExternalEncoding))
        if self.Number is not None:
            showIndent(outfile, level)
            outfile.write('Number=%s,\n' % quote_python(self.Number).encode(ExternalEncoding))
        if self.Usage is not None:
            showIndent(outfile, level)
            outfile.write('Usage=%s,\n' % quote_python(self.Usage).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TinType':
            TinType_ = child_.text
            TinType_ = self.gds_validate_string(TinType_, node, 'TinType')
            self.TinType = TinType_
            self.validate_TinType(self.TinType)    # validate type TinType
        elif nodeName_ == 'Number':
            Number_ = child_.text
            Number_ = self.gds_validate_string(Number_, node, 'Number')
            self.Number = Number_
        elif nodeName_ == 'Usage':
            Usage_ = child_.text
            Usage_ = self.gds_validate_string(Usage_, node, 'Usage')
            self.Usage = Usage_
# end class TaxpayerIdentification


class TransactionDetail(GeneratedsSuper):
    """The descriptive data that governs data payload
    language/translations."""
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class UploadDocumentDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, DocumentProducer=None, DocumentType=None, FileName=None, DocumentContent=None):
        self.LineNumber = LineNumber
        self.CustomerReference = CustomerReference
        self.DocumentProducer = DocumentProducer
        self.DocumentType = DocumentType
        self.FileName = FileName
        self.DocumentContent = DocumentContent
    def factory(*args_, **kwargs_):
        if UploadDocumentDetail.subclass:
            return UploadDocumentDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineNumber(self): return self.LineNumber
    def set_LineNumber(self, LineNumber): self.LineNumber = LineNumber
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def get_DocumentProducer(self): return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer): self.DocumentProducer = DocumentProducer
    def validate_UploadDocumentProducerType(self, value):
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        pass
    def get_DocumentType(self): return self.DocumentType
    def set_DocumentType(self, DocumentType): self.DocumentType = DocumentType
    def validate_UploadDocumentType(self, value):
        # Validate type UploadDocumentType, a restriction on xs:string.
        pass
    def get_FileName(self): return self.FileName
    def set_FileName(self, FileName): self.FileName = FileName
    def get_DocumentContent(self): return self.DocumentContent
    def set_DocumentContent(self, DocumentContent): self.DocumentContent = DocumentContent
    def export(self, outfile, level, namespace_='ns:', name_='UploadDocumentDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UploadDocumentDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='UploadDocumentDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='UploadDocumentDetail', fromsubclass_=False):
        if self.LineNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sLineNumber>%s</%sLineNumber>\n' % (namespace_, self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespace_))
        if self.CustomerReference is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerReference).encode(ExternalEncoding), input_name='CustomerReference'), namespace_))
        if self.DocumentProducer is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentProducer).encode(ExternalEncoding), input_name='DocumentProducer'), namespace_))
        if self.DocumentType is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentType>%s</%sDocumentType>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentType).encode(ExternalEncoding), input_name='DocumentType'), namespace_))
        if self.FileName is not None:
            showIndent(outfile, level)
            outfile.write('<%sFileName>%s</%sFileName>\n' % (namespace_, self.gds_format_string(quote_xml(self.FileName).encode(ExternalEncoding), input_name='FileName'), namespace_))
        if self.DocumentContent:
            self.DocumentContent.export(outfile, level, namespace_, name_='DocumentContent')
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.FileName is not None or
            self.DocumentContent is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UploadDocumentDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LineNumber is not None:
            showIndent(outfile, level)
            outfile.write('LineNumber=%d,\n' % self.LineNumber)
        if self.CustomerReference is not None:
            showIndent(outfile, level)
            outfile.write('CustomerReference=%s,\n' % quote_python(self.CustomerReference).encode(ExternalEncoding))
        if self.DocumentProducer is not None:
            showIndent(outfile, level)
            outfile.write('DocumentProducer=%s,\n' % quote_python(self.DocumentProducer).encode(ExternalEncoding))
        if self.DocumentType is not None:
            showIndent(outfile, level)
            outfile.write('DocumentType=%s,\n' % quote_python(self.DocumentType).encode(ExternalEncoding))
        if self.FileName is not None:
            showIndent(outfile, level)
            outfile.write('FileName=%s,\n' % quote_python(self.FileName).encode(ExternalEncoding))
        if self.DocumentContent is not None:
            showIndent(outfile, level)
            outfile.write('DocumentContent=model_.xs_base64Binary(\n')
            self.DocumentContent.exportLiteral(outfile, level, name_='DocumentContent')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference = CustomerReference_
        elif nodeName_ == 'DocumentProducer':
            DocumentProducer_ = child_.text
            DocumentProducer_ = self.gds_validate_string(DocumentProducer_, node, 'DocumentProducer')
            self.DocumentProducer = DocumentProducer_
            self.validate_UploadDocumentProducerType(self.DocumentProducer)    # validate type UploadDocumentProducerType
        elif nodeName_ == 'DocumentType':
            DocumentType_ = child_.text
            DocumentType_ = self.gds_validate_string(DocumentType_, node, 'DocumentType')
            self.DocumentType = DocumentType_
            self.validate_UploadDocumentType(self.DocumentType)    # validate type UploadDocumentType
        elif nodeName_ == 'FileName':
            FileName_ = child_.text
            FileName_ = self.gds_validate_string(FileName_, node, 'FileName')
            self.FileName = FileName_
        elif nodeName_ == 'DocumentContent':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_DocumentContent(obj_)
# end class UploadDocumentDetail


class UploadDocumentReferenceDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, CustomerReference=None, DocumentProducer=None, DocumentType=None, DocumentId=None, DocumentIdProducer=None):
        self.LineNumber = LineNumber
        self.CustomerReference = CustomerReference
        self.DocumentProducer = DocumentProducer
        self.DocumentType = DocumentType
        self.DocumentId = DocumentId
        self.DocumentIdProducer = DocumentIdProducer
    def factory(*args_, **kwargs_):
        if UploadDocumentReferenceDetail.subclass:
            return UploadDocumentReferenceDetail.subclass(*args_, **kwargs_)
        else:
            return UploadDocumentReferenceDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LineNumber(self): return self.LineNumber
    def set_LineNumber(self, LineNumber): self.LineNumber = LineNumber
    def get_CustomerReference(self): return self.CustomerReference
    def set_CustomerReference(self, CustomerReference): self.CustomerReference = CustomerReference
    def get_DocumentProducer(self): return self.DocumentProducer
    def set_DocumentProducer(self, DocumentProducer): self.DocumentProducer = DocumentProducer
    def validate_UploadDocumentProducerType(self, value):
        # Validate type UploadDocumentProducerType, a restriction on xs:string.
        pass
    def get_DocumentType(self): return self.DocumentType
    def set_DocumentType(self, DocumentType): self.DocumentType = DocumentType
    def validate_UploadDocumentType(self, value):
        # Validate type UploadDocumentType, a restriction on xs:string.
        pass
    def get_DocumentId(self): return self.DocumentId
    def set_DocumentId(self, DocumentId): self.DocumentId = DocumentId
    def get_DocumentIdProducer(self): return self.DocumentIdProducer
    def set_DocumentIdProducer(self, DocumentIdProducer): self.DocumentIdProducer = DocumentIdProducer
    def validate_UploadDocumentIdProducer(self, value):
        # Validate type UploadDocumentIdProducer, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='UploadDocumentReferenceDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UploadDocumentReferenceDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='UploadDocumentReferenceDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='UploadDocumentReferenceDetail', fromsubclass_=False):
        if self.LineNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sLineNumber>%s</%sLineNumber>\n' % (namespace_, self.gds_format_integer(self.LineNumber, input_name='LineNumber'), namespace_))
        if self.CustomerReference is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerReference>%s</%sCustomerReference>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerReference).encode(ExternalEncoding), input_name='CustomerReference'), namespace_))
        if self.DocumentProducer is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentProducer>%s</%sDocumentProducer>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentProducer).encode(ExternalEncoding), input_name='DocumentProducer'), namespace_))
        if self.DocumentType is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentType>%s</%sDocumentType>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentType).encode(ExternalEncoding), input_name='DocumentType'), namespace_))
        if self.DocumentId is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentId>%s</%sDocumentId>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentId).encode(ExternalEncoding), input_name='DocumentId'), namespace_))
        if self.DocumentIdProducer is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentIdProducer>%s</%sDocumentIdProducer>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentIdProducer).encode(ExternalEncoding), input_name='DocumentIdProducer'), namespace_))
    def hasContent_(self):
        if (
            self.LineNumber is not None or
            self.CustomerReference is not None or
            self.DocumentProducer is not None or
            self.DocumentType is not None or
            self.DocumentId is not None or
            self.DocumentIdProducer is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UploadDocumentReferenceDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LineNumber is not None:
            showIndent(outfile, level)
            outfile.write('LineNumber=%d,\n' % self.LineNumber)
        if self.CustomerReference is not None:
            showIndent(outfile, level)
            outfile.write('CustomerReference=%s,\n' % quote_python(self.CustomerReference).encode(ExternalEncoding))
        if self.DocumentProducer is not None:
            showIndent(outfile, level)
            outfile.write('DocumentProducer=%s,\n' % quote_python(self.DocumentProducer).encode(ExternalEncoding))
        if self.DocumentType is not None:
            showIndent(outfile, level)
            outfile.write('DocumentType=%s,\n' % quote_python(self.DocumentType).encode(ExternalEncoding))
        if self.DocumentId is not None:
            showIndent(outfile, level)
            outfile.write('DocumentId=%s,\n' % quote_python(self.DocumentId).encode(ExternalEncoding))
        if self.DocumentIdProducer is not None:
            showIndent(outfile, level)
            outfile.write('DocumentIdProducer=%s,\n' % quote_python(self.DocumentIdProducer).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LineNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNumber')
            self.LineNumber = ival_
        elif nodeName_ == 'CustomerReference':
            CustomerReference_ = child_.text
            CustomerReference_ = self.gds_validate_string(CustomerReference_, node, 'CustomerReference')
            self.CustomerReference = CustomerReference_
        elif nodeName_ == 'DocumentProducer':
            DocumentProducer_ = child_.text
            DocumentProducer_ = self.gds_validate_string(DocumentProducer_, node, 'DocumentProducer')
            self.DocumentProducer = DocumentProducer_
            self.validate_UploadDocumentProducerType(self.DocumentProducer)    # validate type UploadDocumentProducerType
        elif nodeName_ == 'DocumentType':
            DocumentType_ = child_.text
            DocumentType_ = self.gds_validate_string(DocumentType_, node, 'DocumentType')
            self.DocumentType = DocumentType_
            self.validate_UploadDocumentType(self.DocumentType)    # validate type UploadDocumentType
        elif nodeName_ == 'DocumentId':
            DocumentId_ = child_.text
            DocumentId_ = self.gds_validate_string(DocumentId_, node, 'DocumentId')
            self.DocumentId = DocumentId_
        elif nodeName_ == 'DocumentIdProducer':
            DocumentIdProducer_ = child_.text
            DocumentIdProducer_ = self.gds_validate_string(DocumentIdProducer_, node, 'DocumentIdProducer')
            self.DocumentIdProducer = DocumentIdProducer_
            self.validate_UploadDocumentIdProducer(self.DocumentIdProducer)    # validate type UploadDocumentIdProducer
# end class UploadDocumentReferenceDetail


class WeighingDetail(GeneratedsSuper):
    """Specifies a single type of weighing performed on a shipment"""
    subclass = None
    superclass = None
    def __init__(self, Type=None):
        self.Type = Type
    def factory(*args_, **kwargs_):
        if WeighingDetail.subclass:
            return WeighingDetail.subclass(*args_, **kwargs_)
        else:
            return WeighingDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_WeighingScaleType(self, value):
        # Validate type WeighingScaleType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='WeighingDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeighingDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WeighingDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WeighingDetail', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WeighingDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_WeighingScaleType(self.Type)    # validate type WeighingScaleType
# end class WeighingDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None):
        self.Units = Units
        self.Value = Value
    def factory(*args_, **kwargs_):
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_WeightUnits(self, value):
        # Validate type WeightUnits, a restriction on xs:string.
        pass
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='Weight', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Weight', fromsubclass_=False):
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Weight'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_WeightUnits(self.Units)    # validate type WeightUnits
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'CancelPickupReply'
        rootClass = CancelPickupReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from pickup import *\n\n')
    sys.stdout.write('import pickup as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AssociatedAccount",
    "CancelPickupReply",
    "CancelPickupRequest",
    "ClientDetail",
    "CodAddTransportationChargesDetail",
    "CodDetail",
    "CompletedFreightPickupDetail",
    "CompletedFreightPickupLineItem",
    "Contact",
    "ContactAndAddress",
    "CreatePickupReply",
    "CreatePickupRequest",
    "CreditCard",
    "CreditCardTransactionDetail",
    "CreditFraudDetectionDetail",
    "CustomDeliveryWindowDetail",
    "DateRange",
    "DetentionDetail",
    "Dimensions",
    "Distance",
    "EMailLabelDetail",
    "EMailNotificationDetail",
    "EMailNotificationRecipient",
    "EtdDetail",
    "ExpressFreightPickupDetail",
    "ExtraLaborDetail",
    "FlatbedTrailerDetail",
    "FreightGuaranteeDetail",
    "FreightPickupDetail",
    "FreightPickupLineItem",
    "FreightServiceCenterDetail",
    "HoldAtLocationDetail",
    "HomeDeliveryPremiumDetail",
    "InternationalControlledExportDetail",
    "Localization",
    "MarkingOrTaggingDetail",
    "Money",
    "NonBusinessTimeDetail",
    "Notification",
    "NotificationParameter",
    "PalletShrinkwrapDetail",
    "PalletsProvidedDetail",
    "ParsedContact",
    "ParsedContactAndAddress",
    "ParsedPersonName",
    "Party",
    "Payment",
    "Payor",
    "PendingShipmentDetail",
    "PickupAvailabilityReply",
    "PickupAvailabilityRequest",
    "PickupOriginDetail",
    "PickupScheduleOption",
    "PickupShipmentAttributes",
    "ReturnEMailDetail",
    "ReturnShipmentDetail",
    "Rma",
    "ShipmentAssemblyDetail",
    "ShipmentDryIceDetail",
    "ShipmentSpecialServicesRequested",
    "SortAndSegregateDetail",
    "SpecialEquipmentDetail",
    "SpecialEquipmentLineItem",
    "StorageDetail",
    "TaxpayerIdentification",
    "TransactionDetail",
    "UploadDocumentDetail",
    "UploadDocumentReferenceDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "WeighingDetail",
    "Weight"
    ]
