#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Nov 28 15:43:00 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class FedExLocatorRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, BeginningRecordIndex=None, MaximumMatchCount=None, DistanceUnits=None, NearToPhoneNumber=None, NearToAddress=None, DropoffServicesDesired=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.BeginningRecordIndex = BeginningRecordIndex
        self.MaximumMatchCount = MaximumMatchCount
        self.DistanceUnits = DistanceUnits
        self.NearToPhoneNumber = NearToPhoneNumber
        self.NearToAddress = NearToAddress
        self.DropoffServicesDesired = DropoffServicesDesired
    def factory(*args_, **kwargs_):
        if FedExLocatorRequest.subclass:
            return FedExLocatorRequest.subclass(*args_, **kwargs_)
        else:
            return FedExLocatorRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_BeginningRecordIndex(self): return self.BeginningRecordIndex
    def set_BeginningRecordIndex(self, BeginningRecordIndex): self.BeginningRecordIndex = BeginningRecordIndex
    def get_MaximumMatchCount(self): return self.MaximumMatchCount
    def set_MaximumMatchCount(self, MaximumMatchCount): self.MaximumMatchCount = MaximumMatchCount
    def get_DistanceUnits(self): return self.DistanceUnits
    def set_DistanceUnits(self, DistanceUnits): self.DistanceUnits = DistanceUnits
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        pass
    def get_NearToPhoneNumber(self): return self.NearToPhoneNumber
    def set_NearToPhoneNumber(self, NearToPhoneNumber): self.NearToPhoneNumber = NearToPhoneNumber
    def get_NearToAddress(self): return self.NearToAddress
    def set_NearToAddress(self, NearToAddress): self.NearToAddress = NearToAddress
    def get_DropoffServicesDesired(self): return self.DropoffServicesDesired
    def set_DropoffServicesDesired(self, DropoffServicesDesired): self.DropoffServicesDesired = DropoffServicesDesired
    def export(self, outfile, level, namespace_='ns:', name_='FedExLocatorRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FedExLocatorRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FedExLocatorRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FedExLocatorRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.BeginningRecordIndex is not None:
            showIndent(outfile, level)
            outfile.write('<%sBeginningRecordIndex>%s</%sBeginningRecordIndex>\n' % (namespace_, self.gds_format_integer(self.BeginningRecordIndex, input_name='BeginningRecordIndex'), namespace_))
        if self.MaximumMatchCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sMaximumMatchCount>%s</%sMaximumMatchCount>\n' % (namespace_, self.gds_format_integer(self.MaximumMatchCount, input_name='MaximumMatchCount'), namespace_))
        if self.DistanceUnits is not None:
            showIndent(outfile, level)
            outfile.write('<%sDistanceUnits>%s</%sDistanceUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.DistanceUnits).encode(ExternalEncoding), input_name='DistanceUnits'), namespace_))
        if self.NearToPhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sNearToPhoneNumber>%s</%sNearToPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.NearToPhoneNumber).encode(ExternalEncoding), input_name='NearToPhoneNumber'), namespace_))
        if self.NearToAddress:
            self.NearToAddress.export(outfile, level, namespace_, name_='NearToAddress')
        if self.DropoffServicesDesired:
            self.DropoffServicesDesired.export(outfile, level, namespace_, name_='DropoffServicesDesired')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.BeginningRecordIndex is not None or
            self.MaximumMatchCount is not None or
            self.DistanceUnits is not None or
            self.NearToPhoneNumber is not None or
            self.NearToAddress is not None or
            self.DropoffServicesDesired is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FedExLocatorRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BeginningRecordIndex is not None:
            showIndent(outfile, level)
            outfile.write('BeginningRecordIndex=%d,\n' % self.BeginningRecordIndex)
        if self.MaximumMatchCount is not None:
            showIndent(outfile, level)
            outfile.write('MaximumMatchCount=%d,\n' % self.MaximumMatchCount)
        if self.DistanceUnits is not None:
            showIndent(outfile, level)
            outfile.write('DistanceUnits=%s,\n' % quote_python(self.DistanceUnits).encode(ExternalEncoding))
        if self.NearToPhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('NearToPhoneNumber=%s,\n' % quote_python(self.NearToPhoneNumber).encode(ExternalEncoding))
        if self.NearToAddress is not None:
            showIndent(outfile, level)
            outfile.write('NearToAddress=model_.Address(\n')
            self.NearToAddress.exportLiteral(outfile, level, name_='NearToAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DropoffServicesDesired is not None:
            showIndent(outfile, level)
            outfile.write('DropoffServicesDesired=model_.DropoffServicesDesired(\n')
            self.DropoffServicesDesired.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'BeginningRecordIndex':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'BeginningRecordIndex')
            self.BeginningRecordIndex = ival_
        elif nodeName_ == 'MaximumMatchCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'MaximumMatchCount')
            self.MaximumMatchCount = ival_
        elif nodeName_ == 'DistanceUnits':
            DistanceUnits_ = child_.text
            DistanceUnits_ = self.gds_validate_string(DistanceUnits_, node, 'DistanceUnits')
            self.DistanceUnits = DistanceUnits_
            self.validate_DistanceUnits(self.DistanceUnits)    # validate type DistanceUnits
        elif nodeName_ == 'NearToPhoneNumber':
            NearToPhoneNumber_ = child_.text
            NearToPhoneNumber_ = self.gds_validate_string(NearToPhoneNumber_, node, 'NearToPhoneNumber')
            self.NearToPhoneNumber = NearToPhoneNumber_
        elif nodeName_ == 'NearToAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_NearToAddress(obj_)
        elif nodeName_ == 'DropoffServicesDesired':
            obj_ = DropoffServicesDesired.factory()
            obj_.build(child_)
            self.set_DropoffServicesDesired(obj_)
# end class FedExLocatorRequest


class MaximumMatchCount(GeneratedsSuper):
    """The maximum number of locations to be returned. Maximum count
    allowed is 25. Defaults to 10."""
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MaximumMatchCount.subclass:
            return MaximumMatchCount.subclass(*args_, **kwargs_)
        else:
            return MaximumMatchCount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='ns:', name_='MaximumMatchCount', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaximumMatchCount')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='MaximumMatchCount'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='MaximumMatchCount', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MaximumMatchCount'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MaximumMatchCount


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class ClientDetail(GeneratedsSuper):
    """The descriptive data identifying the client submitting the
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class DropoffServicesDesired(GeneratedsSuper):
    """The descriptive data about the various drop off services."""
    subclass = None
    superclass = None
    def __init__(self, Express=None, Ground=None, FedExStaffed=None, FedExSelfService=None, FedExAuthorizedShippingCenter=None, LatestExpressDropoff=None, ExpressDropoffAfterTime=None, HoldAtLocation=None, GroundHoldAtLocation=None, DangerousGoods=None, SaturdayService=None, PackingSupplies=None, PackingServices=None, ReturnSystem=None, RedirectToHoldLocation=None, SearchSameStateOnly=None):
        self.Express = Express
        self.Ground = Ground
        self.FedExStaffed = FedExStaffed
        self.FedExSelfService = FedExSelfService
        self.FedExAuthorizedShippingCenter = FedExAuthorizedShippingCenter
        self.LatestExpressDropoff = LatestExpressDropoff
        self.ExpressDropoffAfterTime = ExpressDropoffAfterTime
        self.HoldAtLocation = HoldAtLocation
        self.GroundHoldAtLocation = GroundHoldAtLocation
        self.DangerousGoods = DangerousGoods
        self.SaturdayService = SaturdayService
        self.PackingSupplies = PackingSupplies
        self.PackingServices = PackingServices
        self.ReturnSystem = ReturnSystem
        self.RedirectToHoldLocation = RedirectToHoldLocation
        self.SearchSameStateOnly = SearchSameStateOnly
    def factory(*args_, **kwargs_):
        if DropoffServicesDesired.subclass:
            return DropoffServicesDesired.subclass(*args_, **kwargs_)
        else:
            return DropoffServicesDesired(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Express(self): return self.Express
    def set_Express(self, Express): self.Express = Express
    def get_Ground(self): return self.Ground
    def set_Ground(self, Ground): self.Ground = Ground
    def get_FedExStaffed(self): return self.FedExStaffed
    def set_FedExStaffed(self, FedExStaffed): self.FedExStaffed = FedExStaffed
    def get_FedExSelfService(self): return self.FedExSelfService
    def set_FedExSelfService(self, FedExSelfService): self.FedExSelfService = FedExSelfService
    def get_FedExAuthorizedShippingCenter(self): return self.FedExAuthorizedShippingCenter
    def set_FedExAuthorizedShippingCenter(self, FedExAuthorizedShippingCenter): self.FedExAuthorizedShippingCenter = FedExAuthorizedShippingCenter
    def get_LatestExpressDropoff(self): return self.LatestExpressDropoff
    def set_LatestExpressDropoff(self, LatestExpressDropoff): self.LatestExpressDropoff = LatestExpressDropoff
    def get_ExpressDropoffAfterTime(self): return self.ExpressDropoffAfterTime
    def set_ExpressDropoffAfterTime(self, ExpressDropoffAfterTime): self.ExpressDropoffAfterTime = ExpressDropoffAfterTime
    def get_HoldAtLocation(self): return self.HoldAtLocation
    def set_HoldAtLocation(self, HoldAtLocation): self.HoldAtLocation = HoldAtLocation
    def get_GroundHoldAtLocation(self): return self.GroundHoldAtLocation
    def set_GroundHoldAtLocation(self, GroundHoldAtLocation): self.GroundHoldAtLocation = GroundHoldAtLocation
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_SaturdayService(self): return self.SaturdayService
    def set_SaturdayService(self, SaturdayService): self.SaturdayService = SaturdayService
    def get_PackingSupplies(self): return self.PackingSupplies
    def set_PackingSupplies(self, PackingSupplies): self.PackingSupplies = PackingSupplies
    def get_PackingServices(self): return self.PackingServices
    def set_PackingServices(self, PackingServices): self.PackingServices = PackingServices
    def get_ReturnSystem(self): return self.ReturnSystem
    def set_ReturnSystem(self, ReturnSystem): self.ReturnSystem = ReturnSystem
    def get_RedirectToHoldLocation(self): return self.RedirectToHoldLocation
    def set_RedirectToHoldLocation(self, RedirectToHoldLocation): self.RedirectToHoldLocation = RedirectToHoldLocation
    def validate_RedirectToHoldLocationType(self, value):
        # Validate type RedirectToHoldLocationType, a restriction on xs:string.
        pass
    def get_SearchSameStateOnly(self): return self.SearchSameStateOnly
    def set_SearchSameStateOnly(self, SearchSameStateOnly): self.SearchSameStateOnly = SearchSameStateOnly
    def export(self, outfile, level, namespace_='ns:', name_='DropoffServicesDesired', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DropoffServicesDesired')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DropoffServicesDesired'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DropoffServicesDesired', fromsubclass_=False):
        if self.Express is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpress>%s</%sExpress>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Express)), input_name='Express'), namespace_))
        if self.Ground is not None:
            showIndent(outfile, level)
            outfile.write('<%sGround>%s</%sGround>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Ground)), input_name='Ground'), namespace_))
        if self.FedExStaffed is not None:
            showIndent(outfile, level)
            outfile.write('<%sFedExStaffed>%s</%sFedExStaffed>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.FedExStaffed)), input_name='FedExStaffed'), namespace_))
        if self.FedExSelfService is not None:
            showIndent(outfile, level)
            outfile.write('<%sFedExSelfService>%s</%sFedExSelfService>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.FedExSelfService)), input_name='FedExSelfService'), namespace_))
        if self.FedExAuthorizedShippingCenter is not None:
            showIndent(outfile, level)
            outfile.write('<%sFedExAuthorizedShippingCenter>%s</%sFedExAuthorizedShippingCenter>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.FedExAuthorizedShippingCenter)), input_name='FedExAuthorizedShippingCenter'), namespace_))
        if self.LatestExpressDropoff is not None:
            showIndent(outfile, level)
            outfile.write('<%sLatestExpressDropoff>%s</%sLatestExpressDropoff>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.LatestExpressDropoff)), input_name='LatestExpressDropoff'), namespace_))
        if self.ExpressDropoffAfterTime:
            self.ExpressDropoffAfterTime.export(outfile, level, namespace_, name_='ExpressDropoffAfterTime')
        if self.HoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sHoldAtLocation>%s</%sHoldAtLocation>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.HoldAtLocation)), input_name='HoldAtLocation'), namespace_))
        if self.GroundHoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sGroundHoldAtLocation>%s</%sGroundHoldAtLocation>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.GroundHoldAtLocation)), input_name='GroundHoldAtLocation'), namespace_))
        if self.DangerousGoods is not None:
            showIndent(outfile, level)
            outfile.write('<%sDangerousGoods>%s</%sDangerousGoods>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.DangerousGoods)), input_name='DangerousGoods'), namespace_))
        if self.SaturdayService is not None:
            showIndent(outfile, level)
            outfile.write('<%sSaturdayService>%s</%sSaturdayService>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.SaturdayService)), input_name='SaturdayService'), namespace_))
        if self.PackingSupplies is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackingSupplies>%s</%sPackingSupplies>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.PackingSupplies)), input_name='PackingSupplies'), namespace_))
        if self.PackingServices is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackingServices>%s</%sPackingServices>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.PackingServices)), input_name='PackingServices'), namespace_))
        if self.ReturnSystem is not None:
            showIndent(outfile, level)
            outfile.write('<%sReturnSystem>%s</%sReturnSystem>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ReturnSystem)), input_name='ReturnSystem'), namespace_))
        if self.RedirectToHoldLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sRedirectToHoldLocation>%s</%sRedirectToHoldLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.RedirectToHoldLocation).encode(ExternalEncoding), input_name='RedirectToHoldLocation'), namespace_))
        if self.SearchSameStateOnly is not None:
            showIndent(outfile, level)
            outfile.write('<%sSearchSameStateOnly>%s</%sSearchSameStateOnly>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.SearchSameStateOnly)), input_name='SearchSameStateOnly'), namespace_))
    def hasContent_(self):
        if (
            self.Express is not None or
            self.Ground is not None or
            self.FedExStaffed is not None or
            self.FedExSelfService is not None or
            self.FedExAuthorizedShippingCenter is not None or
            self.LatestExpressDropoff is not None or
            self.ExpressDropoffAfterTime is not None or
            self.HoldAtLocation is not None or
            self.GroundHoldAtLocation is not None or
            self.DangerousGoods is not None or
            self.SaturdayService is not None or
            self.PackingSupplies is not None or
            self.PackingServices is not None or
            self.ReturnSystem is not None or
            self.RedirectToHoldLocation is not None or
            self.SearchSameStateOnly is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DropoffServicesDesired'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Express is not None:
            showIndent(outfile, level)
            outfile.write('Express=%s,\n' % self.Express)
        if self.Ground is not None:
            showIndent(outfile, level)
            outfile.write('Ground=%s,\n' % self.Ground)
        if self.FedExStaffed is not None:
            showIndent(outfile, level)
            outfile.write('FedExStaffed=%s,\n' % self.FedExStaffed)
        if self.FedExSelfService is not None:
            showIndent(outfile, level)
            outfile.write('FedExSelfService=%s,\n' % self.FedExSelfService)
        if self.FedExAuthorizedShippingCenter is not None:
            showIndent(outfile, level)
            outfile.write('FedExAuthorizedShippingCenter=%s,\n' % self.FedExAuthorizedShippingCenter)
        if self.LatestExpressDropoff is not None:
            showIndent(outfile, level)
            outfile.write('LatestExpressDropoff=%s,\n' % self.LatestExpressDropoff)
        if self.ExpressDropoffAfterTime is not None:
            showIndent(outfile, level)
            outfile.write('ExpressDropoffAfterTime=model_.xs_time(\n')
            self.ExpressDropoffAfterTime.exportLiteral(outfile, level, name_='ExpressDropoffAfterTime')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('HoldAtLocation=%s,\n' % self.HoldAtLocation)
        if self.GroundHoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('GroundHoldAtLocation=%s,\n' % self.GroundHoldAtLocation)
        if self.DangerousGoods is not None:
            showIndent(outfile, level)
            outfile.write('DangerousGoods=%s,\n' % self.DangerousGoods)
        if self.SaturdayService is not None:
            showIndent(outfile, level)
            outfile.write('SaturdayService=%s,\n' % self.SaturdayService)
        if self.PackingSupplies is not None:
            showIndent(outfile, level)
            outfile.write('PackingSupplies=%s,\n' % self.PackingSupplies)
        if self.PackingServices is not None:
            showIndent(outfile, level)
            outfile.write('PackingServices=%s,\n' % self.PackingServices)
        if self.ReturnSystem is not None:
            showIndent(outfile, level)
            outfile.write('ReturnSystem=%s,\n' % self.ReturnSystem)
        if self.RedirectToHoldLocation is not None:
            showIndent(outfile, level)
            outfile.write('RedirectToHoldLocation=%s,\n' % quote_python(self.RedirectToHoldLocation).encode(ExternalEncoding))
        if self.SearchSameStateOnly is not None:
            showIndent(outfile, level)
            outfile.write('SearchSameStateOnly=%s,\n' % self.SearchSameStateOnly)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Express':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Express')
            self.Express = ival_
        elif nodeName_ == 'Ground':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Ground')
            self.Ground = ival_
        elif nodeName_ == 'FedExStaffed':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FedExStaffed')
            self.FedExStaffed = ival_
        elif nodeName_ == 'FedExSelfService':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FedExSelfService')
            self.FedExSelfService = ival_
        elif nodeName_ == 'FedExAuthorizedShippingCenter':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'FedExAuthorizedShippingCenter')
            self.FedExAuthorizedShippingCenter = ival_
        elif nodeName_ == 'LatestExpressDropoff':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'LatestExpressDropoff')
            self.LatestExpressDropoff = ival_
        elif nodeName_ == 'ExpressDropoffAfterTime':
            obj_ = xs_time.factory()
            obj_.build(child_)
            self.set_ExpressDropoffAfterTime(obj_)
        elif nodeName_ == 'HoldAtLocation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HoldAtLocation')
            self.HoldAtLocation = ival_
        elif nodeName_ == 'GroundHoldAtLocation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'GroundHoldAtLocation')
            self.GroundHoldAtLocation = ival_
        elif nodeName_ == 'DangerousGoods':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DangerousGoods')
            self.DangerousGoods = ival_
        elif nodeName_ == 'SaturdayService':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'SaturdayService')
            self.SaturdayService = ival_
        elif nodeName_ == 'PackingSupplies':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackingSupplies')
            self.PackingSupplies = ival_
        elif nodeName_ == 'PackingServices':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackingServices')
            self.PackingServices = ival_
        elif nodeName_ == 'ReturnSystem':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReturnSystem')
            self.ReturnSystem = ival_
        elif nodeName_ == 'RedirectToHoldLocation':
            RedirectToHoldLocation_ = child_.text
            RedirectToHoldLocation_ = self.gds_validate_string(RedirectToHoldLocation_, node, 'RedirectToHoldLocation')
            self.RedirectToHoldLocation = RedirectToHoldLocation_
            self.validate_RedirectToHoldLocationType(self.RedirectToHoldLocation)    # validate type RedirectToHoldLocationType
        elif nodeName_ == 'SearchSameStateOnly':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'SearchSameStateOnly')
            self.SearchSameStateOnly = ival_
# end class DropoffServicesDesired


class FedExLocatorReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DropoffLocations=None, AvailableRecordCount=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if DropoffLocations is None:
            self.DropoffLocations = []
        else:
            self.DropoffLocations = DropoffLocations
        self.AvailableRecordCount = AvailableRecordCount
    def factory(*args_, **kwargs_):
        if FedExLocatorReply.subclass:
            return FedExLocatorReply.subclass(*args_, **kwargs_)
        else:
            return FedExLocatorReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_DropoffLocations(self): return self.DropoffLocations
    def set_DropoffLocations(self, DropoffLocations): self.DropoffLocations = DropoffLocations
    def add_DropoffLocations(self, value): self.DropoffLocations.append(value)
    def insert_DropoffLocations(self, index, value): self.DropoffLocations[index] = value
    def get_AvailableRecordCount(self): return self.AvailableRecordCount
    def set_AvailableRecordCount(self, AvailableRecordCount): self.AvailableRecordCount = AvailableRecordCount
    def export(self, outfile, level, namespace_='ns:', name_='FedExLocatorReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FedExLocatorReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='FedExLocatorReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='FedExLocatorReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version')
        for DropoffLocations_ in self.DropoffLocations:
            DropoffLocations_.export(outfile, level, namespace_, name_='DropoffLocations')
        if self.AvailableRecordCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sAvailableRecordCount>%s</%sAvailableRecordCount>\n' % (namespace_, self.gds_format_integer(self.AvailableRecordCount, input_name='AvailableRecordCount'), namespace_))
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DropoffLocations or
            self.AvailableRecordCount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FedExLocatorReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DropoffLocations=[\n')
        level += 1
        for DropoffLocations_ in self.DropoffLocations:
            showIndent(outfile, level)
            outfile.write('model_.DropoffLocation(\n')
            DropoffLocations_.exportLiteral(outfile, level, name_='DropoffLocation')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.AvailableRecordCount is not None:
            showIndent(outfile, level)
            outfile.write('AvailableRecordCount=%d,\n' % self.AvailableRecordCount)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'DropoffLocations':
            obj_ = DropoffLocation.factory()
            obj_.build(child_)
            self.DropoffLocations.append(obj_)
        elif nodeName_ == 'AvailableRecordCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'AvailableRecordCount')
            self.AvailableRecordCount = ival_
# end class FedExLocatorReply


class Notification(GeneratedsSuper):
    """The descriptive data regarding the results of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class TransactionDetail(GeneratedsSuper):
    """The descriptive data that governs data payload
    language/translations."""
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class Localization(GeneratedsSuper):
    """The descriptive data for the local language and locale (i.e.
    country)."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


class DropoffLocation(GeneratedsSuper):
    """The descriptive data of locations matching the criteria provided in
    the drop of locator request. A maximum of ten different
    locations can be returned."""
    subclass = None
    superclass = None
    def __init__(self, BusinessName=None, BusinessId=None, BusinessDescription=None, BusinessAddress=None, Distance=None, ServiceProfile=None, RecordIndex=None):
        self.BusinessName = BusinessName
        self.BusinessId = BusinessId
        self.BusinessDescription = BusinessDescription
        self.BusinessAddress = BusinessAddress
        self.Distance = Distance
        self.ServiceProfile = ServiceProfile
        self.RecordIndex = RecordIndex
    def factory(*args_, **kwargs_):
        if DropoffLocation.subclass:
            return DropoffLocation.subclass(*args_, **kwargs_)
        else:
            return DropoffLocation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BusinessName(self): return self.BusinessName
    def set_BusinessName(self, BusinessName): self.BusinessName = BusinessName
    def get_BusinessId(self): return self.BusinessId
    def set_BusinessId(self, BusinessId): self.BusinessId = BusinessId
    def get_BusinessDescription(self): return self.BusinessDescription
    def set_BusinessDescription(self, BusinessDescription): self.BusinessDescription = BusinessDescription
    def get_BusinessAddress(self): return self.BusinessAddress
    def set_BusinessAddress(self, BusinessAddress): self.BusinessAddress = BusinessAddress
    def get_Distance(self): return self.Distance
    def set_Distance(self, Distance): self.Distance = Distance
    def get_ServiceProfile(self): return self.ServiceProfile
    def set_ServiceProfile(self, ServiceProfile): self.ServiceProfile = ServiceProfile
    def get_RecordIndex(self): return self.RecordIndex
    def set_RecordIndex(self, RecordIndex): self.RecordIndex = RecordIndex
    def export(self, outfile, level, namespace_='ns:', name_='DropoffLocation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DropoffLocation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DropoffLocation'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DropoffLocation', fromsubclass_=False):
        if self.BusinessName is not None:
            showIndent(outfile, level)
            outfile.write('<%sBusinessName>%s</%sBusinessName>\n' % (namespace_, self.gds_format_string(quote_xml(self.BusinessName).encode(ExternalEncoding), input_name='BusinessName'), namespace_))
        if self.BusinessId is not None:
            showIndent(outfile, level)
            outfile.write('<%sBusinessId>%s</%sBusinessId>\n' % (namespace_, self.gds_format_string(quote_xml(self.BusinessId).encode(ExternalEncoding), input_name='BusinessId'), namespace_))
        if self.BusinessDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sBusinessDescription>%s</%sBusinessDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.BusinessDescription).encode(ExternalEncoding), input_name='BusinessDescription'), namespace_))
        if self.BusinessAddress:
            self.BusinessAddress.export(outfile, level, namespace_, name_='BusinessAddress')
        if self.Distance:
            self.Distance.export(outfile, level, namespace_, name_='Distance')
        if self.ServiceProfile:
            self.ServiceProfile.export(outfile, level, namespace_, name_='ServiceProfile')
        if self.RecordIndex is not None:
            showIndent(outfile, level)
            outfile.write('<%sRecordIndex>%s</%sRecordIndex>\n' % (namespace_, self.gds_format_integer(self.RecordIndex, input_name='RecordIndex'), namespace_))
    def hasContent_(self):
        if (
            self.BusinessName is not None or
            self.BusinessId is not None or
            self.BusinessDescription is not None or
            self.BusinessAddress is not None or
            self.Distance is not None or
            self.ServiceProfile is not None or
            self.RecordIndex is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DropoffLocation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BusinessName is not None:
            showIndent(outfile, level)
            outfile.write('BusinessName=%s,\n' % quote_python(self.BusinessName).encode(ExternalEncoding))
        if self.BusinessId is not None:
            showIndent(outfile, level)
            outfile.write('BusinessId=%s,\n' % quote_python(self.BusinessId).encode(ExternalEncoding))
        if self.BusinessDescription is not None:
            showIndent(outfile, level)
            outfile.write('BusinessDescription=%s,\n' % quote_python(self.BusinessDescription).encode(ExternalEncoding))
        if self.BusinessAddress is not None:
            showIndent(outfile, level)
            outfile.write('BusinessAddress=model_.Address(\n')
            self.BusinessAddress.exportLiteral(outfile, level, name_='BusinessAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Distance is not None:
            showIndent(outfile, level)
            outfile.write('Distance=model_.Distance(\n')
            self.Distance.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ServiceProfile is not None:
            showIndent(outfile, level)
            outfile.write('ServiceProfile=model_.DropoffLocationProfile(\n')
            self.ServiceProfile.exportLiteral(outfile, level, name_='ServiceProfile')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RecordIndex is not None:
            showIndent(outfile, level)
            outfile.write('RecordIndex=%d,\n' % self.RecordIndex)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BusinessName':
            BusinessName_ = child_.text
            BusinessName_ = self.gds_validate_string(BusinessName_, node, 'BusinessName')
            self.BusinessName = BusinessName_
        elif nodeName_ == 'BusinessId':
            BusinessId_ = child_.text
            BusinessId_ = self.gds_validate_string(BusinessId_, node, 'BusinessId')
            self.BusinessId = BusinessId_
        elif nodeName_ == 'BusinessDescription':
            BusinessDescription_ = child_.text
            BusinessDescription_ = self.gds_validate_string(BusinessDescription_, node, 'BusinessDescription')
            self.BusinessDescription = BusinessDescription_
        elif nodeName_ == 'BusinessAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_BusinessAddress(obj_)
        elif nodeName_ == 'Distance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.set_Distance(obj_)
        elif nodeName_ == 'ServiceProfile':
            obj_ = DropoffLocationProfile.factory()
            obj_.build(child_)
            self.set_ServiceProfile(obj_)
        elif nodeName_ == 'RecordIndex':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'RecordIndex')
            self.RecordIndex = ival_
# end class DropoffLocation


class RecordIndex(GeneratedsSuper):
    """Of the Total locations available this is the individual location
    identifier."""
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if RecordIndex.subclass:
            return RecordIndex.subclass(*args_, **kwargs_)
        else:
            return RecordIndex(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='ns:', name_='RecordIndex', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RecordIndex')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='RecordIndex'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='RecordIndex', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RecordIndex'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RecordIndex


class Address(GeneratedsSuper):
    """The descriptive data for a physical location."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, Residential=None):
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.Residential = Residential
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False):
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('<%sStreetLines>%s</%sStreetLines>\n' % (namespace_, self.gds_format_string(quote_xml(StreetLines_).encode(ExternalEncoding), input_name='StreetLines'), namespace_))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('<%sCity>%s</%sCity>\n' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateOrProvinceCode).encode(ExternalEncoding), input_name='StateOrProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.UrbanizationCode).encode(ExternalEncoding), input_name='UrbanizationCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidential>%s</%sResidential>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Residential)), input_name='Residential'), namespace_))
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.Residential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('StreetLines=[\n')
        level += 1
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(StreetLines_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateOrProvinceCode=%s,\n' % quote_python(self.StateOrProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('UrbanizationCode=%s,\n' % quote_python(self.UrbanizationCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('Residential=%s,\n' % self.Residential)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
# end class Address


class Distance(GeneratedsSuper):
    """The descriptive data for distance."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.Value = Value
        self.Units = Units
    def factory(*args_, **kwargs_):
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Distance'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_DistanceUnits(self.Units)    # validate type DistanceUnits
# end class Distance


class DropoffLocationProfile(GeneratedsSuper):
    """The descriptive data about the various drop off services."""
    subclass = None
    superclass = None
    def __init__(self, ExpressService=None, GroundService=None, HoursWeekdays=None, HoursSaturdays=None, LastExpressDropoffTimeWeekdays=None, LastExpressDropoffTimeSaturdays=None, LastGroundDropoffTimeWeekdays=None, LastGroundDropoffTimeSaturdays=None, HoldAtLocation=None, GroundHoldAtLocation=None, DangerousGoods=None, PackagingSupplies=None, PackagingServices=None, ReturnSystem=None):
        self.ExpressService = ExpressService
        self.GroundService = GroundService
        self.HoursWeekdays = HoursWeekdays
        self.HoursSaturdays = HoursSaturdays
        self.LastExpressDropoffTimeWeekdays = LastExpressDropoffTimeWeekdays
        self.LastExpressDropoffTimeSaturdays = LastExpressDropoffTimeSaturdays
        self.LastGroundDropoffTimeWeekdays = LastGroundDropoffTimeWeekdays
        self.LastGroundDropoffTimeSaturdays = LastGroundDropoffTimeSaturdays
        self.HoldAtLocation = HoldAtLocation
        self.GroundHoldAtLocation = GroundHoldAtLocation
        self.DangerousGoods = DangerousGoods
        self.PackagingSupplies = PackagingSupplies
        self.PackagingServices = PackagingServices
        self.ReturnSystem = ReturnSystem
    def factory(*args_, **kwargs_):
        if DropoffLocationProfile.subclass:
            return DropoffLocationProfile.subclass(*args_, **kwargs_)
        else:
            return DropoffLocationProfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ExpressService(self): return self.ExpressService
    def set_ExpressService(self, ExpressService): self.ExpressService = ExpressService
    def get_GroundService(self): return self.GroundService
    def set_GroundService(self, GroundService): self.GroundService = GroundService
    def get_HoursWeekdays(self): return self.HoursWeekdays
    def set_HoursWeekdays(self, HoursWeekdays): self.HoursWeekdays = HoursWeekdays
    def get_HoursSaturdays(self): return self.HoursSaturdays
    def set_HoursSaturdays(self, HoursSaturdays): self.HoursSaturdays = HoursSaturdays
    def get_LastExpressDropoffTimeWeekdays(self): return self.LastExpressDropoffTimeWeekdays
    def set_LastExpressDropoffTimeWeekdays(self, LastExpressDropoffTimeWeekdays): self.LastExpressDropoffTimeWeekdays = LastExpressDropoffTimeWeekdays
    def get_LastExpressDropoffTimeSaturdays(self): return self.LastExpressDropoffTimeSaturdays
    def set_LastExpressDropoffTimeSaturdays(self, LastExpressDropoffTimeSaturdays): self.LastExpressDropoffTimeSaturdays = LastExpressDropoffTimeSaturdays
    def get_LastGroundDropoffTimeWeekdays(self): return self.LastGroundDropoffTimeWeekdays
    def set_LastGroundDropoffTimeWeekdays(self, LastGroundDropoffTimeWeekdays): self.LastGroundDropoffTimeWeekdays = LastGroundDropoffTimeWeekdays
    def get_LastGroundDropoffTimeSaturdays(self): return self.LastGroundDropoffTimeSaturdays
    def set_LastGroundDropoffTimeSaturdays(self, LastGroundDropoffTimeSaturdays): self.LastGroundDropoffTimeSaturdays = LastGroundDropoffTimeSaturdays
    def get_HoldAtLocation(self): return self.HoldAtLocation
    def set_HoldAtLocation(self, HoldAtLocation): self.HoldAtLocation = HoldAtLocation
    def get_GroundHoldAtLocation(self): return self.GroundHoldAtLocation
    def set_GroundHoldAtLocation(self, GroundHoldAtLocation): self.GroundHoldAtLocation = GroundHoldAtLocation
    def get_DangerousGoods(self): return self.DangerousGoods
    def set_DangerousGoods(self, DangerousGoods): self.DangerousGoods = DangerousGoods
    def get_PackagingSupplies(self): return self.PackagingSupplies
    def set_PackagingSupplies(self, PackagingSupplies): self.PackagingSupplies = PackagingSupplies
    def get_PackagingServices(self): return self.PackagingServices
    def set_PackagingServices(self, PackagingServices): self.PackagingServices = PackagingServices
    def get_ReturnSystem(self): return self.ReturnSystem
    def set_ReturnSystem(self, ReturnSystem): self.ReturnSystem = ReturnSystem
    def export(self, outfile, level, namespace_='ns:', name_='DropoffLocationProfile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DropoffLocationProfile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='DropoffLocationProfile'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='DropoffLocationProfile', fromsubclass_=False):
        if self.ExpressService is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpressService>%s</%sExpressService>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ExpressService)), input_name='ExpressService'), namespace_))
        if self.GroundService is not None:
            showIndent(outfile, level)
            outfile.write('<%sGroundService>%s</%sGroundService>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.GroundService)), input_name='GroundService'), namespace_))
        if self.HoursWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sHoursWeekdays>%s</%sHoursWeekdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.HoursWeekdays).encode(ExternalEncoding), input_name='HoursWeekdays'), namespace_))
        if self.HoursSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sHoursSaturdays>%s</%sHoursSaturdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.HoursSaturdays).encode(ExternalEncoding), input_name='HoursSaturdays'), namespace_))
        if self.LastExpressDropoffTimeWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sLastExpressDropoffTimeWeekdays>%s</%sLastExpressDropoffTimeWeekdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.LastExpressDropoffTimeWeekdays).encode(ExternalEncoding), input_name='LastExpressDropoffTimeWeekdays'), namespace_))
        if self.LastExpressDropoffTimeSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sLastExpressDropoffTimeSaturdays>%s</%sLastExpressDropoffTimeSaturdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.LastExpressDropoffTimeSaturdays).encode(ExternalEncoding), input_name='LastExpressDropoffTimeSaturdays'), namespace_))
        if self.LastGroundDropoffTimeWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sLastGroundDropoffTimeWeekdays>%s</%sLastGroundDropoffTimeWeekdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.LastGroundDropoffTimeWeekdays).encode(ExternalEncoding), input_name='LastGroundDropoffTimeWeekdays'), namespace_))
        if self.LastGroundDropoffTimeSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('<%sLastGroundDropoffTimeSaturdays>%s</%sLastGroundDropoffTimeSaturdays>\n' % (namespace_, self.gds_format_string(quote_xml(self.LastGroundDropoffTimeSaturdays).encode(ExternalEncoding), input_name='LastGroundDropoffTimeSaturdays'), namespace_))
        if self.HoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sHoldAtLocation>%s</%sHoldAtLocation>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.HoldAtLocation)), input_name='HoldAtLocation'), namespace_))
        if self.GroundHoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sGroundHoldAtLocation>%s</%sGroundHoldAtLocation>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.GroundHoldAtLocation)), input_name='GroundHoldAtLocation'), namespace_))
        if self.DangerousGoods is not None:
            showIndent(outfile, level)
            outfile.write('<%sDangerousGoods>%s</%sDangerousGoods>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.DangerousGoods)), input_name='DangerousGoods'), namespace_))
        if self.PackagingSupplies is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackagingSupplies>%s</%sPackagingSupplies>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.PackagingSupplies)), input_name='PackagingSupplies'), namespace_))
        if self.PackagingServices is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackagingServices>%s</%sPackagingServices>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.PackagingServices)), input_name='PackagingServices'), namespace_))
        if self.ReturnSystem is not None:
            showIndent(outfile, level)
            outfile.write('<%sReturnSystem>%s</%sReturnSystem>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ReturnSystem)), input_name='ReturnSystem'), namespace_))
    def hasContent_(self):
        if (
            self.ExpressService is not None or
            self.GroundService is not None or
            self.HoursWeekdays is not None or
            self.HoursSaturdays is not None or
            self.LastExpressDropoffTimeWeekdays is not None or
            self.LastExpressDropoffTimeSaturdays is not None or
            self.LastGroundDropoffTimeWeekdays is not None or
            self.LastGroundDropoffTimeSaturdays is not None or
            self.HoldAtLocation is not None or
            self.GroundHoldAtLocation is not None or
            self.DangerousGoods is not None or
            self.PackagingSupplies is not None or
            self.PackagingServices is not None or
            self.ReturnSystem is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DropoffLocationProfile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ExpressService is not None:
            showIndent(outfile, level)
            outfile.write('ExpressService=%s,\n' % self.ExpressService)
        if self.GroundService is not None:
            showIndent(outfile, level)
            outfile.write('GroundService=%s,\n' % self.GroundService)
        if self.HoursWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('HoursWeekdays=%s,\n' % quote_python(self.HoursWeekdays).encode(ExternalEncoding))
        if self.HoursSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('HoursSaturdays=%s,\n' % quote_python(self.HoursSaturdays).encode(ExternalEncoding))
        if self.LastExpressDropoffTimeWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('LastExpressDropoffTimeWeekdays=%s,\n' % quote_python(self.LastExpressDropoffTimeWeekdays).encode(ExternalEncoding))
        if self.LastExpressDropoffTimeSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('LastExpressDropoffTimeSaturdays=%s,\n' % quote_python(self.LastExpressDropoffTimeSaturdays).encode(ExternalEncoding))
        if self.LastGroundDropoffTimeWeekdays is not None:
            showIndent(outfile, level)
            outfile.write('LastGroundDropoffTimeWeekdays=%s,\n' % quote_python(self.LastGroundDropoffTimeWeekdays).encode(ExternalEncoding))
        if self.LastGroundDropoffTimeSaturdays is not None:
            showIndent(outfile, level)
            outfile.write('LastGroundDropoffTimeSaturdays=%s,\n' % quote_python(self.LastGroundDropoffTimeSaturdays).encode(ExternalEncoding))
        if self.HoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('HoldAtLocation=%s,\n' % self.HoldAtLocation)
        if self.GroundHoldAtLocation is not None:
            showIndent(outfile, level)
            outfile.write('GroundHoldAtLocation=%s,\n' % self.GroundHoldAtLocation)
        if self.DangerousGoods is not None:
            showIndent(outfile, level)
            outfile.write('DangerousGoods=%s,\n' % self.DangerousGoods)
        if self.PackagingSupplies is not None:
            showIndent(outfile, level)
            outfile.write('PackagingSupplies=%s,\n' % self.PackagingSupplies)
        if self.PackagingServices is not None:
            showIndent(outfile, level)
            outfile.write('PackagingServices=%s,\n' % self.PackagingServices)
        if self.ReturnSystem is not None:
            showIndent(outfile, level)
            outfile.write('ReturnSystem=%s,\n' % self.ReturnSystem)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ExpressService':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ExpressService')
            self.ExpressService = ival_
        elif nodeName_ == 'GroundService':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'GroundService')
            self.GroundService = ival_
        elif nodeName_ == 'HoursWeekdays':
            HoursWeekdays_ = child_.text
            HoursWeekdays_ = self.gds_validate_string(HoursWeekdays_, node, 'HoursWeekdays')
            self.HoursWeekdays = HoursWeekdays_
        elif nodeName_ == 'HoursSaturdays':
            HoursSaturdays_ = child_.text
            HoursSaturdays_ = self.gds_validate_string(HoursSaturdays_, node, 'HoursSaturdays')
            self.HoursSaturdays = HoursSaturdays_
        elif nodeName_ == 'LastExpressDropoffTimeWeekdays':
            LastExpressDropoffTimeWeekdays_ = child_.text
            LastExpressDropoffTimeWeekdays_ = self.gds_validate_string(LastExpressDropoffTimeWeekdays_, node, 'LastExpressDropoffTimeWeekdays')
            self.LastExpressDropoffTimeWeekdays = LastExpressDropoffTimeWeekdays_
        elif nodeName_ == 'LastExpressDropoffTimeSaturdays':
            LastExpressDropoffTimeSaturdays_ = child_.text
            LastExpressDropoffTimeSaturdays_ = self.gds_validate_string(LastExpressDropoffTimeSaturdays_, node, 'LastExpressDropoffTimeSaturdays')
            self.LastExpressDropoffTimeSaturdays = LastExpressDropoffTimeSaturdays_
        elif nodeName_ == 'LastGroundDropoffTimeWeekdays':
            LastGroundDropoffTimeWeekdays_ = child_.text
            LastGroundDropoffTimeWeekdays_ = self.gds_validate_string(LastGroundDropoffTimeWeekdays_, node, 'LastGroundDropoffTimeWeekdays')
            self.LastGroundDropoffTimeWeekdays = LastGroundDropoffTimeWeekdays_
        elif nodeName_ == 'LastGroundDropoffTimeSaturdays':
            LastGroundDropoffTimeSaturdays_ = child_.text
            LastGroundDropoffTimeSaturdays_ = self.gds_validate_string(LastGroundDropoffTimeSaturdays_, node, 'LastGroundDropoffTimeSaturdays')
            self.LastGroundDropoffTimeSaturdays = LastGroundDropoffTimeSaturdays_
        elif nodeName_ == 'HoldAtLocation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'HoldAtLocation')
            self.HoldAtLocation = ival_
        elif nodeName_ == 'GroundHoldAtLocation':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'GroundHoldAtLocation')
            self.GroundHoldAtLocation = ival_
        elif nodeName_ == 'DangerousGoods':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DangerousGoods')
            self.DangerousGoods = ival_
        elif nodeName_ == 'PackagingSupplies':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackagingSupplies')
            self.PackagingSupplies = ival_
        elif nodeName_ == 'PackagingServices':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'PackagingServices')
            self.PackagingServices = ival_
        elif nodeName_ == 'ReturnSystem':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReturnSystem')
            self.ReturnSystem = ival_
# end class DropoffLocationProfile


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FedExLocatorRequest'
        rootClass = FedExLocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FedExLocatorRequest'
        rootClass = FedExLocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="FedExLocatorRequest",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FedExLocatorRequest'
        rootClass = FedExLocatorRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from locate import *\n\n')
    sys.stdout.write('import locate as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ClientDetail",
    "Distance",
    "DropoffLocation",
    "DropoffLocationProfile",
    "DropoffServicesDesired",
    "FedExLocatorReply",
    "FedExLocatorRequest",
    "Localization",
    "MaximumMatchCount",
    "Notification",
    "NotificationParameter",
    "RecordIndex",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail"
    ]
