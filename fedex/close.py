#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Nov 28 15:41:34 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, IntegratorId=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.IntegratorId = IntegratorId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>\n' % (namespace_, self.gds_format_string(quote_xml(self.IntegratorId).encode(ExternalEncoding), input_name='IntegratorId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.IntegratorId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('IntegratorId=%s,\n' % quote_python(self.IntegratorId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class CloseDocument(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, ShippingCycle=None, ShippingDocumentDisposition=None, AccessReference=None, Resolution=None, CopiesToPrint=None, Parts=None):
        self.Type = Type
        self.ShippingCycle = ShippingCycle
        self.ShippingDocumentDisposition = ShippingDocumentDisposition
        self.AccessReference = AccessReference
        self.Resolution = Resolution
        self.CopiesToPrint = CopiesToPrint
        if Parts is None:
            self.Parts = []
        else:
            self.Parts = Parts
    def factory(*args_, **kwargs_):
        if CloseDocument.subclass:
            return CloseDocument.subclass(*args_, **kwargs_)
        else:
            return CloseDocument(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_CloseDocumentType(self, value):
        # Validate type CloseDocumentType, a restriction on xs:string.
        pass
    def get_ShippingCycle(self): return self.ShippingCycle
    def set_ShippingCycle(self, ShippingCycle): self.ShippingCycle = ShippingCycle
    def get_ShippingDocumentDisposition(self): return self.ShippingDocumentDisposition
    def set_ShippingDocumentDisposition(self, ShippingDocumentDisposition): self.ShippingDocumentDisposition = ShippingDocumentDisposition
    def validate_ShippingDocumentDispositionType(self, value):
        # Validate type ShippingDocumentDispositionType, a restriction on xs:string.
        pass
    def get_AccessReference(self): return self.AccessReference
    def set_AccessReference(self, AccessReference): self.AccessReference = AccessReference
    def get_Resolution(self): return self.Resolution
    def set_Resolution(self, Resolution): self.Resolution = Resolution
    def get_CopiesToPrint(self): return self.CopiesToPrint
    def set_CopiesToPrint(self, CopiesToPrint): self.CopiesToPrint = CopiesToPrint
    def get_Parts(self): return self.Parts
    def set_Parts(self, Parts): self.Parts = Parts
    def add_Parts(self, value): self.Parts.append(value)
    def insert_Parts(self, index, value): self.Parts[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='CloseDocument', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CloseDocument')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CloseDocument'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CloseDocument', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.ShippingCycle is not None:
            showIndent(outfile, level)
            outfile.write('<%sShippingCycle>%s</%sShippingCycle>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShippingCycle).encode(ExternalEncoding), input_name='ShippingCycle'), namespace_))
        if self.ShippingDocumentDisposition is not None:
            showIndent(outfile, level)
            outfile.write('<%sShippingDocumentDisposition>%s</%sShippingDocumentDisposition>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShippingDocumentDisposition).encode(ExternalEncoding), input_name='ShippingDocumentDisposition'), namespace_))
        if self.AccessReference is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccessReference>%s</%sAccessReference>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccessReference).encode(ExternalEncoding), input_name='AccessReference'), namespace_))
        if self.Resolution is not None:
            showIndent(outfile, level)
            outfile.write('<%sResolution>%s</%sResolution>\n' % (namespace_, self.gds_format_integer(self.Resolution, input_name='Resolution'), namespace_))
        if self.CopiesToPrint is not None:
            showIndent(outfile, level)
            outfile.write('<%sCopiesToPrint>%s</%sCopiesToPrint>\n' % (namespace_, self.gds_format_integer(self.CopiesToPrint, input_name='CopiesToPrint'), namespace_))
        for Parts_ in self.Parts:
            Parts_.export(outfile, level, namespace_, name_='Parts')
    def hasContent_(self):
        if (
            self.Type is not None or
            self.ShippingCycle is not None or
            self.ShippingDocumentDisposition is not None or
            self.AccessReference is not None or
            self.Resolution is not None or
            self.CopiesToPrint is not None or
            self.Parts
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CloseDocument'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.ShippingCycle is not None:
            showIndent(outfile, level)
            outfile.write('ShippingCycle=%s,\n' % quote_python(self.ShippingCycle).encode(ExternalEncoding))
        if self.ShippingDocumentDisposition is not None:
            showIndent(outfile, level)
            outfile.write('ShippingDocumentDisposition=%s,\n' % quote_python(self.ShippingDocumentDisposition).encode(ExternalEncoding))
        if self.AccessReference is not None:
            showIndent(outfile, level)
            outfile.write('AccessReference=%s,\n' % quote_python(self.AccessReference).encode(ExternalEncoding))
        if self.Resolution is not None:
            showIndent(outfile, level)
            outfile.write('Resolution=%d,\n' % self.Resolution)
        if self.CopiesToPrint is not None:
            showIndent(outfile, level)
            outfile.write('CopiesToPrint=%d,\n' % self.CopiesToPrint)
        showIndent(outfile, level)
        outfile.write('Parts=[\n')
        level += 1
        for Parts_ in self.Parts:
            showIndent(outfile, level)
            outfile.write('model_.ShippingDocumentPart(\n')
            Parts_.exportLiteral(outfile, level, name_='ShippingDocumentPart')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_CloseDocumentType(self.Type)    # validate type CloseDocumentType
        elif nodeName_ == 'ShippingCycle':
            ShippingCycle_ = child_.text
            ShippingCycle_ = self.gds_validate_string(ShippingCycle_, node, 'ShippingCycle')
            self.ShippingCycle = ShippingCycle_
        elif nodeName_ == 'ShippingDocumentDisposition':
            ShippingDocumentDisposition_ = child_.text
            ShippingDocumentDisposition_ = self.gds_validate_string(ShippingDocumentDisposition_, node, 'ShippingDocumentDisposition')
            self.ShippingDocumentDisposition = ShippingDocumentDisposition_
            self.validate_ShippingDocumentDispositionType(self.ShippingDocumentDisposition)    # validate type ShippingDocumentDispositionType
        elif nodeName_ == 'AccessReference':
            AccessReference_ = child_.text
            AccessReference_ = self.gds_validate_string(AccessReference_, node, 'AccessReference')
            self.AccessReference = AccessReference_
        elif nodeName_ == 'Resolution':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Resolution')
            self.Resolution = ival_
        elif nodeName_ == 'CopiesToPrint':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'CopiesToPrint')
            self.CopiesToPrint = ival_
        elif nodeName_ == 'Parts':
            obj_ = ShippingDocumentPart.factory()
            obj_.build(child_)
            self.Parts.append(obj_)
# end class CloseDocument


class CloseDocumentFormat(GeneratedsSuper):
    """Specifies characteristics of a shipping document to be produced."""
    subclass = None
    superclass = None
    def __init__(self, Dispositions=None, TopOfPageOffset=None, ImageType=None, StockType=None, ProvideInstructions=None, Localization=None):
        if Dispositions is None:
            self.Dispositions = []
        else:
            self.Dispositions = Dispositions
        self.TopOfPageOffset = TopOfPageOffset
        self.ImageType = ImageType
        self.StockType = StockType
        self.ProvideInstructions = ProvideInstructions
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if CloseDocumentFormat.subclass:
            return CloseDocumentFormat.subclass(*args_, **kwargs_)
        else:
            return CloseDocumentFormat(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dispositions(self): return self.Dispositions
    def set_Dispositions(self, Dispositions): self.Dispositions = Dispositions
    def add_Dispositions(self, value): self.Dispositions.append(value)
    def insert_Dispositions(self, index, value): self.Dispositions[index] = value
    def get_TopOfPageOffset(self): return self.TopOfPageOffset
    def set_TopOfPageOffset(self, TopOfPageOffset): self.TopOfPageOffset = TopOfPageOffset
    def get_ImageType(self): return self.ImageType
    def set_ImageType(self, ImageType): self.ImageType = ImageType
    def validate_ShippingDocumentImageType(self, value):
        # Validate type ShippingDocumentImageType, a restriction on xs:string.
        pass
    def get_StockType(self): return self.StockType
    def set_StockType(self, StockType): self.StockType = StockType
    def validate_ShippingDocumentStockType(self, value):
        # Validate type ShippingDocumentStockType, a restriction on xs:string.
        pass
    def get_ProvideInstructions(self): return self.ProvideInstructions
    def set_ProvideInstructions(self, ProvideInstructions): self.ProvideInstructions = ProvideInstructions
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='CloseDocumentFormat', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CloseDocumentFormat')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CloseDocumentFormat'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CloseDocumentFormat', fromsubclass_=False):
        for Dispositions_ in self.Dispositions:
            Dispositions_.export(outfile, level, namespace_, name_='Dispositions')
        if self.TopOfPageOffset:
            self.TopOfPageOffset.export(outfile, level, namespace_, name_='TopOfPageOffset')
        if self.ImageType is not None:
            showIndent(outfile, level)
            outfile.write('<%sImageType>%s</%sImageType>\n' % (namespace_, self.gds_format_string(quote_xml(self.ImageType).encode(ExternalEncoding), input_name='ImageType'), namespace_))
        if self.StockType is not None:
            showIndent(outfile, level)
            outfile.write('<%sStockType>%s</%sStockType>\n' % (namespace_, self.gds_format_string(quote_xml(self.StockType).encode(ExternalEncoding), input_name='StockType'), namespace_))
        if self.ProvideInstructions is not None:
            showIndent(outfile, level)
            outfile.write('<%sProvideInstructions>%s</%sProvideInstructions>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ProvideInstructions)), input_name='ProvideInstructions'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.Dispositions or
            self.TopOfPageOffset is not None or
            self.ImageType is not None or
            self.StockType is not None or
            self.ProvideInstructions is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CloseDocumentFormat'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Dispositions=[\n')
        level += 1
        for Dispositions_ in self.Dispositions:
            showIndent(outfile, level)
            outfile.write('model_.ShippingDocumentDispositionDetail(\n')
            Dispositions_.exportLiteral(outfile, level, name_='ShippingDocumentDispositionDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TopOfPageOffset is not None:
            showIndent(outfile, level)
            outfile.write('TopOfPageOffset=model_.LinearMeasure(\n')
            self.TopOfPageOffset.exportLiteral(outfile, level, name_='TopOfPageOffset')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ImageType is not None:
            showIndent(outfile, level)
            outfile.write('ImageType=%s,\n' % quote_python(self.ImageType).encode(ExternalEncoding))
        if self.StockType is not None:
            showIndent(outfile, level)
            outfile.write('StockType=%s,\n' % quote_python(self.StockType).encode(ExternalEncoding))
        if self.ProvideInstructions is not None:
            showIndent(outfile, level)
            outfile.write('ProvideInstructions=%s,\n' % self.ProvideInstructions)
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dispositions':
            obj_ = ShippingDocumentDispositionDetail.factory()
            obj_.build(child_)
            self.Dispositions.append(obj_)
        elif nodeName_ == 'TopOfPageOffset':
            obj_ = LinearMeasure.factory()
            obj_.build(child_)
            self.set_TopOfPageOffset(obj_)
        elif nodeName_ == 'ImageType':
            ImageType_ = child_.text
            ImageType_ = self.gds_validate_string(ImageType_, node, 'ImageType')
            self.ImageType = ImageType_
            self.validate_ShippingDocumentImageType(self.ImageType)    # validate type ShippingDocumentImageType
        elif nodeName_ == 'StockType':
            StockType_ = child_.text
            StockType_ = self.gds_validate_string(StockType_, node, 'StockType')
            self.StockType = StockType_
            self.validate_ShippingDocumentStockType(self.StockType)    # validate type ShippingDocumentStockType
        elif nodeName_ == 'ProvideInstructions':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ProvideInstructions')
            self.ProvideInstructions = ival_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class CloseDocumentFormat


class CloseDocumentSpecification(GeneratedsSuper):
    """Contains all data required for close-time documents to be produced
    in conjunction with a specific set of shipments. For January
    2010, there are no applicable options for the COD report, the
    Manifest, or the Multiweight Report (they will only be available
    in TEXT format). Detail specifications will be added for those
    report types when customer-selectable options are implemented."""
    subclass = None
    superclass = None
    def __init__(self, CloseDocumentTypes=None, Op950Detail=None):
        if CloseDocumentTypes is None:
            self.CloseDocumentTypes = []
        else:
            self.CloseDocumentTypes = CloseDocumentTypes
        self.Op950Detail = Op950Detail
    def factory(*args_, **kwargs_):
        if CloseDocumentSpecification.subclass:
            return CloseDocumentSpecification.subclass(*args_, **kwargs_)
        else:
            return CloseDocumentSpecification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CloseDocumentTypes(self): return self.CloseDocumentTypes
    def set_CloseDocumentTypes(self, CloseDocumentTypes): self.CloseDocumentTypes = CloseDocumentTypes
    def add_CloseDocumentTypes(self, value): self.CloseDocumentTypes.append(value)
    def insert_CloseDocumentTypes(self, index, value): self.CloseDocumentTypes[index] = value
    def validate_CloseDocumentType(self, value):
        # Validate type CloseDocumentType, a restriction on xs:string.
        pass
    def get_Op950Detail(self): return self.Op950Detail
    def set_Op950Detail(self, Op950Detail): self.Op950Detail = Op950Detail
    def export(self, outfile, level, namespace_='ns:', name_='CloseDocumentSpecification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CloseDocumentSpecification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CloseDocumentSpecification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CloseDocumentSpecification', fromsubclass_=False):
        for CloseDocumentTypes_ in self.CloseDocumentTypes:
            showIndent(outfile, level)
            outfile.write('<%sCloseDocumentTypes>%s</%sCloseDocumentTypes>\n' % (namespace_, self.gds_format_string(quote_xml(CloseDocumentTypes_).encode(ExternalEncoding), input_name='CloseDocumentTypes'), namespace_))
        if self.Op950Detail:
            self.Op950Detail.export(outfile, level, namespace_, name_='Op950Detail')
    def hasContent_(self):
        if (
            self.CloseDocumentTypes or
            self.Op950Detail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CloseDocumentSpecification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CloseDocumentTypes=[\n')
        level += 1
        for CloseDocumentTypes_ in self.CloseDocumentTypes:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(CloseDocumentTypes_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Op950Detail is not None:
            showIndent(outfile, level)
            outfile.write('Op950Detail=model_.Op950Detail(\n')
            self.Op950Detail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CloseDocumentTypes':
            CloseDocumentTypes_ = child_.text
            CloseDocumentTypes_ = self.gds_validate_string(CloseDocumentTypes_, node, 'CloseDocumentTypes')
            self.CloseDocumentTypes.append(CloseDocumentTypes_)
            self.validate_CloseDocumentType(self.CloseDocumentTypes)    # validate type CloseDocumentType
        elif nodeName_ == 'Op950Detail':
            obj_ = Op950Detail.factory()
            obj_.build(child_)
            self.set_Op950Detail(obj_)
# end class CloseDocumentSpecification


class CustomerImageUsage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, InternalId=None, InternalImageType=None):
        self.Type = Type
        self.Id = Id
        self.InternalId = InternalId
        self.InternalImageType = InternalImageType
    def factory(*args_, **kwargs_):
        if CustomerImageUsage.subclass:
            return CustomerImageUsage.subclass(*args_, **kwargs_)
        else:
            return CustomerImageUsage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_CustomerImageUsageType(self, value):
        # Validate type CustomerImageUsageType, a restriction on xs:string.
        pass
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def validate_ImageId(self, value):
        # Validate type ImageId, a restriction on xs:string.
        pass
    def get_InternalId(self): return self.InternalId
    def set_InternalId(self, InternalId): self.InternalId = InternalId
    def get_InternalImageType(self): return self.InternalImageType
    def set_InternalImageType(self, InternalImageType): self.InternalImageType = InternalImageType
    def validate_InternalImageType(self, value):
        # Validate type InternalImageType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='CustomerImageUsage', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerImageUsage')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='CustomerImageUsage'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='CustomerImageUsage', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.InternalId is not None:
            showIndent(outfile, level)
            outfile.write('<%sInternalId>%s</%sInternalId>\n' % (namespace_, self.gds_format_string(quote_xml(self.InternalId).encode(ExternalEncoding), input_name='InternalId'), namespace_))
        if self.InternalImageType is not None:
            showIndent(outfile, level)
            outfile.write('<%sInternalImageType>%s</%sInternalImageType>\n' % (namespace_, self.gds_format_string(quote_xml(self.InternalImageType).encode(ExternalEncoding), input_name='InternalImageType'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Id is not None or
            self.InternalId is not None or
            self.InternalImageType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerImageUsage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.InternalId is not None:
            showIndent(outfile, level)
            outfile.write('InternalId=%s,\n' % quote_python(self.InternalId).encode(ExternalEncoding))
        if self.InternalImageType is not None:
            showIndent(outfile, level)
            outfile.write('InternalImageType=%s,\n' % quote_python(self.InternalImageType).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_CustomerImageUsageType(self.Type)    # validate type CustomerImageUsageType
        elif nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
            self.validate_ImageId(self.Id)    # validate type ImageId
        elif nodeName_ == 'InternalId':
            InternalId_ = child_.text
            InternalId_ = self.gds_validate_string(InternalId_, node, 'InternalId')
            self.InternalId = InternalId_
        elif nodeName_ == 'InternalImageType':
            InternalImageType_ = child_.text
            InternalImageType_ = self.gds_validate_string(InternalImageType_, node, 'InternalImageType')
            self.InternalImageType = InternalImageType_
            self.validate_InternalImageType(self.InternalImageType)    # validate type InternalImageType
# end class CustomerImageUsage


class GroundCloseDocumentsReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CloseDocuments=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if CloseDocuments is None:
            self.CloseDocuments = []
        else:
            self.CloseDocuments = CloseDocuments
    def factory(*args_, **kwargs_):
        if GroundCloseDocumentsReply.subclass:
            return GroundCloseDocumentsReply.subclass(*args_, **kwargs_)
        else:
            return GroundCloseDocumentsReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CloseDocuments(self): return self.CloseDocuments
    def set_CloseDocuments(self, CloseDocuments): self.CloseDocuments = CloseDocuments
    def add_CloseDocuments(self, value): self.CloseDocuments.append(value)
    def insert_CloseDocuments(self, index, value): self.CloseDocuments[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseDocumentsReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseDocumentsReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseDocumentsReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseDocumentsReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        for CloseDocuments_ in self.CloseDocuments:
            CloseDocuments_.export(outfile, level, namespace_, name_='CloseDocuments')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CloseDocuments
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseDocumentsReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('CloseDocuments=[\n')
        level += 1
        for CloseDocuments_ in self.CloseDocuments:
            showIndent(outfile, level)
            outfile.write('model_.CloseDocument(\n')
            CloseDocuments_.exportLiteral(outfile, level, name_='CloseDocument')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CloseDocuments':
            obj_ = CloseDocument.factory()
            obj_.build(child_)
            self.CloseDocuments.append(obj_)
# end class GroundCloseDocumentsReply


class GroundCloseReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CodReport=None, HazMatCertificate=None, Manifest=None, MultiweightReport=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CodReport = CodReport
        self.HazMatCertificate = HazMatCertificate
        self.Manifest = Manifest
        self.MultiweightReport = MultiweightReport
    def factory(*args_, **kwargs_):
        if GroundCloseReply.subclass:
            return GroundCloseReply.subclass(*args_, **kwargs_)
        else:
            return GroundCloseReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CodReport(self): return self.CodReport
    def set_CodReport(self, CodReport): self.CodReport = CodReport
    def get_HazMatCertificate(self): return self.HazMatCertificate
    def set_HazMatCertificate(self, HazMatCertificate): self.HazMatCertificate = HazMatCertificate
    def get_Manifest(self): return self.Manifest
    def set_Manifest(self, Manifest): self.Manifest = Manifest
    def get_MultiweightReport(self): return self.MultiweightReport
    def set_MultiweightReport(self, MultiweightReport): self.MultiweightReport = MultiweightReport
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.CodReport:
            self.CodReport.export(outfile, level, namespace_, name_='CodReport')
        if self.HazMatCertificate:
            self.HazMatCertificate.export(outfile, level, namespace_, name_='HazMatCertificate')
        if self.Manifest:
            self.Manifest.export(outfile, level, namespace_, name_='Manifest')
        if self.MultiweightReport:
            self.MultiweightReport.export(outfile, level, namespace_, name_='MultiweightReport')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CodReport is not None or
            self.HazMatCertificate is not None or
            self.Manifest is not None or
            self.MultiweightReport is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CodReport is not None:
            showIndent(outfile, level)
            outfile.write('CodReport=model_.xs_base64Binary(\n')
            self.CodReport.exportLiteral(outfile, level, name_='CodReport')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HazMatCertificate is not None:
            showIndent(outfile, level)
            outfile.write('HazMatCertificate=model_.xs_base64Binary(\n')
            self.HazMatCertificate.exportLiteral(outfile, level, name_='HazMatCertificate')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Manifest is not None:
            showIndent(outfile, level)
            outfile.write('Manifest=model_.ManifestFile(\n')
            self.Manifest.exportLiteral(outfile, level, name_='Manifest')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.MultiweightReport is not None:
            showIndent(outfile, level)
            outfile.write('MultiweightReport=model_.xs_base64Binary(\n')
            self.MultiweightReport.exportLiteral(outfile, level, name_='MultiweightReport')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CodReport':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_CodReport(obj_)
        elif nodeName_ == 'HazMatCertificate':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_HazMatCertificate(obj_)
        elif nodeName_ == 'Manifest':
            obj_ = ManifestFile.factory()
            obj_.build(child_)
            self.set_Manifest(obj_)
        elif nodeName_ == 'MultiweightReport':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_MultiweightReport(obj_)
# end class GroundCloseReply


class GroundCloseReportsReprintReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, CodReport=None, HazMatCertificate=None, Manifests=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CodReport = CodReport
        self.HazMatCertificate = HazMatCertificate
        if Manifests is None:
            self.Manifests = []
        else:
            self.Manifests = Manifests
    def factory(*args_, **kwargs_):
        if GroundCloseReportsReprintReply.subclass:
            return GroundCloseReportsReprintReply.subclass(*args_, **kwargs_)
        else:
            return GroundCloseReportsReprintReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CodReport(self): return self.CodReport
    def set_CodReport(self, CodReport): self.CodReport = CodReport
    def get_HazMatCertificate(self): return self.HazMatCertificate
    def set_HazMatCertificate(self, HazMatCertificate): self.HazMatCertificate = HazMatCertificate
    def get_Manifests(self): return self.Manifests
    def set_Manifests(self, Manifests): self.Manifests = Manifests
    def add_Manifests(self, value): self.Manifests.append(value)
    def insert_Manifests(self, index, value): self.Manifests[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseReportsReprintReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseReportsReprintReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseReportsReprintReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseReportsReprintReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.CodReport:
            self.CodReport.export(outfile, level, namespace_, name_='CodReport')
        if self.HazMatCertificate:
            self.HazMatCertificate.export(outfile, level, namespace_, name_='HazMatCertificate')
        for Manifests_ in self.Manifests:
            Manifests_.export(outfile, level, namespace_, name_='Manifests')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CodReport is not None or
            self.HazMatCertificate is not None or
            self.Manifests
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseReportsReprintReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CodReport is not None:
            showIndent(outfile, level)
            outfile.write('CodReport=model_.xs_base64Binary(\n')
            self.CodReport.exportLiteral(outfile, level, name_='CodReport')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HazMatCertificate is not None:
            showIndent(outfile, level)
            outfile.write('HazMatCertificate=model_.xs_base64Binary(\n')
            self.HazMatCertificate.exportLiteral(outfile, level, name_='HazMatCertificate')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Manifests=[\n')
        level += 1
        for Manifests_ in self.Manifests:
            showIndent(outfile, level)
            outfile.write('model_.ManifestFile(\n')
            Manifests_.exportLiteral(outfile, level, name_='ManifestFile')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CodReport':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_CodReport(obj_)
        elif nodeName_ == 'HazMatCertificate':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_HazMatCertificate(obj_)
        elif nodeName_ == 'Manifests':
            obj_ = ManifestFile.factory()
            obj_.build(child_)
            self.Manifests.append(obj_)
# end class GroundCloseReportsReprintReply


class GroundCloseReportsReprintRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, ReportDate=None, TrackingNumber=None, CloseReportType=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.ReportDate = ReportDate
        self.TrackingNumber = TrackingNumber
        self.CloseReportType = CloseReportType
    def factory(*args_, **kwargs_):
        if GroundCloseReportsReprintRequest.subclass:
            return GroundCloseReportsReprintRequest.subclass(*args_, **kwargs_)
        else:
            return GroundCloseReportsReprintRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_ReportDate(self): return self.ReportDate
    def set_ReportDate(self, ReportDate): self.ReportDate = ReportDate
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_CloseReportType(self): return self.CloseReportType
    def set_CloseReportType(self, CloseReportType): self.CloseReportType = CloseReportType
    def validate_CloseReportType(self, value):
        # Validate type CloseReportType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseReportsReprintRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseReportsReprintRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseReportsReprintRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseReportsReprintRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.ReportDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sReportDate>%s</%sReportDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReportDate).encode(ExternalEncoding), input_name='ReportDate'), namespace_))
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.CloseReportType is not None:
            showIndent(outfile, level)
            outfile.write('<%sCloseReportType>%s</%sCloseReportType>\n' % (namespace_, self.gds_format_string(quote_xml(self.CloseReportType).encode(ExternalEncoding), input_name='CloseReportType'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ReportDate is not None or
            self.TrackingNumber is not None or
            self.CloseReportType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseReportsReprintRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReportDate is not None:
            showIndent(outfile, level)
            outfile.write('ReportDate=%s,\n' % quote_python(self.ReportDate).encode(ExternalEncoding))
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.CloseReportType is not None:
            showIndent(outfile, level)
            outfile.write('CloseReportType=%s,\n' % quote_python(self.CloseReportType).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'ReportDate':
            ReportDate_ = child_.text
            ReportDate_ = self.gds_validate_string(ReportDate_, node, 'ReportDate')
            self.ReportDate = ReportDate_
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'CloseReportType':
            CloseReportType_ = child_.text
            CloseReportType_ = self.gds_validate_string(CloseReportType_, node, 'CloseReportType')
            self.CloseReportType = CloseReportType_
            self.validate_CloseReportType(self.CloseReportType)    # validate type CloseReportType
# end class GroundCloseReportsReprintRequest


class GroundCloseRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, TimeUpToWhichShipmentsAreToBeClosed=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.TimeUpToWhichShipmentsAreToBeClosed = TimeUpToWhichShipmentsAreToBeClosed
    def factory(*args_, **kwargs_):
        if GroundCloseRequest.subclass:
            return GroundCloseRequest.subclass(*args_, **kwargs_)
        else:
            return GroundCloseRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_TimeUpToWhichShipmentsAreToBeClosed(self): return self.TimeUpToWhichShipmentsAreToBeClosed
    def set_TimeUpToWhichShipmentsAreToBeClosed(self, TimeUpToWhichShipmentsAreToBeClosed): self.TimeUpToWhichShipmentsAreToBeClosed = TimeUpToWhichShipmentsAreToBeClosed
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.TimeUpToWhichShipmentsAreToBeClosed is not None:
            showIndent(outfile, level)
            outfile.write('<%sTimeUpToWhichShipmentsAreToBeClosed>%s</%sTimeUpToWhichShipmentsAreToBeClosed>\n' % (namespace_, self.gds_format_string(quote_xml(self.TimeUpToWhichShipmentsAreToBeClosed).encode(ExternalEncoding), input_name='TimeUpToWhichShipmentsAreToBeClosed'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.TimeUpToWhichShipmentsAreToBeClosed is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TimeUpToWhichShipmentsAreToBeClosed is not None:
            showIndent(outfile, level)
            outfile.write('TimeUpToWhichShipmentsAreToBeClosed=%s,\n' % quote_python(self.TimeUpToWhichShipmentsAreToBeClosed).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'TimeUpToWhichShipmentsAreToBeClosed':
            TimeUpToWhichShipmentsAreToBeClosed_ = child_.text
            TimeUpToWhichShipmentsAreToBeClosed_ = self.gds_validate_string(TimeUpToWhichShipmentsAreToBeClosed_, node, 'TimeUpToWhichShipmentsAreToBeClosed')
            self.TimeUpToWhichShipmentsAreToBeClosed = TimeUpToWhichShipmentsAreToBeClosed_
# end class GroundCloseRequest


class GroundCloseWithDocumentsRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, CloseDate=None, CloseDocumentSpecification=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CloseDate = CloseDate
        self.CloseDocumentSpecification = CloseDocumentSpecification
    def factory(*args_, **kwargs_):
        if GroundCloseWithDocumentsRequest.subclass:
            return GroundCloseWithDocumentsRequest.subclass(*args_, **kwargs_)
        else:
            return GroundCloseWithDocumentsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CloseDate(self): return self.CloseDate
    def set_CloseDate(self, CloseDate): self.CloseDate = CloseDate
    def get_CloseDocumentSpecification(self): return self.CloseDocumentSpecification
    def set_CloseDocumentSpecification(self, CloseDocumentSpecification): self.CloseDocumentSpecification = CloseDocumentSpecification
    def export(self, outfile, level, namespace_='ns:', name_='GroundCloseWithDocumentsRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroundCloseWithDocumentsRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='GroundCloseWithDocumentsRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='GroundCloseWithDocumentsRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.CloseDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sCloseDate>%s</%sCloseDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.CloseDate).encode(ExternalEncoding), input_name='CloseDate'), namespace_))
        if self.CloseDocumentSpecification:
            self.CloseDocumentSpecification.export(outfile, level, namespace_, name_='CloseDocumentSpecification')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CloseDate is not None or
            self.CloseDocumentSpecification is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GroundCloseWithDocumentsRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CloseDate is not None:
            showIndent(outfile, level)
            outfile.write('CloseDate=%s,\n' % quote_python(self.CloseDate).encode(ExternalEncoding))
        if self.CloseDocumentSpecification is not None:
            showIndent(outfile, level)
            outfile.write('CloseDocumentSpecification=model_.CloseDocumentSpecification(\n')
            self.CloseDocumentSpecification.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CloseDate':
            CloseDate_ = child_.text
            CloseDate_ = self.gds_validate_string(CloseDate_, node, 'CloseDate')
            self.CloseDate = CloseDate_
        elif nodeName_ == 'CloseDocumentSpecification':
            obj_ = CloseDocumentSpecification.factory()
            obj_.build(child_)
            self.set_CloseDocumentSpecification(obj_)
# end class GroundCloseWithDocumentsRequest


class LinearMeasure(GeneratedsSuper):
    """Represents a one-dimensional measurement in small units (e.g.
    suitable for measuring a package or document), contrasted with
    Distance, which represents a large one-dimensional measurement
    (e.g. distance between cities)."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.Value = Value
        self.Units = Units
    def factory(*args_, **kwargs_):
        if LinearMeasure.subclass:
            return LinearMeasure.subclass(*args_, **kwargs_)
        else:
            return LinearMeasure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_LinearUnits(self, value):
        # Validate type LinearUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='LinearMeasure', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LinearMeasure')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='LinearMeasure'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='LinearMeasure', fromsubclass_=False):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LinearMeasure'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_LinearUnits(self.Units)    # validate type LinearUnits
# end class LinearMeasure


class Localization(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class ManifestFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FileName=None, File=None):
        self.FileName = FileName
        self.File = File
    def factory(*args_, **kwargs_):
        if ManifestFile.subclass:
            return ManifestFile.subclass(*args_, **kwargs_)
        else:
            return ManifestFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FileName(self): return self.FileName
    def set_FileName(self, FileName): self.FileName = FileName
    def get_File(self): return self.File
    def set_File(self, File): self.File = File
    def export(self, outfile, level, namespace_='ns:', name_='ManifestFile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestFile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ManifestFile'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ManifestFile', fromsubclass_=False):
        if self.FileName is not None:
            showIndent(outfile, level)
            outfile.write('<%sFileName>%s</%sFileName>\n' % (namespace_, self.gds_format_string(quote_xml(self.FileName).encode(ExternalEncoding), input_name='FileName'), namespace_))
        if self.File:
            self.File.export(outfile, level, namespace_, name_='File')
    def hasContent_(self):
        if (
            self.FileName is not None or
            self.File is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ManifestFile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FileName is not None:
            showIndent(outfile, level)
            outfile.write('FileName=%s,\n' % quote_python(self.FileName).encode(ExternalEncoding))
        if self.File is not None:
            showIndent(outfile, level)
            outfile.write('File=model_.xs_base64Binary(\n')
            self.File.exportLiteral(outfile, level, name_='File')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FileName':
            FileName_ = child_.text
            FileName_ = self.gds_validate_string(FileName_, node, 'FileName')
            self.FileName = FileName_
        elif nodeName_ == 'File':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_File(obj_)
# end class ManifestFile


class Notification(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class Op950Detail(GeneratedsSuper):
    """The instructions indicating how to print the OP-950 form for
    hazardous materials."""
    subclass = None
    superclass = None
    def __init__(self, Format=None, CustomerImageUsages=None, SignatureName=None):
        self.Format = Format
        if CustomerImageUsages is None:
            self.CustomerImageUsages = []
        else:
            self.CustomerImageUsages = CustomerImageUsages
        self.SignatureName = SignatureName
    def factory(*args_, **kwargs_):
        if Op950Detail.subclass:
            return Op950Detail.subclass(*args_, **kwargs_)
        else:
            return Op950Detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def get_CustomerImageUsages(self): return self.CustomerImageUsages
    def set_CustomerImageUsages(self, CustomerImageUsages): self.CustomerImageUsages = CustomerImageUsages
    def add_CustomerImageUsages(self, value): self.CustomerImageUsages.append(value)
    def insert_CustomerImageUsages(self, index, value): self.CustomerImageUsages[index] = value
    def get_SignatureName(self): return self.SignatureName
    def set_SignatureName(self, SignatureName): self.SignatureName = SignatureName
    def export(self, outfile, level, namespace_='ns:', name_='Op950Detail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Op950Detail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Op950Detail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Op950Detail', fromsubclass_=False):
        if self.Format:
            self.Format.export(outfile, level, namespace_, name_='Format')
        for CustomerImageUsages_ in self.CustomerImageUsages:
            CustomerImageUsages_.export(outfile, level, namespace_, name_='CustomerImageUsages')
        if self.SignatureName is not None:
            showIndent(outfile, level)
            outfile.write('<%sSignatureName>%s</%sSignatureName>\n' % (namespace_, self.gds_format_string(quote_xml(self.SignatureName).encode(ExternalEncoding), input_name='SignatureName'), namespace_))
    def hasContent_(self):
        if (
            self.Format is not None or
            self.CustomerImageUsages or
            self.SignatureName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Op950Detail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Format is not None:
            showIndent(outfile, level)
            outfile.write('Format=model_.CloseDocumentFormat(\n')
            self.Format.exportLiteral(outfile, level, name_='Format')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('CustomerImageUsages=[\n')
        level += 1
        for CustomerImageUsages_ in self.CustomerImageUsages:
            showIndent(outfile, level)
            outfile.write('model_.CustomerImageUsage(\n')
            CustomerImageUsages_.exportLiteral(outfile, level, name_='CustomerImageUsage')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.SignatureName is not None:
            showIndent(outfile, level)
            outfile.write('SignatureName=%s,\n' % quote_python(self.SignatureName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Format':
            obj_ = CloseDocumentFormat.factory()
            obj_.build(child_)
            self.set_Format(obj_)
        elif nodeName_ == 'CustomerImageUsages':
            obj_ = CustomerImageUsage.factory()
            obj_.build(child_)
            self.CustomerImageUsages.append(obj_)
        elif nodeName_ == 'SignatureName':
            SignatureName_ = child_.text
            SignatureName_ = self.gds_validate_string(SignatureName_, node, 'SignatureName')
            self.SignatureName = SignatureName_
# end class Op950Detail


class ReprintGroundCloseDocumentsRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, ReprintOption=None, CloseDate=None, TrackingNumber=None, CloseDocumentSpecification=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.ReprintOption = ReprintOption
        self.CloseDate = CloseDate
        self.TrackingNumber = TrackingNumber
        self.CloseDocumentSpecification = CloseDocumentSpecification
    def factory(*args_, **kwargs_):
        if ReprintGroundCloseDocumentsRequest.subclass:
            return ReprintGroundCloseDocumentsRequest.subclass(*args_, **kwargs_)
        else:
            return ReprintGroundCloseDocumentsRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_ReprintOption(self): return self.ReprintOption
    def set_ReprintOption(self, ReprintOption): self.ReprintOption = ReprintOption
    def validate_ReprintGroundCloseDocumentsOptionType(self, value):
        # Validate type ReprintGroundCloseDocumentsOptionType, a restriction on xs:string.
        pass
    def get_CloseDate(self): return self.CloseDate
    def set_CloseDate(self, CloseDate): self.CloseDate = CloseDate
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_CloseDocumentSpecification(self): return self.CloseDocumentSpecification
    def set_CloseDocumentSpecification(self, CloseDocumentSpecification): self.CloseDocumentSpecification = CloseDocumentSpecification
    def export(self, outfile, level, namespace_='ns:', name_='ReprintGroundCloseDocumentsRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReprintGroundCloseDocumentsRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ReprintGroundCloseDocumentsRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ReprintGroundCloseDocumentsRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.ReprintOption is not None:
            showIndent(outfile, level)
            outfile.write('<%sReprintOption>%s</%sReprintOption>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReprintOption).encode(ExternalEncoding), input_name='ReprintOption'), namespace_))
        if self.CloseDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sCloseDate>%s</%sCloseDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.CloseDate).encode(ExternalEncoding), input_name='CloseDate'), namespace_))
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.CloseDocumentSpecification:
            self.CloseDocumentSpecification.export(outfile, level, namespace_, name_='CloseDocumentSpecification')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ReprintOption is not None or
            self.CloseDate is not None or
            self.TrackingNumber is not None or
            self.CloseDocumentSpecification is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReprintGroundCloseDocumentsRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReprintOption is not None:
            showIndent(outfile, level)
            outfile.write('ReprintOption=%s,\n' % quote_python(self.ReprintOption).encode(ExternalEncoding))
        if self.CloseDate is not None:
            showIndent(outfile, level)
            outfile.write('CloseDate=%s,\n' % quote_python(self.CloseDate).encode(ExternalEncoding))
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.CloseDocumentSpecification is not None:
            showIndent(outfile, level)
            outfile.write('CloseDocumentSpecification=model_.CloseDocumentSpecification(\n')
            self.CloseDocumentSpecification.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'ReprintOption':
            ReprintOption_ = child_.text
            ReprintOption_ = self.gds_validate_string(ReprintOption_, node, 'ReprintOption')
            self.ReprintOption = ReprintOption_
            self.validate_ReprintGroundCloseDocumentsOptionType(self.ReprintOption)    # validate type ReprintGroundCloseDocumentsOptionType
        elif nodeName_ == 'CloseDate':
            CloseDate_ = child_.text
            CloseDate_ = self.gds_validate_string(CloseDate_, node, 'CloseDate')
            self.CloseDate = CloseDate_
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'CloseDocumentSpecification':
            obj_ = CloseDocumentSpecification.factory()
            obj_.build(child_)
            self.set_CloseDocumentSpecification(obj_)
# end class ReprintGroundCloseDocumentsRequest


class ShippingDocumentDispositionDetail(GeneratedsSuper):
    """Each occurrence of this class specifies a particular way in which a
    kind of shipping document is to be produced and provided."""
    subclass = None
    superclass = None
    def __init__(self, DispositionType=None, Grouping=None, StorageDetail=None, EMailDetail=None, PrintDetail=None):
        self.DispositionType = DispositionType
        self.Grouping = Grouping
        self.StorageDetail = StorageDetail
        self.EMailDetail = EMailDetail
        self.PrintDetail = PrintDetail
    def factory(*args_, **kwargs_):
        if ShippingDocumentDispositionDetail.subclass:
            return ShippingDocumentDispositionDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentDispositionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DispositionType(self): return self.DispositionType
    def set_DispositionType(self, DispositionType): self.DispositionType = DispositionType
    def validate_ShippingDocumentDispositionType(self, value):
        # Validate type ShippingDocumentDispositionType, a restriction on xs:string.
        pass
    def get_Grouping(self): return self.Grouping
    def set_Grouping(self, Grouping): self.Grouping = Grouping
    def validate_ShippingDocumentGroupingType(self, value):
        # Validate type ShippingDocumentGroupingType, a restriction on xs:string.
        pass
    def get_StorageDetail(self): return self.StorageDetail
    def set_StorageDetail(self, StorageDetail): self.StorageDetail = StorageDetail
    def get_EMailDetail(self): return self.EMailDetail
    def set_EMailDetail(self, EMailDetail): self.EMailDetail = EMailDetail
    def get_PrintDetail(self): return self.PrintDetail
    def set_PrintDetail(self, PrintDetail): self.PrintDetail = PrintDetail
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentDispositionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentDispositionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentDispositionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentDispositionDetail', fromsubclass_=False):
        if self.DispositionType is not None:
            showIndent(outfile, level)
            outfile.write('<%sDispositionType>%s</%sDispositionType>\n' % (namespace_, self.gds_format_string(quote_xml(self.DispositionType).encode(ExternalEncoding), input_name='DispositionType'), namespace_))
        if self.Grouping is not None:
            showIndent(outfile, level)
            outfile.write('<%sGrouping>%s</%sGrouping>\n' % (namespace_, self.gds_format_string(quote_xml(self.Grouping).encode(ExternalEncoding), input_name='Grouping'), namespace_))
        if self.StorageDetail:
            self.StorageDetail.export(outfile, level, namespace_, name_='StorageDetail')
        if self.EMailDetail:
            self.EMailDetail.export(outfile, level, namespace_, name_='EMailDetail')
        if self.PrintDetail:
            self.PrintDetail.export(outfile, level, namespace_, name_='PrintDetail')
    def hasContent_(self):
        if (
            self.DispositionType is not None or
            self.Grouping is not None or
            self.StorageDetail is not None or
            self.EMailDetail is not None or
            self.PrintDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentDispositionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DispositionType is not None:
            showIndent(outfile, level)
            outfile.write('DispositionType=%s,\n' % quote_python(self.DispositionType).encode(ExternalEncoding))
        if self.Grouping is not None:
            showIndent(outfile, level)
            outfile.write('Grouping=%s,\n' % quote_python(self.Grouping).encode(ExternalEncoding))
        if self.StorageDetail is not None:
            showIndent(outfile, level)
            outfile.write('StorageDetail=model_.ShippingDocumentStorageDetail(\n')
            self.StorageDetail.exportLiteral(outfile, level, name_='StorageDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EMailDetail is not None:
            showIndent(outfile, level)
            outfile.write('EMailDetail=model_.ShippingDocumentEMailDetail(\n')
            self.EMailDetail.exportLiteral(outfile, level, name_='EMailDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrintDetail is not None:
            showIndent(outfile, level)
            outfile.write('PrintDetail=model_.ShippingDocumentPrintDetail(\n')
            self.PrintDetail.exportLiteral(outfile, level, name_='PrintDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DispositionType':
            DispositionType_ = child_.text
            DispositionType_ = self.gds_validate_string(DispositionType_, node, 'DispositionType')
            self.DispositionType = DispositionType_
            self.validate_ShippingDocumentDispositionType(self.DispositionType)    # validate type ShippingDocumentDispositionType
        elif nodeName_ == 'Grouping':
            Grouping_ = child_.text
            Grouping_ = self.gds_validate_string(Grouping_, node, 'Grouping')
            self.Grouping = Grouping_
            self.validate_ShippingDocumentGroupingType(self.Grouping)    # validate type ShippingDocumentGroupingType
        elif nodeName_ == 'StorageDetail':
            obj_ = ShippingDocumentStorageDetail.factory()
            obj_.build(child_)
            self.set_StorageDetail(obj_)
        elif nodeName_ == 'EMailDetail':
            obj_ = ShippingDocumentEMailDetail.factory()
            obj_.build(child_)
            self.set_EMailDetail(obj_)
        elif nodeName_ == 'PrintDetail':
            obj_ = ShippingDocumentPrintDetail.factory()
            obj_.build(child_)
            self.set_PrintDetail(obj_)
# end class ShippingDocumentDispositionDetail


class ShippingDocumentEMailDetail(GeneratedsSuper):
    """Specifies how to e-mail shipping documents."""
    subclass = None
    superclass = None
    def __init__(self, EMailRecipients=None, Grouping=None):
        if EMailRecipients is None:
            self.EMailRecipients = []
        else:
            self.EMailRecipients = EMailRecipients
        self.Grouping = Grouping
    def factory(*args_, **kwargs_):
        if ShippingDocumentEMailDetail.subclass:
            return ShippingDocumentEMailDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailRecipients(self): return self.EMailRecipients
    def set_EMailRecipients(self, EMailRecipients): self.EMailRecipients = EMailRecipients
    def add_EMailRecipients(self, value): self.EMailRecipients.append(value)
    def insert_EMailRecipients(self, index, value): self.EMailRecipients[index] = value
    def get_Grouping(self): return self.Grouping
    def set_Grouping(self, Grouping): self.Grouping = Grouping
    def validate_ShippingDocumentEMailGroupingType(self, value):
        # Validate type ShippingDocumentEMailGroupingType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentEMailDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentEMailDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentEMailDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentEMailDetail', fromsubclass_=False):
        for EMailRecipients_ in self.EMailRecipients:
            EMailRecipients_.export(outfile, level, namespace_, name_='EMailRecipients')
        if self.Grouping is not None:
            showIndent(outfile, level)
            outfile.write('<%sGrouping>%s</%sGrouping>\n' % (namespace_, self.gds_format_string(quote_xml(self.Grouping).encode(ExternalEncoding), input_name='Grouping'), namespace_))
    def hasContent_(self):
        if (
            self.EMailRecipients or
            self.Grouping is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentEMailDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('EMailRecipients=[\n')
        level += 1
        for EMailRecipients_ in self.EMailRecipients:
            showIndent(outfile, level)
            outfile.write('model_.ShippingDocumentEMailRecipient(\n')
            EMailRecipients_.exportLiteral(outfile, level, name_='ShippingDocumentEMailRecipient')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Grouping is not None:
            showIndent(outfile, level)
            outfile.write('Grouping=%s,\n' % quote_python(self.Grouping).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailRecipients':
            obj_ = ShippingDocumentEMailRecipient.factory()
            obj_.build(child_)
            self.EMailRecipients.append(obj_)
        elif nodeName_ == 'Grouping':
            Grouping_ = child_.text
            Grouping_ = self.gds_validate_string(Grouping_, node, 'Grouping')
            self.Grouping = Grouping_
            self.validate_ShippingDocumentEMailGroupingType(self.Grouping)    # validate type ShippingDocumentEMailGroupingType
# end class ShippingDocumentEMailDetail


class ShippingDocumentEMailRecipient(GeneratedsSuper):
    """Specifies an individual recipient of e-mailed shipping document(s)."""
    subclass = None
    superclass = None
    def __init__(self, RecipientType=None, Address=None):
        self.RecipientType = RecipientType
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ShippingDocumentEMailRecipient.subclass:
            return ShippingDocumentEMailRecipient.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentEMailRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RecipientType(self): return self.RecipientType
    def set_RecipientType(self, RecipientType): self.RecipientType = RecipientType
    def validate_EMailNotificationRecipientType(self, value):
        # Validate type EMailNotificationRecipientType, a restriction on xs:string.
        pass
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentEMailRecipient', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentEMailRecipient')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentEMailRecipient'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentEMailRecipient', fromsubclass_=False):
        if self.RecipientType is not None:
            showIndent(outfile, level)
            outfile.write('<%sRecipientType>%s</%sRecipientType>\n' % (namespace_, self.gds_format_string(quote_xml(self.RecipientType).encode(ExternalEncoding), input_name='RecipientType'), namespace_))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddress>%s</%sAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.Address).encode(ExternalEncoding), input_name='Address'), namespace_))
    def hasContent_(self):
        if (
            self.RecipientType is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentEMailRecipient'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RecipientType is not None:
            showIndent(outfile, level)
            outfile.write('RecipientType=%s,\n' % quote_python(self.RecipientType).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=%s,\n' % quote_python(self.Address).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RecipientType':
            RecipientType_ = child_.text
            RecipientType_ = self.gds_validate_string(RecipientType_, node, 'RecipientType')
            self.RecipientType = RecipientType_
            self.validate_EMailNotificationRecipientType(self.RecipientType)    # validate type EMailNotificationRecipientType
        elif nodeName_ == 'Address':
            Address_ = child_.text
            Address_ = self.gds_validate_string(Address_, node, 'Address')
            self.Address = Address_
# end class ShippingDocumentEMailRecipient


class ShippingDocumentPart(GeneratedsSuper):
    """A single part of a shipping document, such as one page of a
    multiple-page document whose format requires a separate image
    per page."""
    subclass = None
    superclass = None
    def __init__(self, DocumentPartSequenceNumber=None, Image=None):
        self.DocumentPartSequenceNumber = DocumentPartSequenceNumber
        self.Image = Image
    def factory(*args_, **kwargs_):
        if ShippingDocumentPart.subclass:
            return ShippingDocumentPart.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DocumentPartSequenceNumber(self): return self.DocumentPartSequenceNumber
    def set_DocumentPartSequenceNumber(self, DocumentPartSequenceNumber): self.DocumentPartSequenceNumber = DocumentPartSequenceNumber
    def get_Image(self): return self.Image
    def set_Image(self, Image): self.Image = Image
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentPart', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentPart')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentPart'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentPart', fromsubclass_=False):
        if self.DocumentPartSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentPartSequenceNumber>%s</%sDocumentPartSequenceNumber>\n' % (namespace_, self.gds_format_integer(self.DocumentPartSequenceNumber, input_name='DocumentPartSequenceNumber'), namespace_))
        if self.Image:
            self.Image.export(outfile, level, namespace_, name_='Image')
    def hasContent_(self):
        if (
            self.DocumentPartSequenceNumber is not None or
            self.Image is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentPart'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DocumentPartSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('DocumentPartSequenceNumber=%d,\n' % self.DocumentPartSequenceNumber)
        if self.Image is not None:
            showIndent(outfile, level)
            outfile.write('Image=model_.xs_base64Binary(\n')
            self.Image.exportLiteral(outfile, level, name_='Image')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DocumentPartSequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'DocumentPartSequenceNumber')
            self.DocumentPartSequenceNumber = ival_
        elif nodeName_ == 'Image':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_Image(obj_)
# end class ShippingDocumentPart


class ShippingDocumentPrintDetail(GeneratedsSuper):
    """Specifies printing options for a shipping document."""
    subclass = None
    superclass = None
    def __init__(self, PrinterId=None):
        self.PrinterId = PrinterId
    def factory(*args_, **kwargs_):
        if ShippingDocumentPrintDetail.subclass:
            return ShippingDocumentPrintDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentPrintDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PrinterId(self): return self.PrinterId
    def set_PrinterId(self, PrinterId): self.PrinterId = PrinterId
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentPrintDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentPrintDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentPrintDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentPrintDetail', fromsubclass_=False):
        if self.PrinterId is not None:
            showIndent(outfile, level)
            outfile.write('<%sPrinterId>%s</%sPrinterId>\n' % (namespace_, self.gds_format_string(quote_xml(self.PrinterId).encode(ExternalEncoding), input_name='PrinterId'), namespace_))
    def hasContent_(self):
        if (
            self.PrinterId is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentPrintDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PrinterId is not None:
            showIndent(outfile, level)
            outfile.write('PrinterId=%s,\n' % quote_python(self.PrinterId).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PrinterId':
            PrinterId_ = child_.text
            PrinterId_ = self.gds_validate_string(PrinterId_, node, 'PrinterId')
            self.PrinterId = PrinterId_
# end class ShippingDocumentPrintDetail


class ShippingDocumentStorageDetail(GeneratedsSuper):
    """Specifies how to store shipping documents."""
    subclass = None
    superclass = None
    def __init__(self, FilePath=None, FileNaming=None, FileSuffix=None):
        self.FilePath = FilePath
        self.FileNaming = FileNaming
        self.FileSuffix = FileSuffix
    def factory(*args_, **kwargs_):
        if ShippingDocumentStorageDetail.subclass:
            return ShippingDocumentStorageDetail.subclass(*args_, **kwargs_)
        else:
            return ShippingDocumentStorageDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FilePath(self): return self.FilePath
    def set_FilePath(self, FilePath): self.FilePath = FilePath
    def get_FileNaming(self): return self.FileNaming
    def set_FileNaming(self, FileNaming): self.FileNaming = FileNaming
    def validate_ShippingDocumentNamingType(self, value):
        # Validate type ShippingDocumentNamingType, a restriction on xs:string.
        pass
    def get_FileSuffix(self): return self.FileSuffix
    def set_FileSuffix(self, FileSuffix): self.FileSuffix = FileSuffix
    def export(self, outfile, level, namespace_='ns:', name_='ShippingDocumentStorageDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingDocumentStorageDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ShippingDocumentStorageDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ShippingDocumentStorageDetail', fromsubclass_=False):
        if self.FilePath is not None:
            showIndent(outfile, level)
            outfile.write('<%sFilePath>%s</%sFilePath>\n' % (namespace_, self.gds_format_string(quote_xml(self.FilePath).encode(ExternalEncoding), input_name='FilePath'), namespace_))
        if self.FileNaming is not None:
            showIndent(outfile, level)
            outfile.write('<%sFileNaming>%s</%sFileNaming>\n' % (namespace_, self.gds_format_string(quote_xml(self.FileNaming).encode(ExternalEncoding), input_name='FileNaming'), namespace_))
        if self.FileSuffix is not None:
            showIndent(outfile, level)
            outfile.write('<%sFileSuffix>%s</%sFileSuffix>\n' % (namespace_, self.gds_format_string(quote_xml(self.FileSuffix).encode(ExternalEncoding), input_name='FileSuffix'), namespace_))
    def hasContent_(self):
        if (
            self.FilePath is not None or
            self.FileNaming is not None or
            self.FileSuffix is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingDocumentStorageDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.FilePath is not None:
            showIndent(outfile, level)
            outfile.write('FilePath=%s,\n' % quote_python(self.FilePath).encode(ExternalEncoding))
        if self.FileNaming is not None:
            showIndent(outfile, level)
            outfile.write('FileNaming=%s,\n' % quote_python(self.FileNaming).encode(ExternalEncoding))
        if self.FileSuffix is not None:
            showIndent(outfile, level)
            outfile.write('FileSuffix=%s,\n' % quote_python(self.FileSuffix).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FilePath':
            FilePath_ = child_.text
            FilePath_ = self.gds_validate_string(FilePath_, node, 'FilePath')
            self.FilePath = FilePath_
        elif nodeName_ == 'FileNaming':
            FileNaming_ = child_.text
            FileNaming_ = self.gds_validate_string(FileNaming_, node, 'FileNaming')
            self.FileNaming = FileNaming_
            self.validate_ShippingDocumentNamingType(self.FileNaming)    # validate type ShippingDocumentNamingType
        elif nodeName_ == 'FileSuffix':
            FileSuffix_ = child_.text
            FileSuffix_ = self.gds_validate_string(FileSuffix_, node, 'FileSuffix')
            self.FileSuffix = FileSuffix_
# end class ShippingDocumentStorageDetail


class SmartPostCloseReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
    def factory(*args_, **kwargs_):
        if SmartPostCloseReply.subclass:
            return SmartPostCloseReply.subclass(*args_, **kwargs_)
        else:
            return SmartPostCloseReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def export(self, outfile, level, namespace_='ns:', name_='SmartPostCloseReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SmartPostCloseReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SmartPostCloseReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SmartPostCloseReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SmartPostCloseReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
# end class SmartPostCloseReply


class SmartPostCloseRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, HubId=None, CustomerManifestId=None, DestinationCountryCode=None, PickUpCarrier=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.HubId = HubId
        self.CustomerManifestId = CustomerManifestId
        self.DestinationCountryCode = DestinationCountryCode
        self.PickUpCarrier = PickUpCarrier
    def factory(*args_, **kwargs_):
        if SmartPostCloseRequest.subclass:
            return SmartPostCloseRequest.subclass(*args_, **kwargs_)
        else:
            return SmartPostCloseRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_HubId(self): return self.HubId
    def set_HubId(self, HubId): self.HubId = HubId
    def get_CustomerManifestId(self): return self.CustomerManifestId
    def set_CustomerManifestId(self, CustomerManifestId): self.CustomerManifestId = CustomerManifestId
    def get_DestinationCountryCode(self): return self.DestinationCountryCode
    def set_DestinationCountryCode(self, DestinationCountryCode): self.DestinationCountryCode = DestinationCountryCode
    def get_PickUpCarrier(self): return self.PickUpCarrier
    def set_PickUpCarrier(self, PickUpCarrier): self.PickUpCarrier = PickUpCarrier
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='SmartPostCloseRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SmartPostCloseRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SmartPostCloseRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SmartPostCloseRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.HubId is not None:
            showIndent(outfile, level)
            outfile.write('<%sHubId>%s</%sHubId>\n' % (namespace_, self.gds_format_string(quote_xml(self.HubId).encode(ExternalEncoding), input_name='HubId'), namespace_))
        if self.CustomerManifestId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerManifestId>%s</%sCustomerManifestId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerManifestId).encode(ExternalEncoding), input_name='CustomerManifestId'), namespace_))
        if self.DestinationCountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sDestinationCountryCode>%s</%sDestinationCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.DestinationCountryCode).encode(ExternalEncoding), input_name='DestinationCountryCode'), namespace_))
        if self.PickUpCarrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickUpCarrier>%s</%sPickUpCarrier>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickUpCarrier).encode(ExternalEncoding), input_name='PickUpCarrier'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.HubId is not None or
            self.CustomerManifestId is not None or
            self.DestinationCountryCode is not None or
            self.PickUpCarrier is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SmartPostCloseRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.HubId is not None:
            showIndent(outfile, level)
            outfile.write('HubId=%s,\n' % quote_python(self.HubId).encode(ExternalEncoding))
        if self.CustomerManifestId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerManifestId=%s,\n' % quote_python(self.CustomerManifestId).encode(ExternalEncoding))
        if self.DestinationCountryCode is not None:
            showIndent(outfile, level)
            outfile.write('DestinationCountryCode=%s,\n' % quote_python(self.DestinationCountryCode).encode(ExternalEncoding))
        if self.PickUpCarrier is not None:
            showIndent(outfile, level)
            outfile.write('PickUpCarrier=%s,\n' % quote_python(self.PickUpCarrier).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'HubId':
            HubId_ = child_.text
            HubId_ = self.gds_validate_string(HubId_, node, 'HubId')
            self.HubId = HubId_
        elif nodeName_ == 'CustomerManifestId':
            CustomerManifestId_ = child_.text
            CustomerManifestId_ = self.gds_validate_string(CustomerManifestId_, node, 'CustomerManifestId')
            self.CustomerManifestId = CustomerManifestId_
        elif nodeName_ == 'DestinationCountryCode':
            DestinationCountryCode_ = child_.text
            DestinationCountryCode_ = self.gds_validate_string(DestinationCountryCode_, node, 'DestinationCountryCode')
            self.DestinationCountryCode = DestinationCountryCode_
        elif nodeName_ == 'PickUpCarrier':
            PickUpCarrier_ = child_.text
            PickUpCarrier_ = self.gds_validate_string(PickUpCarrier_, node, 'PickUpCarrier')
            self.PickUpCarrier = PickUpCarrier_
            self.validate_CarrierCodeType(self.PickUpCarrier)    # validate type CarrierCodeType
# end class SmartPostCloseRequest


class TransactionDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


class WebAuthenticationDetail(GeneratedsSuper):
    """The descriptive data to be used in authentication of the sender's
    identity (and right to use FedEx web services)."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SmartPostCloseRequest'
        rootClass = SmartPostCloseRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SmartPostCloseRequest'
        rootClass = SmartPostCloseRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="SmartPostCloseRequest",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SmartPostCloseRequest'
        rootClass = SmartPostCloseRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from close import *\n\n')
    sys.stdout.write('import close as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ClientDetail",
    "CloseDocument",
    "CloseDocumentFormat",
    "CloseDocumentSpecification",
    "CustomerImageUsage",
    "GroundCloseDocumentsReply",
    "GroundCloseReply",
    "GroundCloseReportsReprintReply",
    "GroundCloseReportsReprintRequest",
    "GroundCloseRequest",
    "GroundCloseWithDocumentsRequest",
    "LinearMeasure",
    "Localization",
    "ManifestFile",
    "Notification",
    "NotificationParameter",
    "Op950Detail",
    "ReprintGroundCloseDocumentsRequest",
    "ShippingDocumentDispositionDetail",
    "ShippingDocumentEMailDetail",
    "ShippingDocumentEMailRecipient",
    "ShippingDocumentPart",
    "ShippingDocumentPrintDetail",
    "ShippingDocumentStorageDetail",
    "SmartPostCloseReply",
    "SmartPostCloseRequest",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail"
    ]
