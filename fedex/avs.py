#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Nov 25 13:37:25 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class AddressValidationRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, RequestTimestamp=None, Options=None, AddressesToValidate=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.RequestTimestamp = RequestTimestamp
        self.Options = Options
        if AddressesToValidate is None:
            self.AddressesToValidate = []
        else:
            self.AddressesToValidate = AddressesToValidate
    def factory(*args_, **kwargs_):
        if AddressValidationRequest.subclass:
            return AddressValidationRequest.subclass(*args_, **kwargs_)
        else:
            return AddressValidationRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_RequestTimestamp(self): return self.RequestTimestamp
    def set_RequestTimestamp(self, RequestTimestamp): self.RequestTimestamp = RequestTimestamp
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def get_AddressesToValidate(self): return self.AddressesToValidate
    def set_AddressesToValidate(self, AddressesToValidate): self.AddressesToValidate = AddressesToValidate
    def add_AddressesToValidate(self, value): self.AddressesToValidate.append(value)
    def insert_AddressesToValidate(self, index, value): self.AddressesToValidate[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='AddressValidationRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressValidationRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressValidationRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.RequestTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestTimestamp>%s</%sRequestTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestTimestamp).encode(ExternalEncoding), input_name='RequestTimestamp'), namespace_))
        if self.Options:
            self.Options.export(outfile, level, namespace_, name_='Options', )
        for AddressesToValidate_ in self.AddressesToValidate:
            AddressesToValidate_.export(outfile, level, namespace_, name_='AddressesToValidate')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.RequestTimestamp is not None or
            self.Options is not None or
            self.AddressesToValidate
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressValidationRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RequestTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('RequestTimestamp=%s,\n' % quote_python(self.RequestTimestamp).encode(ExternalEncoding))
        if self.Options is not None:
            showIndent(outfile, level)
            outfile.write('Options=model_.AddressValidationOptions(\n')
            self.Options.exportLiteral(outfile, level, name_='Options')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('AddressesToValidate=[\n')
        level += 1
        for AddressesToValidate_ in self.AddressesToValidate:
            showIndent(outfile, level)
            outfile.write('model_.AddressToValidate(\n')
            AddressesToValidate_.exportLiteral(outfile, level, name_='AddressToValidate')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'RequestTimestamp':
            RequestTimestamp_ = child_.text
            RequestTimestamp_ = self.gds_validate_string(RequestTimestamp_, node, 'RequestTimestamp')
            self.RequestTimestamp = RequestTimestamp_
        elif nodeName_ == 'Options':
            obj_ = AddressValidationOptions.factory()
            obj_.build(child_)
            self.set_Options(obj_)
        elif nodeName_ == 'AddressesToValidate':
            obj_ = AddressToValidate.factory()
            obj_.build(child_)
            self.AddressesToValidate.append(obj_)
# end class AddressValidationRequest


class AddressValidationReply(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, ReplyTimestamp=None, AddressResults=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.ReplyTimestamp = ReplyTimestamp
        if AddressResults is None:
            self.AddressResults = []
        else:
            self.AddressResults = AddressResults
    def factory(*args_, **kwargs_):
        if AddressValidationReply.subclass:
            return AddressValidationReply.subclass(*args_, **kwargs_)
        else:
            return AddressValidationReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_ReplyTimestamp(self): return self.ReplyTimestamp
    def set_ReplyTimestamp(self, ReplyTimestamp): self.ReplyTimestamp = ReplyTimestamp
    def get_AddressResults(self): return self.AddressResults
    def set_AddressResults(self, AddressResults): self.AddressResults = AddressResults
    def add_AddressResults(self, value): self.AddressResults.append(value)
    def insert_AddressResults(self, index, value): self.AddressResults[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='AddressValidationReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressValidationReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressValidationReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version')
        if self.ReplyTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sReplyTimestamp>%s</%sReplyTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReplyTimestamp).encode(ExternalEncoding), input_name='ReplyTimestamp'), namespace_))
        for AddressResults_ in self.AddressResults:
            AddressResults_.export(outfile, level, namespace_, name_='AddressResults')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ReplyTimestamp is not None or
            self.AddressResults
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressValidationReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReplyTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('ReplyTimestamp=%s,\n' % quote_python(self.ReplyTimestamp).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AddressResults=[\n')
        level += 1
        for AddressResults_ in self.AddressResults:
            showIndent(outfile, level)
            outfile.write('model_.AddressValidationResult(\n')
            AddressResults_.exportLiteral(outfile, level, name_='AddressValidationResult')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'ReplyTimestamp':
            ReplyTimestamp_ = child_.text
            ReplyTimestamp_ = self.gds_validate_string(ReplyTimestamp_, node, 'ReplyTimestamp')
            self.ReplyTimestamp = ReplyTimestamp_
        elif nodeName_ == 'AddressResults':
            obj_ = AddressValidationResult.factory()
            obj_.build(child_)
            self.AddressResults.append(obj_)
# end class AddressValidationReply


class AddressValidationOptions(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, VerifyAddresses=None, CheckResidentialStatus=None, MaximumNumberOfMatches=None, StreetAccuracy=None, DirectionalAccuracy=None, CompanyNameAccuracy=None, ConvertToUpperCase=None, RecognizeAlternateCityNames=None, ReturnParsedElements=None):
        self.VerifyAddresses = VerifyAddresses
        self.CheckResidentialStatus = CheckResidentialStatus
        self.MaximumNumberOfMatches = MaximumNumberOfMatches
        self.StreetAccuracy = StreetAccuracy
        self.DirectionalAccuracy = DirectionalAccuracy
        self.CompanyNameAccuracy = CompanyNameAccuracy
        self.ConvertToUpperCase = ConvertToUpperCase
        self.RecognizeAlternateCityNames = RecognizeAlternateCityNames
        self.ReturnParsedElements = ReturnParsedElements
    def factory(*args_, **kwargs_):
        if AddressValidationOptions.subclass:
            return AddressValidationOptions.subclass(*args_, **kwargs_)
        else:
            return AddressValidationOptions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_VerifyAddresses(self): return self.VerifyAddresses
    def set_VerifyAddresses(self, VerifyAddresses): self.VerifyAddresses = VerifyAddresses
    def get_CheckResidentialStatus(self): return self.CheckResidentialStatus
    def set_CheckResidentialStatus(self, CheckResidentialStatus): self.CheckResidentialStatus = CheckResidentialStatus
    def get_MaximumNumberOfMatches(self): return self.MaximumNumberOfMatches
    def set_MaximumNumberOfMatches(self, MaximumNumberOfMatches): self.MaximumNumberOfMatches = MaximumNumberOfMatches
    def get_StreetAccuracy(self): return self.StreetAccuracy
    def set_StreetAccuracy(self, StreetAccuracy): self.StreetAccuracy = StreetAccuracy
    def validate_AddressValidationAccuracyType(self, value):
        # Validate type AddressValidationAccuracyType, a restriction on xs:string.
        pass
    def get_DirectionalAccuracy(self): return self.DirectionalAccuracy
    def set_DirectionalAccuracy(self, DirectionalAccuracy): self.DirectionalAccuracy = DirectionalAccuracy
    def get_CompanyNameAccuracy(self): return self.CompanyNameAccuracy
    def set_CompanyNameAccuracy(self, CompanyNameAccuracy): self.CompanyNameAccuracy = CompanyNameAccuracy
    def get_ConvertToUpperCase(self): return self.ConvertToUpperCase
    def set_ConvertToUpperCase(self, ConvertToUpperCase): self.ConvertToUpperCase = ConvertToUpperCase
    def get_RecognizeAlternateCityNames(self): return self.RecognizeAlternateCityNames
    def set_RecognizeAlternateCityNames(self, RecognizeAlternateCityNames): self.RecognizeAlternateCityNames = RecognizeAlternateCityNames
    def get_ReturnParsedElements(self): return self.ReturnParsedElements
    def set_ReturnParsedElements(self, ReturnParsedElements): self.ReturnParsedElements = ReturnParsedElements
    def export(self, outfile, level, namespace_='ns:', name_='AddressValidationOptions', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationOptions')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressValidationOptions'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressValidationOptions', fromsubclass_=False):
        if self.VerifyAddresses is not None:
            showIndent(outfile, level)
            outfile.write('<%sVerifyAddresses>%s</%sVerifyAddresses>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.VerifyAddresses)), input_name='VerifyAddresses'), namespace_))
        if self.CheckResidentialStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sCheckResidentialStatus>%s</%sCheckResidentialStatus>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.CheckResidentialStatus)), input_name='CheckResidentialStatus'), namespace_))
        if self.MaximumNumberOfMatches is not None:
            showIndent(outfile, level)
            outfile.write('<%sMaximumNumberOfMatches>%s</%sMaximumNumberOfMatches>\n' % (namespace_, self.gds_format_integer(self.MaximumNumberOfMatches, input_name='MaximumNumberOfMatches'), namespace_))
        if self.StreetAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('<%sStreetAccuracy>%s</%sStreetAccuracy>\n' % (namespace_, self.gds_format_string(quote_xml(self.StreetAccuracy).encode(ExternalEncoding), input_name='StreetAccuracy'), namespace_))
        if self.DirectionalAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('<%sDirectionalAccuracy>%s</%sDirectionalAccuracy>\n' % (namespace_, self.gds_format_string(quote_xml(self.DirectionalAccuracy).encode(ExternalEncoding), input_name='DirectionalAccuracy'), namespace_))
        if self.CompanyNameAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyNameAccuracy>%s</%sCompanyNameAccuracy>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyNameAccuracy).encode(ExternalEncoding), input_name='CompanyNameAccuracy'), namespace_))
        if self.ConvertToUpperCase is not None:
            showIndent(outfile, level)
            outfile.write('<%sConvertToUpperCase>%s</%sConvertToUpperCase>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ConvertToUpperCase)), input_name='ConvertToUpperCase'), namespace_))
        if self.RecognizeAlternateCityNames is not None:
            showIndent(outfile, level)
            outfile.write('<%sRecognizeAlternateCityNames>%s</%sRecognizeAlternateCityNames>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.RecognizeAlternateCityNames)), input_name='RecognizeAlternateCityNames'), namespace_))
        if self.ReturnParsedElements is not None:
            showIndent(outfile, level)
            outfile.write('<%sReturnParsedElements>%s</%sReturnParsedElements>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ReturnParsedElements)), input_name='ReturnParsedElements'), namespace_))
    def hasContent_(self):
        if (
            self.VerifyAddresses is not None or
            self.CheckResidentialStatus is not None or
            self.MaximumNumberOfMatches is not None or
            self.StreetAccuracy is not None or
            self.DirectionalAccuracy is not None or
            self.CompanyNameAccuracy is not None or
            self.ConvertToUpperCase is not None or
            self.RecognizeAlternateCityNames is not None or
            self.ReturnParsedElements is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressValidationOptions'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.VerifyAddresses is not None:
            showIndent(outfile, level)
            outfile.write('VerifyAddresses=%s,\n' % self.VerifyAddresses)
        if self.CheckResidentialStatus is not None:
            showIndent(outfile, level)
            outfile.write('CheckResidentialStatus=%s,\n' % self.CheckResidentialStatus)
        if self.MaximumNumberOfMatches is not None:
            showIndent(outfile, level)
            outfile.write('MaximumNumberOfMatches=%d,\n' % self.MaximumNumberOfMatches)
        if self.StreetAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('StreetAccuracy=%s,\n' % quote_python(self.StreetAccuracy).encode(ExternalEncoding))
        if self.DirectionalAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('DirectionalAccuracy=%s,\n' % quote_python(self.DirectionalAccuracy).encode(ExternalEncoding))
        if self.CompanyNameAccuracy is not None:
            showIndent(outfile, level)
            outfile.write('CompanyNameAccuracy=%s,\n' % quote_python(self.CompanyNameAccuracy).encode(ExternalEncoding))
        if self.ConvertToUpperCase is not None:
            showIndent(outfile, level)
            outfile.write('ConvertToUpperCase=%s,\n' % self.ConvertToUpperCase)
        if self.RecognizeAlternateCityNames is not None:
            showIndent(outfile, level)
            outfile.write('RecognizeAlternateCityNames=%s,\n' % self.RecognizeAlternateCityNames)
        if self.ReturnParsedElements is not None:
            showIndent(outfile, level)
            outfile.write('ReturnParsedElements=%s,\n' % self.ReturnParsedElements)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'VerifyAddresses':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'VerifyAddresses')
            self.VerifyAddresses = ival_
        elif nodeName_ == 'CheckResidentialStatus':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'CheckResidentialStatus')
            self.CheckResidentialStatus = ival_
        elif nodeName_ == 'MaximumNumberOfMatches':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'MaximumNumberOfMatches')
            self.MaximumNumberOfMatches = ival_
        elif nodeName_ == 'StreetAccuracy':
            StreetAccuracy_ = child_.text
            StreetAccuracy_ = self.gds_validate_string(StreetAccuracy_, node, 'StreetAccuracy')
            self.StreetAccuracy = StreetAccuracy_
            self.validate_AddressValidationAccuracyType(self.StreetAccuracy)    # validate type AddressValidationAccuracyType
        elif nodeName_ == 'DirectionalAccuracy':
            DirectionalAccuracy_ = child_.text
            DirectionalAccuracy_ = self.gds_validate_string(DirectionalAccuracy_, node, 'DirectionalAccuracy')
            self.DirectionalAccuracy = DirectionalAccuracy_
            self.validate_AddressValidationAccuracyType(self.DirectionalAccuracy)    # validate type AddressValidationAccuracyType
        elif nodeName_ == 'CompanyNameAccuracy':
            CompanyNameAccuracy_ = child_.text
            CompanyNameAccuracy_ = self.gds_validate_string(CompanyNameAccuracy_, node, 'CompanyNameAccuracy')
            self.CompanyNameAccuracy = CompanyNameAccuracy_
            self.validate_AddressValidationAccuracyType(self.CompanyNameAccuracy)    # validate type AddressValidationAccuracyType
        elif nodeName_ == 'ConvertToUpperCase':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ConvertToUpperCase')
            self.ConvertToUpperCase = ival_
        elif nodeName_ == 'RecognizeAlternateCityNames':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'RecognizeAlternateCityNames')
            self.RecognizeAlternateCityNames = ival_
        elif nodeName_ == 'ReturnParsedElements':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ReturnParsedElements')
            self.ReturnParsedElements = ival_
# end class AddressValidationOptions


class MaximumNumberOfMatches(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MaximumNumberOfMatches.subclass:
            return MaximumNumberOfMatches.subclass(*args_, **kwargs_)
        else:
            return MaximumNumberOfMatches(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='ns:', name_='MaximumNumberOfMatches', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaximumNumberOfMatches')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='MaximumNumberOfMatches'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='MaximumNumberOfMatches', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MaximumNumberOfMatches'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MaximumNumberOfMatches


class AddressToValidate(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressId=None, CompanyName=None, Address=None):
        self.AddressId = AddressId
        self.CompanyName = CompanyName
        self.Address = Address
    def factory(*args_, **kwargs_):
        if AddressToValidate.subclass:
            return AddressToValidate.subclass(*args_, **kwargs_)
        else:
            return AddressToValidate(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressId(self): return self.AddressId
    def set_AddressId(self, AddressId): self.AddressId = AddressId
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='AddressToValidate', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressToValidate')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressToValidate'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressToValidate', fromsubclass_=False):
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressId>%s</%sAddressId>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressId).encode(ExternalEncoding), input_name='AddressId'), namespace_))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address', )
    def hasContent_(self):
        if (
            self.AddressId is not None or
            self.CompanyName is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressToValidate'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('AddressId=%s,\n' % quote_python(self.AddressId).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressId':
            AddressId_ = child_.text
            AddressId_ = self.gds_validate_string(AddressId_, node, 'AddressId')
            self.AddressId = AddressId_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class AddressToValidate


class AddressValidationResult(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressId=None, ProposedAddressDetails=None):
        self.AddressId = AddressId
        if ProposedAddressDetails is None:
            self.ProposedAddressDetails = []
        else:
            self.ProposedAddressDetails = ProposedAddressDetails
    def factory(*args_, **kwargs_):
        if AddressValidationResult.subclass:
            return AddressValidationResult.subclass(*args_, **kwargs_)
        else:
            return AddressValidationResult(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressId(self): return self.AddressId
    def set_AddressId(self, AddressId): self.AddressId = AddressId
    def get_ProposedAddressDetails(self): return self.ProposedAddressDetails
    def set_ProposedAddressDetails(self, ProposedAddressDetails): self.ProposedAddressDetails = ProposedAddressDetails
    def add_ProposedAddressDetails(self, value): self.ProposedAddressDetails.append(value)
    def insert_ProposedAddressDetails(self, index, value): self.ProposedAddressDetails[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='AddressValidationResult', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationResult')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='AddressValidationResult'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='AddressValidationResult', fromsubclass_=False):
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressId>%s</%sAddressId>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressId).encode(ExternalEncoding), input_name='AddressId'), namespace_))
        for ProposedAddressDetails_ in self.ProposedAddressDetails:
            ProposedAddressDetails_.export(outfile, level, namespace_, name_='ProposedAddressDetails')
    def hasContent_(self):
        if (
            self.AddressId is not None or
            self.ProposedAddressDetails
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressValidationResult'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AddressId is not None:
            showIndent(outfile, level)
            outfile.write('AddressId=%s,\n' % quote_python(self.AddressId).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ProposedAddressDetails=[\n')
        level += 1
        for ProposedAddressDetails_ in self.ProposedAddressDetails:
            showIndent(outfile, level)
            outfile.write('model_.ProposedAddressDetail(\n')
            ProposedAddressDetails_.exportLiteral(outfile, level, name_='ProposedAddressDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressId':
            AddressId_ = child_.text
            AddressId_ = self.gds_validate_string(AddressId_, node, 'AddressId')
            self.AddressId = AddressId_
        elif nodeName_ == 'ProposedAddressDetails':
            obj_ = ProposedAddressDetail.factory()
            obj_.build(child_)
            self.ProposedAddressDetails.append(obj_)
# end class AddressValidationResult


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class ProposedAddressDetail(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Score=None, Changes=None, ResidentialStatus=None, DeliveryPointValidation=None, CompanyName=None, Address=None, ParsedCompanyName=None, ParsedAddress=None, RemovedNonAddressData=None):
        self.Score = Score
        if Changes is None:
            self.Changes = []
        else:
            self.Changes = Changes
        self.ResidentialStatus = ResidentialStatus
        self.DeliveryPointValidation = DeliveryPointValidation
        self.CompanyName = CompanyName
        self.Address = Address
        self.ParsedCompanyName = ParsedCompanyName
        self.ParsedAddress = ParsedAddress
        self.RemovedNonAddressData = RemovedNonAddressData
    def factory(*args_, **kwargs_):
        if ProposedAddressDetail.subclass:
            return ProposedAddressDetail.subclass(*args_, **kwargs_)
        else:
            return ProposedAddressDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Score(self): return self.Score
    def set_Score(self, Score): self.Score = Score
    def get_Changes(self): return self.Changes
    def set_Changes(self, Changes): self.Changes = Changes
    def add_Changes(self, value): self.Changes.append(value)
    def insert_Changes(self, index, value): self.Changes[index] = value
    def validate_AddressValidationChangeType(self, value):
        # Validate type AddressValidationChangeType, a restriction on xs:string.
        pass
    def get_ResidentialStatus(self): return self.ResidentialStatus
    def set_ResidentialStatus(self, ResidentialStatus): self.ResidentialStatus = ResidentialStatus
    def validate_ResidentialStatusType(self, value):
        # Validate type ResidentialStatusType, a restriction on xs:string.
        pass
    def get_DeliveryPointValidation(self): return self.DeliveryPointValidation
    def set_DeliveryPointValidation(self, DeliveryPointValidation): self.DeliveryPointValidation = DeliveryPointValidation
    def validate_DeliveryPointValidationType(self, value):
        # Validate type DeliveryPointValidationType, a restriction on xs:string.
        pass
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ParsedCompanyName(self): return self.ParsedCompanyName
    def set_ParsedCompanyName(self, ParsedCompanyName): self.ParsedCompanyName = ParsedCompanyName
    def get_ParsedAddress(self): return self.ParsedAddress
    def set_ParsedAddress(self, ParsedAddress): self.ParsedAddress = ParsedAddress
    def get_RemovedNonAddressData(self): return self.RemovedNonAddressData
    def set_RemovedNonAddressData(self, RemovedNonAddressData): self.RemovedNonAddressData = RemovedNonAddressData
    def export(self, outfile, level, namespace_='ns:', name_='ProposedAddressDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProposedAddressDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ProposedAddressDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ProposedAddressDetail', fromsubclass_=False):
        if self.Score is not None:
            showIndent(outfile, level)
            outfile.write('<%sScore>%s</%sScore>\n' % (namespace_, self.gds_format_integer(self.Score, input_name='Score'), namespace_))
        for Changes_ in self.Changes:
            showIndent(outfile, level)
            outfile.write('<%sChanges>%s</%sChanges>\n' % (namespace_, self.gds_format_string(quote_xml(Changes_).encode(ExternalEncoding), input_name='Changes'), namespace_))
        if self.ResidentialStatus is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidentialStatus>%s</%sResidentialStatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.ResidentialStatus).encode(ExternalEncoding), input_name='ResidentialStatus'), namespace_))
        if self.DeliveryPointValidation is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliveryPointValidation>%s</%sDeliveryPointValidation>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliveryPointValidation).encode(ExternalEncoding), input_name='DeliveryPointValidation'), namespace_))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address', )
        if self.ParsedCompanyName:
            self.ParsedCompanyName.export(outfile, level, namespace_, name_='ParsedCompanyName')
        if self.ParsedAddress:
            self.ParsedAddress.export(outfile, level, namespace_, name_='ParsedAddress')
        if self.RemovedNonAddressData is not None:
            showIndent(outfile, level)
            outfile.write('<%sRemovedNonAddressData>%s</%sRemovedNonAddressData>\n' % (namespace_, self.gds_format_string(quote_xml(self.RemovedNonAddressData).encode(ExternalEncoding), input_name='RemovedNonAddressData'), namespace_))
    def hasContent_(self):
        if (
            self.Score is not None or
            self.Changes or
            self.ResidentialStatus is not None or
            self.DeliveryPointValidation is not None or
            self.CompanyName is not None or
            self.Address is not None or
            self.ParsedCompanyName is not None or
            self.ParsedAddress is not None or
            self.RemovedNonAddressData is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ProposedAddressDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Score is not None:
            showIndent(outfile, level)
            outfile.write('Score=%d,\n' % self.Score)
        showIndent(outfile, level)
        outfile.write('Changes=[\n')
        level += 1
        for Changes_ in self.Changes:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Changes_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ResidentialStatus is not None:
            showIndent(outfile, level)
            outfile.write('ResidentialStatus=%s,\n' % quote_python(self.ResidentialStatus).encode(ExternalEncoding))
        if self.DeliveryPointValidation is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryPointValidation=%s,\n' % quote_python(self.DeliveryPointValidation).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParsedCompanyName is not None:
            showIndent(outfile, level)
            outfile.write('ParsedCompanyName=model_.ParsedAddressPart(\n')
            self.ParsedCompanyName.exportLiteral(outfile, level, name_='ParsedCompanyName')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParsedAddress is not None:
            showIndent(outfile, level)
            outfile.write('ParsedAddress=model_.ParsedAddress(\n')
            self.ParsedAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RemovedNonAddressData is not None:
            showIndent(outfile, level)
            outfile.write('RemovedNonAddressData=%s,\n' % quote_python(self.RemovedNonAddressData).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Score':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Score')
            self.Score = ival_
        elif nodeName_ == 'Changes':
            Changes_ = child_.text
            Changes_ = self.gds_validate_string(Changes_, node, 'Changes')
            self.Changes.append(Changes_)
            self.validate_AddressValidationChangeType(self.Changes)    # validate type AddressValidationChangeType
        elif nodeName_ == 'ResidentialStatus':
            ResidentialStatus_ = child_.text
            ResidentialStatus_ = self.gds_validate_string(ResidentialStatus_, node, 'ResidentialStatus')
            self.ResidentialStatus = ResidentialStatus_
            self.validate_ResidentialStatusType(self.ResidentialStatus)    # validate type ResidentialStatusType
        elif nodeName_ == 'DeliveryPointValidation':
            DeliveryPointValidation_ = child_.text
            DeliveryPointValidation_ = self.gds_validate_string(DeliveryPointValidation_, node, 'DeliveryPointValidation')
            self.DeliveryPointValidation = DeliveryPointValidation_
            self.validate_DeliveryPointValidationType(self.DeliveryPointValidation)    # validate type DeliveryPointValidationType
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
        elif nodeName_ == 'ParsedCompanyName':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedCompanyName(obj_)
        elif nodeName_ == 'ParsedAddress':
            obj_ = ParsedAddress.factory()
            obj_.build(child_)
            self.set_ParsedAddress(obj_)
        elif nodeName_ == 'RemovedNonAddressData':
            RemovedNonAddressData_ = child_.text
            RemovedNonAddressData_ = self.gds_validate_string(RemovedNonAddressData_, node, 'RemovedNonAddressData')
            self.RemovedNonAddressData = RemovedNonAddressData_
# end class ProposedAddressDetail


class ParsedAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ParsedUrbanizationCode=None, ParsedStreetLine=None, ParsedCity=None, ParsedStateOrProvinceCode=None, ParsedPostalCode=None, ParsedCountryCode=None):
        self.ParsedUrbanizationCode = ParsedUrbanizationCode
        if ParsedStreetLine is None:
            self.ParsedStreetLine = []
        else:
            self.ParsedStreetLine = ParsedStreetLine
        self.ParsedCity = ParsedCity
        self.ParsedStateOrProvinceCode = ParsedStateOrProvinceCode
        self.ParsedPostalCode = ParsedPostalCode
        self.ParsedCountryCode = ParsedCountryCode
    def factory(*args_, **kwargs_):
        if ParsedAddress.subclass:
            return ParsedAddress.subclass(*args_, **kwargs_)
        else:
            return ParsedAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ParsedUrbanizationCode(self): return self.ParsedUrbanizationCode
    def set_ParsedUrbanizationCode(self, ParsedUrbanizationCode): self.ParsedUrbanizationCode = ParsedUrbanizationCode
    def get_ParsedStreetLine(self): return self.ParsedStreetLine
    def set_ParsedStreetLine(self, ParsedStreetLine): self.ParsedStreetLine = ParsedStreetLine
    def add_ParsedStreetLine(self, value): self.ParsedStreetLine.append(value)
    def insert_ParsedStreetLine(self, index, value): self.ParsedStreetLine[index] = value
    def get_ParsedCity(self): return self.ParsedCity
    def set_ParsedCity(self, ParsedCity): self.ParsedCity = ParsedCity
    def get_ParsedStateOrProvinceCode(self): return self.ParsedStateOrProvinceCode
    def set_ParsedStateOrProvinceCode(self, ParsedStateOrProvinceCode): self.ParsedStateOrProvinceCode = ParsedStateOrProvinceCode
    def get_ParsedPostalCode(self): return self.ParsedPostalCode
    def set_ParsedPostalCode(self, ParsedPostalCode): self.ParsedPostalCode = ParsedPostalCode
    def get_ParsedCountryCode(self): return self.ParsedCountryCode
    def set_ParsedCountryCode(self, ParsedCountryCode): self.ParsedCountryCode = ParsedCountryCode
    def export(self, outfile, level, namespace_='ns:', name_='ParsedAddress', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedAddress')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedAddress', fromsubclass_=False):
        if self.ParsedUrbanizationCode:
            self.ParsedUrbanizationCode.export(outfile, level, namespace_, name_='ParsedUrbanizationCode')
        for ParsedStreetLine_ in self.ParsedStreetLine:
            ParsedStreetLine_.export(outfile, level, namespace_, name_='ParsedStreetLine')
        if self.ParsedCity:
            self.ParsedCity.export(outfile, level, namespace_, name_='ParsedCity')
        if self.ParsedStateOrProvinceCode:
            self.ParsedStateOrProvinceCode.export(outfile, level, namespace_, name_='ParsedStateOrProvinceCode')
        if self.ParsedPostalCode:
            self.ParsedPostalCode.export(outfile, level, namespace_, name_='ParsedPostalCode')
        if self.ParsedCountryCode:
            self.ParsedCountryCode.export(outfile, level, namespace_, name_='ParsedCountryCode')
    def hasContent_(self):
        if (
            self.ParsedUrbanizationCode is not None or
            self.ParsedStreetLine or
            self.ParsedCity is not None or
            self.ParsedStateOrProvinceCode is not None or
            self.ParsedPostalCode is not None or
            self.ParsedCountryCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ParsedUrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('ParsedUrbanizationCode=model_.ParsedAddressPart(\n')
            self.ParsedUrbanizationCode.exportLiteral(outfile, level, name_='ParsedUrbanizationCode')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ParsedStreetLine=[\n')
        level += 1
        for ParsedStreetLine_ in self.ParsedStreetLine:
            showIndent(outfile, level)
            outfile.write('model_.ParsedAddressPart(\n')
            ParsedStreetLine_.exportLiteral(outfile, level, name_='ParsedAddressPart')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ParsedCity is not None:
            showIndent(outfile, level)
            outfile.write('ParsedCity=model_.ParsedAddressPart(\n')
            self.ParsedCity.exportLiteral(outfile, level, name_='ParsedCity')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParsedStateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('ParsedStateOrProvinceCode=model_.ParsedAddressPart(\n')
            self.ParsedStateOrProvinceCode.exportLiteral(outfile, level, name_='ParsedStateOrProvinceCode')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParsedPostalCode is not None:
            showIndent(outfile, level)
            outfile.write('ParsedPostalCode=model_.ParsedAddressPart(\n')
            self.ParsedPostalCode.exportLiteral(outfile, level, name_='ParsedPostalCode')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParsedCountryCode is not None:
            showIndent(outfile, level)
            outfile.write('ParsedCountryCode=model_.ParsedAddressPart(\n')
            self.ParsedCountryCode.exportLiteral(outfile, level, name_='ParsedCountryCode')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ParsedUrbanizationCode':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedUrbanizationCode(obj_)
        elif nodeName_ == 'ParsedStreetLine':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.ParsedStreetLine.append(obj_)
        elif nodeName_ == 'ParsedCity':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedCity(obj_)
        elif nodeName_ == 'ParsedStateOrProvinceCode':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedStateOrProvinceCode(obj_)
        elif nodeName_ == 'ParsedPostalCode':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedPostalCode(obj_)
        elif nodeName_ == 'ParsedCountryCode':
            obj_ = ParsedAddressPart.factory()
            obj_.build(child_)
            self.set_ParsedCountryCode(obj_)
# end class ParsedAddress


class ParsedAddressPart(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Elements=None):
        if Elements is None:
            self.Elements = []
        else:
            self.Elements = Elements
    def factory(*args_, **kwargs_):
        if ParsedAddressPart.subclass:
            return ParsedAddressPart.subclass(*args_, **kwargs_)
        else:
            return ParsedAddressPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Elements(self): return self.Elements
    def set_Elements(self, Elements): self.Elements = Elements
    def add_Elements(self, value): self.Elements.append(value)
    def insert_Elements(self, index, value): self.Elements[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='ParsedAddressPart', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedAddressPart')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedAddressPart'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedAddressPart', fromsubclass_=False):
        for Elements_ in self.Elements:
            Elements_.export(outfile, level, namespace_, name_='Elements')
    def hasContent_(self):
        if (
            self.Elements
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedAddressPart'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Elements=[\n')
        level += 1
        for Elements_ in self.Elements:
            showIndent(outfile, level)
            outfile.write('model_.ParsedElement(\n')
            Elements_.exportLiteral(outfile, level, name_='ParsedElement')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Elements':
            obj_ = ParsedElement.factory()
            obj_.build(child_)
            self.Elements.append(obj_)
# end class ParsedAddressPart


class ParsedElement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Value=None, Changes=None):
        self.Name = Name
        self.Value = Value
        if Changes is None:
            self.Changes = []
        else:
            self.Changes = Changes
    def factory(*args_, **kwargs_):
        if ParsedElement.subclass:
            return ParsedElement.subclass(*args_, **kwargs_)
        else:
            return ParsedElement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Changes(self): return self.Changes
    def set_Changes(self, Changes): self.Changes = Changes
    def add_Changes(self, value): self.Changes.append(value)
    def insert_Changes(self, index, value): self.Changes[index] = value
    def validate_AddressValidationChangeType(self, value):
        # Validate type AddressValidationChangeType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='ParsedElement', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParsedElement')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ParsedElement'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ParsedElement', fromsubclass_=False):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('<%sName>%s</%sName>\n' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
        for Changes_ in self.Changes:
            showIndent(outfile, level)
            outfile.write('<%sChanges>%s</%sChanges>\n' % (namespace_, self.gds_format_string(quote_xml(Changes_).encode(ExternalEncoding), input_name='Changes'), namespace_))
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Value is not None or
            self.Changes
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParsedElement'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Changes=[\n')
        level += 1
        for Changes_ in self.Changes:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Changes_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'Changes':
            Changes_ = child_.text
            Changes_ = self.gds_validate_string(Changes_, node, 'Changes')
            self.Changes.append(Changes_)
            self.validate_AddressValidationChangeType(self.Changes)    # validate type AddressValidationChangeType
# end class ParsedElement


class ClientDetail(GeneratedsSuper):
    """The descriptive data identifying the client submitting the
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class Localization(GeneratedsSuper):
    """Governs any future language/translations used for human-readable
    text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class TransactionDetail(GeneratedsSuper):
    """Descriptive data for this customer transaction. The
    TransactionDetail from the request is echoed back to the caller
    in the corresponding reply."""
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


class Notification(GeneratedsSuper):
    """The descriptive data regarding the results of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class Address(GeneratedsSuper):
    """The descriptive data for a physical location."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, Residential=None):
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.Residential = Residential
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False):
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('<%sStreetLines>%s</%sStreetLines>\n' % (namespace_, self.gds_format_string(quote_xml(StreetLines_).encode(ExternalEncoding), input_name='StreetLines'), namespace_))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('<%sCity>%s</%sCity>\n' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateOrProvinceCode).encode(ExternalEncoding), input_name='StateOrProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.UrbanizationCode).encode(ExternalEncoding), input_name='UrbanizationCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidential>%s</%sResidential>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Residential)), input_name='Residential'), namespace_))
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.Residential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('StreetLines=[\n')
        level += 1
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(StreetLines_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateOrProvinceCode=%s,\n' % quote_python(self.StateOrProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('UrbanizationCode=%s,\n' % quote_python(self.UrbanizationCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('Residential=%s,\n' % self.Residential)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
# end class Address


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="AddressValidationRequest",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from avs import *\n\n')
    sys.stdout.write('import avs as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "AddressToValidate",
    "AddressValidationOptions",
    "AddressValidationReply",
    "AddressValidationRequest",
    "AddressValidationResult",
    "ClientDetail",
    "Localization",
    "MaximumNumberOfMatches",
    "Notification",
    "NotificationParameter",
    "ParsedAddress",
    "ParsedAddressPart",
    "ParsedElement",
    "ProposedAddressDetail",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail"
    ]
