#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Nov 28 15:45:03 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, StreetLines=None, City=None, StateOrProvinceCode=None, PostalCode=None, UrbanizationCode=None, CountryCode=None, Residential=None):
        if StreetLines is None:
            self.StreetLines = []
        else:
            self.StreetLines = StreetLines
        self.City = City
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.UrbanizationCode = UrbanizationCode
        self.CountryCode = CountryCode
        self.Residential = Residential
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StreetLines(self): return self.StreetLines
    def set_StreetLines(self, StreetLines): self.StreetLines = StreetLines
    def add_StreetLines(self, value): self.StreetLines.append(value)
    def insert_StreetLines(self, index, value): self.StreetLines[index] = value
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_UrbanizationCode(self): return self.UrbanizationCode
    def set_UrbanizationCode(self, UrbanizationCode): self.UrbanizationCode = UrbanizationCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_Residential(self): return self.Residential
    def set_Residential(self, Residential): self.Residential = Residential
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False):
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('<%sStreetLines>%s</%sStreetLines>\n' % (namespace_, self.gds_format_string(quote_xml(StreetLines_).encode(ExternalEncoding), input_name='StreetLines'), namespace_))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('<%sCity>%s</%sCity>\n' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateOrProvinceCode).encode(ExternalEncoding), input_name='StateOrProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sUrbanizationCode>%s</%sUrbanizationCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.UrbanizationCode).encode(ExternalEncoding), input_name='UrbanizationCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidential>%s</%sResidential>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.Residential)), input_name='Residential'), namespace_))
    def hasContent_(self):
        if (
            self.StreetLines or
            self.City is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.UrbanizationCode is not None or
            self.CountryCode is not None or
            self.Residential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('StreetLines=[\n')
        level += 1
        for StreetLines_ in self.StreetLines:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(StreetLines_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateOrProvinceCode=%s,\n' % quote_python(self.StateOrProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.UrbanizationCode is not None:
            showIndent(outfile, level)
            outfile.write('UrbanizationCode=%s,\n' % quote_python(self.UrbanizationCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        if self.Residential is not None:
            showIndent(outfile, level)
            outfile.write('Residential=%s,\n' % self.Residential)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StreetLines':
            StreetLines_ = child_.text
            StreetLines_ = self.gds_validate_string(StreetLines_, node, 'StreetLines')
            self.StreetLines.append(StreetLines_)
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'UrbanizationCode':
            UrbanizationCode_ = child_.text
            UrbanizationCode_ = self.gds_validate_string(UrbanizationCode_, node, 'UrbanizationCode')
            self.UrbanizationCode = UrbanizationCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'Residential':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Residential')
            self.Residential = ival_
# end class Address


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, IntegratorId=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.IntegratorId = IntegratorId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_IntegratorId(self): return self.IntegratorId
    def set_IntegratorId(self, IntegratorId): self.IntegratorId = IntegratorId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntegratorId>%s</%sIntegratorId>\n' % (namespace_, self.gds_format_string(quote_xml(self.IntegratorId).encode(ExternalEncoding), input_name='IntegratorId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.IntegratorId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.IntegratorId is not None:
            showIndent(outfile, level)
            outfile.write('IntegratorId=%s,\n' % quote_python(self.IntegratorId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'IntegratorId':
            IntegratorId_ = child_.text
            IntegratorId_ = self.gds_validate_string(IntegratorId_, node, 'IntegratorId')
            self.IntegratorId = IntegratorId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class Contact(GeneratedsSuper):
    """The descriptive data for a point-of-contact person."""
    subclass = None
    superclass = None
    def __init__(self, PersonName=None, Title=None, CompanyName=None, PhoneNumber=None, PhoneExtension=None, PagerNumber=None, FaxNumber=None, EMailAddress=None):
        self.PersonName = PersonName
        self.Title = Title
        self.CompanyName = CompanyName
        self.PhoneNumber = PhoneNumber
        self.PhoneExtension = PhoneExtension
        self.PagerNumber = PagerNumber
        self.FaxNumber = FaxNumber
        self.EMailAddress = EMailAddress
    def factory(*args_, **kwargs_):
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonName(self): return self.PersonName
    def set_PersonName(self, PersonName): self.PersonName = PersonName
    def get_Title(self): return self.Title
    def set_Title(self, Title): self.Title = Title
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def get_PagerNumber(self): return self.PagerNumber
    def set_PagerNumber(self, PagerNumber): self.PagerNumber = PagerNumber
    def get_FaxNumber(self): return self.FaxNumber
    def set_FaxNumber(self, FaxNumber): self.FaxNumber = FaxNumber
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def export(self, outfile, level, namespace_='ns:', name_='Contact', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Contact', fromsubclass_=False):
        if self.PersonName is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonName>%s</%sPersonName>\n' % (namespace_, self.gds_format_string(quote_xml(self.PersonName).encode(ExternalEncoding), input_name='PersonName'), namespace_))
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('<%sTitle>%s</%sTitle>\n' % (namespace_, self.gds_format_string(quote_xml(self.Title).encode(ExternalEncoding), input_name='Title'), namespace_))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneNumber>%s</%sPhoneNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneNumber).encode(ExternalEncoding), input_name='PhoneNumber'), namespace_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneExtension).encode(ExternalEncoding), input_name='PhoneExtension'), namespace_))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagerNumber>%s</%sPagerNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagerNumber).encode(ExternalEncoding), input_name='PagerNumber'), namespace_))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaxNumber>%s</%sFaxNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.FaxNumber).encode(ExternalEncoding), input_name='FaxNumber'), namespace_))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailAddress).encode(ExternalEncoding), input_name='EMailAddress'), namespace_))
    def hasContent_(self):
        if (
            self.PersonName is not None or
            self.Title is not None or
            self.CompanyName is not None or
            self.PhoneNumber is not None or
            self.PhoneExtension is not None or
            self.PagerNumber is not None or
            self.FaxNumber is not None or
            self.EMailAddress is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Contact'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PersonName is not None:
            showIndent(outfile, level)
            outfile.write('PersonName=%s,\n' % quote_python(self.PersonName).encode(ExternalEncoding))
        if self.Title is not None:
            showIndent(outfile, level)
            outfile.write('Title=%s,\n' % quote_python(self.Title).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=%s,\n' % quote_python(self.PhoneNumber).encode(ExternalEncoding))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('PhoneExtension=%s,\n' % quote_python(self.PhoneExtension).encode(ExternalEncoding))
        if self.PagerNumber is not None:
            showIndent(outfile, level)
            outfile.write('PagerNumber=%s,\n' % quote_python(self.PagerNumber).encode(ExternalEncoding))
        if self.FaxNumber is not None:
            showIndent(outfile, level)
            outfile.write('FaxNumber=%s,\n' % quote_python(self.FaxNumber).encode(ExternalEncoding))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('EMailAddress=%s,\n' % quote_python(self.EMailAddress).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonName':
            PersonName_ = child_.text
            PersonName_ = self.gds_validate_string(PersonName_, node, 'PersonName')
            self.PersonName = PersonName_
        elif nodeName_ == 'Title':
            Title_ = child_.text
            Title_ = self.gds_validate_string(Title_, node, 'Title')
            self.Title = Title_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'PhoneNumber':
            PhoneNumber_ = child_.text
            PhoneNumber_ = self.gds_validate_string(PhoneNumber_, node, 'PhoneNumber')
            self.PhoneNumber = PhoneNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
        elif nodeName_ == 'PagerNumber':
            PagerNumber_ = child_.text
            PagerNumber_ = self.gds_validate_string(PagerNumber_, node, 'PagerNumber')
            self.PagerNumber = PagerNumber_
        elif nodeName_ == 'FaxNumber':
            FaxNumber_ = child_.text
            FaxNumber_ = self.gds_validate_string(FaxNumber_, node, 'FaxNumber')
            self.FaxNumber = FaxNumber_
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
# end class Contact


class ContactAndAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Contact=None, Address=None):
        self.Contact = Contact
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ContactAndAddress.subclass:
            return ContactAndAddress.subclass(*args_, **kwargs_)
        else:
            return ContactAndAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactAndAddress')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ContactAndAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ContactAndAddress', fromsubclass_=False):
        if self.Contact:
            self.Contact.export(outfile, level, namespace_, name_='Contact', )
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address')
    def hasContent_(self):
        if (
            self.Contact is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactAndAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=model_.Contact(\n')
            self.Contact.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Contact':
            obj_ = Contact.factory()
            obj_.build(child_)
            self.set_Contact(obj_)
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ContactAndAddress


class Dimensions(GeneratedsSuper):
    """The dimensions of this package and the unit type used for the
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Length=None, Width=None, Height=None, Units=None):
        self.Length = Length
        self.Width = Width
        self.Height = Height
        self.Units = Units
    def factory(*args_, **kwargs_):
        if Dimensions.subclass:
            return Dimensions.subclass(*args_, **kwargs_)
        else:
            return Dimensions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_LinearUnits(self, value):
        # Validate type LinearUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='Dimensions', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dimensions')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Dimensions'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Dimensions', fromsubclass_=False):
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('<%sLength>%s</%sLength>\n' % (namespace_, self.gds_format_integer(self.Length, input_name='Length'), namespace_))
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('<%sWidth>%s</%sWidth>\n' % (namespace_, self.gds_format_integer(self.Width, input_name='Width'), namespace_))
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('<%sHeight>%s</%sHeight>\n' % (namespace_, self.gds_format_integer(self.Height, input_name='Height'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Length is not None or
            self.Width is not None or
            self.Height is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Dimensions'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('Length=%d,\n' % self.Length)
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('Width=%d,\n' % self.Width)
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('Height=%d,\n' % self.Height)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Length':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Length')
            self.Length = ival_
        elif nodeName_ == 'Width':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Width')
            self.Width = ival_
        elif nodeName_ == 'Height':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_LinearUnits(self.Units)    # validate type LinearUnits
# end class Dimensions


class Distance(GeneratedsSuper):
    """Driving or other transportation distances, distinct from dimension
    measurements."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Units=None):
        self.Value = Value
        self.Units = Units
    def factory(*args_, **kwargs_):
        if Distance.subclass:
            return Distance.subclass(*args_, **kwargs_)
        else:
            return Distance(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_DistanceUnits(self, value):
        # Validate type DistanceUnits, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='Distance', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Distance')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Distance'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Distance', fromsubclass_=False):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Units is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Distance'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
        elif nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_DistanceUnits(self.Units)    # validate type DistanceUnits
# end class Distance


class EMailNotificationDetail(GeneratedsSuper):
    """Information describing email notifications that will be sent in
    relation to events that occur during package movement"""
    subclass = None
    superclass = None
    def __init__(self, PersonalMessage=None, Recipients=None):
        self.PersonalMessage = PersonalMessage
        if Recipients is None:
            self.Recipients = []
        else:
            self.Recipients = Recipients
    def factory(*args_, **kwargs_):
        if EMailNotificationDetail.subclass:
            return EMailNotificationDetail.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PersonalMessage(self): return self.PersonalMessage
    def set_PersonalMessage(self, PersonalMessage): self.PersonalMessage = PersonalMessage
    def get_Recipients(self): return self.Recipients
    def set_Recipients(self, Recipients): self.Recipients = Recipients
    def add_Recipients(self, value): self.Recipients.append(value)
    def insert_Recipients(self, index, value): self.Recipients[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='EMailNotificationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailNotificationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailNotificationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailNotificationDetail', fromsubclass_=False):
        if self.PersonalMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sPersonalMessage>%s</%sPersonalMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.PersonalMessage).encode(ExternalEncoding), input_name='PersonalMessage'), namespace_))
        for Recipients_ in self.Recipients:
            Recipients_.export(outfile, level, namespace_, name_='Recipients')
    def hasContent_(self):
        if (
            self.PersonalMessage is not None or
            self.Recipients
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EMailNotificationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PersonalMessage is not None:
            showIndent(outfile, level)
            outfile.write('PersonalMessage=%s,\n' % quote_python(self.PersonalMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Recipients=[\n')
        level += 1
        for Recipients_ in self.Recipients:
            showIndent(outfile, level)
            outfile.write('model_.EMailNotificationRecipient(\n')
            Recipients_.exportLiteral(outfile, level, name_='EMailNotificationRecipient')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PersonalMessage':
            PersonalMessage_ = child_.text
            PersonalMessage_ = self.gds_validate_string(PersonalMessage_, node, 'PersonalMessage')
            self.PersonalMessage = PersonalMessage_
        elif nodeName_ == 'Recipients':
            obj_ = EMailNotificationRecipient.factory()
            obj_.build(child_)
            self.Recipients.append(obj_)
# end class EMailNotificationDetail


class EMailNotificationRecipient(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, EMailNotificationRecipientType=None, EMailAddress=None, NotificationEventsRequested=None, Format=None, Localization=None):
        self.EMailNotificationRecipientType = EMailNotificationRecipientType
        self.EMailAddress = EMailAddress
        if NotificationEventsRequested is None:
            self.NotificationEventsRequested = []
        else:
            self.NotificationEventsRequested = NotificationEventsRequested
        self.Format = Format
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if EMailNotificationRecipient.subclass:
            return EMailNotificationRecipient.subclass(*args_, **kwargs_)
        else:
            return EMailNotificationRecipient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_EMailNotificationRecipientType(self): return self.EMailNotificationRecipientType
    def set_EMailNotificationRecipientType(self, EMailNotificationRecipientType): self.EMailNotificationRecipientType = EMailNotificationRecipientType
    def validate_EMailNotificationRecipientType(self, value):
        # Validate type EMailNotificationRecipientType, a restriction on xs:string.
        pass
    def get_EMailAddress(self): return self.EMailAddress
    def set_EMailAddress(self, EMailAddress): self.EMailAddress = EMailAddress
    def get_NotificationEventsRequested(self): return self.NotificationEventsRequested
    def set_NotificationEventsRequested(self, NotificationEventsRequested): self.NotificationEventsRequested = NotificationEventsRequested
    def add_NotificationEventsRequested(self, value): self.NotificationEventsRequested.append(value)
    def insert_NotificationEventsRequested(self, index, value): self.NotificationEventsRequested[index] = value
    def validate_EMailNotificationEventType(self, value):
        # Validate type EMailNotificationEventType, a restriction on xs:string.
        pass
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def validate_EMailNotificationFormatType(self, value):
        # Validate type EMailNotificationFormatType, a restriction on xs:string.
        pass
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='EMailNotificationRecipient', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EMailNotificationRecipient')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='EMailNotificationRecipient'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='EMailNotificationRecipient', fromsubclass_=False):
        if self.EMailNotificationRecipientType is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailNotificationRecipientType>%s</%sEMailNotificationRecipientType>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailNotificationRecipientType).encode(ExternalEncoding), input_name='EMailNotificationRecipientType'), namespace_))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sEMailAddress>%s</%sEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.EMailAddress).encode(ExternalEncoding), input_name='EMailAddress'), namespace_))
        for NotificationEventsRequested_ in self.NotificationEventsRequested:
            showIndent(outfile, level)
            outfile.write('<%sNotificationEventsRequested>%s</%sNotificationEventsRequested>\n' % (namespace_, self.gds_format_string(quote_xml(NotificationEventsRequested_).encode(ExternalEncoding), input_name='NotificationEventsRequested'), namespace_))
        if self.Format is not None:
            showIndent(outfile, level)
            outfile.write('<%sFormat>%s</%sFormat>\n' % (namespace_, self.gds_format_string(quote_xml(self.Format).encode(ExternalEncoding), input_name='Format'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.EMailNotificationRecipientType is not None or
            self.EMailAddress is not None or
            self.NotificationEventsRequested or
            self.Format is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EMailNotificationRecipient'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.EMailNotificationRecipientType is not None:
            showIndent(outfile, level)
            outfile.write('EMailNotificationRecipientType=%s,\n' % quote_python(self.EMailNotificationRecipientType).encode(ExternalEncoding))
        if self.EMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('EMailAddress=%s,\n' % quote_python(self.EMailAddress).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('NotificationEventsRequested=[\n')
        level += 1
        for NotificationEventsRequested_ in self.NotificationEventsRequested:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(NotificationEventsRequested_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Format is not None:
            showIndent(outfile, level)
            outfile.write('Format=%s,\n' % quote_python(self.Format).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'EMailNotificationRecipientType':
            EMailNotificationRecipientType_ = child_.text
            EMailNotificationRecipientType_ = self.gds_validate_string(EMailNotificationRecipientType_, node, 'EMailNotificationRecipientType')
            self.EMailNotificationRecipientType = EMailNotificationRecipientType_
            self.validate_EMailNotificationRecipientType(self.EMailNotificationRecipientType)    # validate type EMailNotificationRecipientType
        elif nodeName_ == 'EMailAddress':
            EMailAddress_ = child_.text
            EMailAddress_ = self.gds_validate_string(EMailAddress_, node, 'EMailAddress')
            self.EMailAddress = EMailAddress_
        elif nodeName_ == 'NotificationEventsRequested':
            NotificationEventsRequested_ = child_.text
            NotificationEventsRequested_ = self.gds_validate_string(NotificationEventsRequested_, node, 'NotificationEventsRequested')
            self.NotificationEventsRequested.append(NotificationEventsRequested_)
            self.validate_EMailNotificationEventType(self.NotificationEventsRequested)    # validate type EMailNotificationEventType
        elif nodeName_ == 'Format':
            Format_ = child_.text
            Format_ = self.gds_validate_string(Format_, node, 'Format')
            self.Format = Format_
            self.validate_EMailNotificationFormatType(self.Format)    # validate type EMailNotificationFormatType
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class EMailNotificationRecipient


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class QualifiedTrackingNumber(GeneratedsSuper):
    """Tracking number and additional shipment data used to identify a
    unique shipment for proof of delivery."""
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, ShipDate=None, AccountNumber=None, Carrier=None, Destination=None):
        self.TrackingNumber = TrackingNumber
        self.ShipDate = ShipDate
        self.AccountNumber = AccountNumber
        self.Carrier = Carrier
        self.Destination = Destination
    def factory(*args_, **kwargs_):
        if QualifiedTrackingNumber.subclass:
            return QualifiedTrackingNumber.subclass(*args_, **kwargs_)
        else:
            return QualifiedTrackingNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_Carrier(self): return self.Carrier
    def set_Carrier(self, Carrier): self.Carrier = Carrier
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def export(self, outfile, level, namespace_='ns:', name_='QualifiedTrackingNumber', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QualifiedTrackingNumber')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='QualifiedTrackingNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='QualifiedTrackingNumber', fromsubclass_=False):
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDate>%s</%sShipDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrier>%s</%sCarrier>\n' % (namespace_, self.gds_format_string(quote_xml(self.Carrier).encode(ExternalEncoding), input_name='Carrier'), namespace_))
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.ShipDate is not None or
            self.AccountNumber is not None or
            self.Carrier is not None or
            self.Destination is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QualifiedTrackingNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.Carrier is not None:
            showIndent(outfile, level)
            outfile.write('Carrier=%s,\n' % quote_python(self.Carrier).encode(ExternalEncoding))
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.Address(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'Carrier':
            Carrier_ = child_.text
            Carrier_ = self.gds_validate_string(Carrier_, node, 'Carrier')
            self.Carrier = Carrier_
            self.validate_CarrierCodeType(self.Carrier)    # validate type CarrierCodeType
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
# end class QualifiedTrackingNumber


class SignatureProofOfDeliveryFaxReply(GeneratedsSuper):
    """FedEx Signature Proof Of Delivery Fax reply."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, FaxConfirmationNumber=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.FaxConfirmationNumber = FaxConfirmationNumber
    def factory(*args_, **kwargs_):
        if SignatureProofOfDeliveryFaxReply.subclass:
            return SignatureProofOfDeliveryFaxReply.subclass(*args_, **kwargs_)
        else:
            return SignatureProofOfDeliveryFaxReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_FaxConfirmationNumber(self): return self.FaxConfirmationNumber
    def set_FaxConfirmationNumber(self, FaxConfirmationNumber): self.FaxConfirmationNumber = FaxConfirmationNumber
    def export(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryFaxReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureProofOfDeliveryFaxReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SignatureProofOfDeliveryFaxReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryFaxReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.FaxConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sFaxConfirmationNumber>%s</%sFaxConfirmationNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.FaxConfirmationNumber).encode(ExternalEncoding), input_name='FaxConfirmationNumber'), namespace_))
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.FaxConfirmationNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureProofOfDeliveryFaxReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FaxConfirmationNumber is not None:
            showIndent(outfile, level)
            outfile.write('FaxConfirmationNumber=%s,\n' % quote_python(self.FaxConfirmationNumber).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'FaxConfirmationNumber':
            FaxConfirmationNumber_ = child_.text
            FaxConfirmationNumber_ = self.gds_validate_string(FaxConfirmationNumber_, node, 'FaxConfirmationNumber')
            self.FaxConfirmationNumber = FaxConfirmationNumber_
# end class SignatureProofOfDeliveryFaxReply


class SignatureProofOfDeliveryFaxRequest(GeneratedsSuper):
    """FedEx Signature Proof Of Delivery Fax request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, QualifiedTrackingNumber=None, AdditionalComments=None, FaxSender=None, FaxRecipient=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.QualifiedTrackingNumber = QualifiedTrackingNumber
        self.AdditionalComments = AdditionalComments
        self.FaxSender = FaxSender
        self.FaxRecipient = FaxRecipient
    def factory(*args_, **kwargs_):
        if SignatureProofOfDeliveryFaxRequest.subclass:
            return SignatureProofOfDeliveryFaxRequest.subclass(*args_, **kwargs_)
        else:
            return SignatureProofOfDeliveryFaxRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_QualifiedTrackingNumber(self): return self.QualifiedTrackingNumber
    def set_QualifiedTrackingNumber(self, QualifiedTrackingNumber): self.QualifiedTrackingNumber = QualifiedTrackingNumber
    def get_AdditionalComments(self): return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments): self.AdditionalComments = AdditionalComments
    def get_FaxSender(self): return self.FaxSender
    def set_FaxSender(self, FaxSender): self.FaxSender = FaxSender
    def get_FaxRecipient(self): return self.FaxRecipient
    def set_FaxRecipient(self, FaxRecipient): self.FaxRecipient = FaxRecipient
    def export(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryFaxRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureProofOfDeliveryFaxRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SignatureProofOfDeliveryFaxRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryFaxRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.QualifiedTrackingNumber:
            self.QualifiedTrackingNumber.export(outfile, level, namespace_, name_='QualifiedTrackingNumber')
        if self.AdditionalComments is not None:
            showIndent(outfile, level)
            outfile.write('<%sAdditionalComments>%s</%sAdditionalComments>\n' % (namespace_, self.gds_format_string(quote_xml(self.AdditionalComments).encode(ExternalEncoding), input_name='AdditionalComments'), namespace_))
        if self.FaxSender:
            self.FaxSender.export(outfile, level, namespace_, name_='FaxSender')
        if self.FaxRecipient:
            self.FaxRecipient.export(outfile, level, namespace_, name_='FaxRecipient')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.QualifiedTrackingNumber is not None or
            self.AdditionalComments is not None or
            self.FaxSender is not None or
            self.FaxRecipient is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureProofOfDeliveryFaxRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.QualifiedTrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('QualifiedTrackingNumber=model_.QualifiedTrackingNumber(\n')
            self.QualifiedTrackingNumber.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AdditionalComments is not None:
            showIndent(outfile, level)
            outfile.write('AdditionalComments=%s,\n' % quote_python(self.AdditionalComments).encode(ExternalEncoding))
        if self.FaxSender is not None:
            showIndent(outfile, level)
            outfile.write('FaxSender=model_.ContactAndAddress(\n')
            self.FaxSender.exportLiteral(outfile, level, name_='FaxSender')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FaxRecipient is not None:
            showIndent(outfile, level)
            outfile.write('FaxRecipient=model_.ContactAndAddress(\n')
            self.FaxRecipient.exportLiteral(outfile, level, name_='FaxRecipient')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'QualifiedTrackingNumber':
            obj_ = QualifiedTrackingNumber.factory()
            obj_.build(child_)
            self.set_QualifiedTrackingNumber(obj_)
        elif nodeName_ == 'AdditionalComments':
            AdditionalComments_ = child_.text
            AdditionalComments_ = self.gds_validate_string(AdditionalComments_, node, 'AdditionalComments')
            self.AdditionalComments = AdditionalComments_
        elif nodeName_ == 'FaxSender':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_FaxSender(obj_)
        elif nodeName_ == 'FaxRecipient':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_FaxRecipient(obj_)
# end class SignatureProofOfDeliveryFaxRequest


class SignatureProofOfDeliveryLetterReply(GeneratedsSuper):
    """FedEx Signature Proof Of Delivery Letter reply."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Letter=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.Letter = Letter
    def factory(*args_, **kwargs_):
        if SignatureProofOfDeliveryLetterReply.subclass:
            return SignatureProofOfDeliveryLetterReply.subclass(*args_, **kwargs_)
        else:
            return SignatureProofOfDeliveryLetterReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Letter(self): return self.Letter
    def set_Letter(self, Letter): self.Letter = Letter
    def export(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryLetterReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureProofOfDeliveryLetterReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SignatureProofOfDeliveryLetterReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryLetterReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.Letter:
            self.Letter.export(outfile, level, namespace_, name_='Letter')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Letter is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureProofOfDeliveryLetterReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Letter is not None:
            showIndent(outfile, level)
            outfile.write('Letter=model_.xs_base64Binary(\n')
            self.Letter.exportLiteral(outfile, level, name_='Letter')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'Letter':
            obj_ = xs_base64Binary.factory()
            obj_.build(child_)
            self.set_Letter(obj_)
# end class SignatureProofOfDeliveryLetterReply


class SignatureProofOfDeliveryLetterRequest(GeneratedsSuper):
    """FedEx Signature Proof Of Delivery Letter request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, QualifiedTrackingNumber=None, AdditionalComments=None, LetterFormat=None, Consignee=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.QualifiedTrackingNumber = QualifiedTrackingNumber
        self.AdditionalComments = AdditionalComments
        self.LetterFormat = LetterFormat
        self.Consignee = Consignee
    def factory(*args_, **kwargs_):
        if SignatureProofOfDeliveryLetterRequest.subclass:
            return SignatureProofOfDeliveryLetterRequest.subclass(*args_, **kwargs_)
        else:
            return SignatureProofOfDeliveryLetterRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_QualifiedTrackingNumber(self): return self.QualifiedTrackingNumber
    def set_QualifiedTrackingNumber(self, QualifiedTrackingNumber): self.QualifiedTrackingNumber = QualifiedTrackingNumber
    def get_AdditionalComments(self): return self.AdditionalComments
    def set_AdditionalComments(self, AdditionalComments): self.AdditionalComments = AdditionalComments
    def get_LetterFormat(self): return self.LetterFormat
    def set_LetterFormat(self, LetterFormat): self.LetterFormat = LetterFormat
    def validate_SignatureProofOfDeliveryImageType(self, value):
        # Validate type SignatureProofOfDeliveryImageType, a restriction on xs:string.
        pass
    def get_Consignee(self): return self.Consignee
    def set_Consignee(self, Consignee): self.Consignee = Consignee
    def export(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryLetterRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureProofOfDeliveryLetterRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='SignatureProofOfDeliveryLetterRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='SignatureProofOfDeliveryLetterRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.QualifiedTrackingNumber:
            self.QualifiedTrackingNumber.export(outfile, level, namespace_, name_='QualifiedTrackingNumber')
        if self.AdditionalComments is not None:
            showIndent(outfile, level)
            outfile.write('<%sAdditionalComments>%s</%sAdditionalComments>\n' % (namespace_, self.gds_format_string(quote_xml(self.AdditionalComments).encode(ExternalEncoding), input_name='AdditionalComments'), namespace_))
        if self.LetterFormat is not None:
            showIndent(outfile, level)
            outfile.write('<%sLetterFormat>%s</%sLetterFormat>\n' % (namespace_, self.gds_format_string(quote_xml(self.LetterFormat).encode(ExternalEncoding), input_name='LetterFormat'), namespace_))
        if self.Consignee:
            self.Consignee.export(outfile, level, namespace_, name_='Consignee')
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.QualifiedTrackingNumber is not None or
            self.AdditionalComments is not None or
            self.LetterFormat is not None or
            self.Consignee is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignatureProofOfDeliveryLetterRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.QualifiedTrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('QualifiedTrackingNumber=model_.QualifiedTrackingNumber(\n')
            self.QualifiedTrackingNumber.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AdditionalComments is not None:
            showIndent(outfile, level)
            outfile.write('AdditionalComments=%s,\n' % quote_python(self.AdditionalComments).encode(ExternalEncoding))
        if self.LetterFormat is not None:
            showIndent(outfile, level)
            outfile.write('LetterFormat=%s,\n' % quote_python(self.LetterFormat).encode(ExternalEncoding))
        if self.Consignee is not None:
            showIndent(outfile, level)
            outfile.write('Consignee=model_.ContactAndAddress(\n')
            self.Consignee.exportLiteral(outfile, level, name_='Consignee')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'QualifiedTrackingNumber':
            obj_ = QualifiedTrackingNumber.factory()
            obj_.build(child_)
            self.set_QualifiedTrackingNumber(obj_)
        elif nodeName_ == 'AdditionalComments':
            AdditionalComments_ = child_.text
            AdditionalComments_ = self.gds_validate_string(AdditionalComments_, node, 'AdditionalComments')
            self.AdditionalComments = AdditionalComments_
        elif nodeName_ == 'LetterFormat':
            LetterFormat_ = child_.text
            LetterFormat_ = self.gds_validate_string(LetterFormat_, node, 'LetterFormat')
            self.LetterFormat = LetterFormat_
            self.validate_SignatureProofOfDeliveryImageType(self.LetterFormat)    # validate type SignatureProofOfDeliveryImageType
        elif nodeName_ == 'Consignee':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_Consignee(obj_)
# end class SignatureProofOfDeliveryLetterRequest


class StringBarcode(GeneratedsSuper):
    """Each instance of this data type represents a barcode whose content
    must be represented as ASCII text (i.e. not binary data)."""
    subclass = None
    superclass = None
    def __init__(self, Type=None, Value=None):
        self.Type = Type
        self.Value = Value
    def factory(*args_, **kwargs_):
        if StringBarcode.subclass:
            return StringBarcode.subclass(*args_, **kwargs_)
        else:
            return StringBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_StringBarcodeType(self, value):
        # Validate type StringBarcodeType, a restriction on xs:string.
        pass
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='StringBarcode', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StringBarcode')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='StringBarcode'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='StringBarcode', fromsubclass_=False):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StringBarcode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_StringBarcodeType(self.Type)    # validate type StringBarcodeType
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class StringBarcode


class TrackDetail(GeneratedsSuper):
    """Detailed tracking information about a particular package."""
    subclass = None
    superclass = None
    def __init__(self, Notification=None, TrackingNumber=None, Barcode=None, TrackingNumberUniqueIdentifier=None, StatusCode=None, StatusDescription=None, Reconciliation=None, ServiceCommitMessage=None, CarrierCode=None, OperatingCompany=None, ProductionLocationContactAndAddress=None, OtherIdentifiers=None, ServiceInfo=None, ServiceType=None, PackageWeight=None, PackageDimensions=None, PackageDimensionalWeight=None, ShipmentWeight=None, Packaging=None, PackagingType=None, PackageSequenceNumber=None, PackageCount=None, TrackReturnLabelType=None, TrackReturnDescription=None, ShipperAddress=None, OriginLocationAddress=None, EstimatedPickupTimestamp=None, ShipTimestamp=None, TotalTransitDistance=None, DistanceToDestination=None, DestinationAddress=None, DestinationLocationAddress=None, EstimatedDeliveryTimestamp=None, ActualDeliveryTimestamp=None, ActualDeliveryAddress=None, OfficeOrderDeliveryMethod=None, DeliveryLocationType=None, DeliveryLocationDescription=None, DeliverySignatureName=None, SignatureProofOfDeliveryAvailable=None, NotificationEventsAvailable=None, SplitShipmentParts=None, RedirectToHoldEligibility=None, Events=None):
        self.Notification = Notification
        self.TrackingNumber = TrackingNumber
        self.Barcode = Barcode
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.StatusCode = StatusCode
        self.StatusDescription = StatusDescription
        self.Reconciliation = Reconciliation
        self.ServiceCommitMessage = ServiceCommitMessage
        self.CarrierCode = CarrierCode
        self.OperatingCompany = OperatingCompany
        self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
        if OtherIdentifiers is None:
            self.OtherIdentifiers = []
        else:
            self.OtherIdentifiers = OtherIdentifiers
        self.ServiceInfo = ServiceInfo
        self.ServiceType = ServiceType
        self.PackageWeight = PackageWeight
        self.PackageDimensions = PackageDimensions
        self.PackageDimensionalWeight = PackageDimensionalWeight
        self.ShipmentWeight = ShipmentWeight
        self.Packaging = Packaging
        self.PackagingType = PackagingType
        self.PackageSequenceNumber = PackageSequenceNumber
        self.PackageCount = PackageCount
        self.TrackReturnLabelType = TrackReturnLabelType
        self.TrackReturnDescription = TrackReturnDescription
        self.ShipperAddress = ShipperAddress
        self.OriginLocationAddress = OriginLocationAddress
        self.EstimatedPickupTimestamp = EstimatedPickupTimestamp
        self.ShipTimestamp = ShipTimestamp
        self.TotalTransitDistance = TotalTransitDistance
        self.DistanceToDestination = DistanceToDestination
        self.DestinationAddress = DestinationAddress
        self.DestinationLocationAddress = DestinationLocationAddress
        self.EstimatedDeliveryTimestamp = EstimatedDeliveryTimestamp
        self.ActualDeliveryTimestamp = ActualDeliveryTimestamp
        self.ActualDeliveryAddress = ActualDeliveryAddress
        self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
        self.DeliveryLocationType = DeliveryLocationType
        self.DeliveryLocationDescription = DeliveryLocationDescription
        self.DeliverySignatureName = DeliverySignatureName
        self.SignatureProofOfDeliveryAvailable = SignatureProofOfDeliveryAvailable
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
        if SplitShipmentParts is None:
            self.SplitShipmentParts = []
        else:
            self.SplitShipmentParts = SplitShipmentParts
        self.RedirectToHoldEligibility = RedirectToHoldEligibility
        if Events is None:
            self.Events = []
        else:
            self.Events = Events
    def factory(*args_, **kwargs_):
        if TrackDetail.subclass:
            return TrackDetail.subclass(*args_, **kwargs_)
        else:
            return TrackDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Notification(self): return self.Notification
    def set_Notification(self, Notification): self.Notification = Notification
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_Barcode(self): return self.Barcode
    def set_Barcode(self, Barcode): self.Barcode = Barcode
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def get_Reconciliation(self): return self.Reconciliation
    def set_Reconciliation(self, Reconciliation): self.Reconciliation = Reconciliation
    def get_ServiceCommitMessage(self): return self.ServiceCommitMessage
    def set_ServiceCommitMessage(self, ServiceCommitMessage): self.ServiceCommitMessage = ServiceCommitMessage
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_OperatingCompany(self): return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany): self.OperatingCompany = OperatingCompany
    def validate_OperatingCompanyType(self, value):
        # Validate type OperatingCompanyType, a restriction on xs:string.
        pass
    def get_ProductionLocationContactAndAddress(self): return self.ProductionLocationContactAndAddress
    def set_ProductionLocationContactAndAddress(self, ProductionLocationContactAndAddress): self.ProductionLocationContactAndAddress = ProductionLocationContactAndAddress
    def get_OtherIdentifiers(self): return self.OtherIdentifiers
    def set_OtherIdentifiers(self, OtherIdentifiers): self.OtherIdentifiers = OtherIdentifiers
    def add_OtherIdentifiers(self, value): self.OtherIdentifiers.append(value)
    def insert_OtherIdentifiers(self, index, value): self.OtherIdentifiers[index] = value
    def get_ServiceInfo(self): return self.ServiceInfo
    def set_ServiceInfo(self, ServiceInfo): self.ServiceInfo = ServiceInfo
    def get_ServiceType(self): return self.ServiceType
    def set_ServiceType(self, ServiceType): self.ServiceType = ServiceType
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_PackageWeight(self): return self.PackageWeight
    def set_PackageWeight(self, PackageWeight): self.PackageWeight = PackageWeight
    def get_PackageDimensions(self): return self.PackageDimensions
    def set_PackageDimensions(self, PackageDimensions): self.PackageDimensions = PackageDimensions
    def get_PackageDimensionalWeight(self): return self.PackageDimensionalWeight
    def set_PackageDimensionalWeight(self, PackageDimensionalWeight): self.PackageDimensionalWeight = PackageDimensionalWeight
    def get_ShipmentWeight(self): return self.ShipmentWeight
    def set_ShipmentWeight(self, ShipmentWeight): self.ShipmentWeight = ShipmentWeight
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def validate_PackagingType(self, value):
        # Validate type PackagingType, a restriction on xs:string.
        pass
    def get_PackageSequenceNumber(self): return self.PackageSequenceNumber
    def set_PackageSequenceNumber(self, PackageSequenceNumber): self.PackageSequenceNumber = PackageSequenceNumber
    def get_PackageCount(self): return self.PackageCount
    def set_PackageCount(self, PackageCount): self.PackageCount = PackageCount
    def get_TrackReturnLabelType(self): return self.TrackReturnLabelType
    def set_TrackReturnLabelType(self, TrackReturnLabelType): self.TrackReturnLabelType = TrackReturnLabelType
    def validate_TrackReturnLabelType(self, value):
        # Validate type TrackReturnLabelType, a restriction on xs:string.
        pass
    def get_TrackReturnDescription(self): return self.TrackReturnDescription
    def set_TrackReturnDescription(self, TrackReturnDescription): self.TrackReturnDescription = TrackReturnDescription
    def get_ShipperAddress(self): return self.ShipperAddress
    def set_ShipperAddress(self, ShipperAddress): self.ShipperAddress = ShipperAddress
    def get_OriginLocationAddress(self): return self.OriginLocationAddress
    def set_OriginLocationAddress(self, OriginLocationAddress): self.OriginLocationAddress = OriginLocationAddress
    def get_EstimatedPickupTimestamp(self): return self.EstimatedPickupTimestamp
    def set_EstimatedPickupTimestamp(self, EstimatedPickupTimestamp): self.EstimatedPickupTimestamp = EstimatedPickupTimestamp
    def get_ShipTimestamp(self): return self.ShipTimestamp
    def set_ShipTimestamp(self, ShipTimestamp): self.ShipTimestamp = ShipTimestamp
    def get_TotalTransitDistance(self): return self.TotalTransitDistance
    def set_TotalTransitDistance(self, TotalTransitDistance): self.TotalTransitDistance = TotalTransitDistance
    def get_DistanceToDestination(self): return self.DistanceToDestination
    def set_DistanceToDestination(self, DistanceToDestination): self.DistanceToDestination = DistanceToDestination
    def get_DestinationAddress(self): return self.DestinationAddress
    def set_DestinationAddress(self, DestinationAddress): self.DestinationAddress = DestinationAddress
    def get_DestinationLocationAddress(self): return self.DestinationLocationAddress
    def set_DestinationLocationAddress(self, DestinationLocationAddress): self.DestinationLocationAddress = DestinationLocationAddress
    def get_EstimatedDeliveryTimestamp(self): return self.EstimatedDeliveryTimestamp
    def set_EstimatedDeliveryTimestamp(self, EstimatedDeliveryTimestamp): self.EstimatedDeliveryTimestamp = EstimatedDeliveryTimestamp
    def get_ActualDeliveryTimestamp(self): return self.ActualDeliveryTimestamp
    def set_ActualDeliveryTimestamp(self, ActualDeliveryTimestamp): self.ActualDeliveryTimestamp = ActualDeliveryTimestamp
    def get_ActualDeliveryAddress(self): return self.ActualDeliveryAddress
    def set_ActualDeliveryAddress(self, ActualDeliveryAddress): self.ActualDeliveryAddress = ActualDeliveryAddress
    def get_OfficeOrderDeliveryMethod(self): return self.OfficeOrderDeliveryMethod
    def set_OfficeOrderDeliveryMethod(self, OfficeOrderDeliveryMethod): self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod
    def validate_OfficeOrderDeliveryMethodType(self, value):
        # Validate type OfficeOrderDeliveryMethodType, a restriction on xs:string.
        pass
    def get_DeliveryLocationType(self): return self.DeliveryLocationType
    def set_DeliveryLocationType(self, DeliveryLocationType): self.DeliveryLocationType = DeliveryLocationType
    def validate_TrackDeliveryLocationType(self, value):
        # Validate type TrackDeliveryLocationType, a restriction on xs:string.
        pass
    def get_DeliveryLocationDescription(self): return self.DeliveryLocationDescription
    def set_DeliveryLocationDescription(self, DeliveryLocationDescription): self.DeliveryLocationDescription = DeliveryLocationDescription
    def get_DeliverySignatureName(self): return self.DeliverySignatureName
    def set_DeliverySignatureName(self, DeliverySignatureName): self.DeliverySignatureName = DeliverySignatureName
    def get_SignatureProofOfDeliveryAvailable(self): return self.SignatureProofOfDeliveryAvailable
    def set_SignatureProofOfDeliveryAvailable(self, SignatureProofOfDeliveryAvailable): self.SignatureProofOfDeliveryAvailable = SignatureProofOfDeliveryAvailable
    def get_NotificationEventsAvailable(self): return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable): self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value): self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable(self, index, value): self.NotificationEventsAvailable[index] = value
    def validate_EMailNotificationEventType(self, value):
        # Validate type EMailNotificationEventType, a restriction on xs:string.
        pass
    def get_SplitShipmentParts(self): return self.SplitShipmentParts
    def set_SplitShipmentParts(self, SplitShipmentParts): self.SplitShipmentParts = SplitShipmentParts
    def add_SplitShipmentParts(self, value): self.SplitShipmentParts.append(value)
    def insert_SplitShipmentParts(self, index, value): self.SplitShipmentParts[index] = value
    def get_RedirectToHoldEligibility(self): return self.RedirectToHoldEligibility
    def set_RedirectToHoldEligibility(self, RedirectToHoldEligibility): self.RedirectToHoldEligibility = RedirectToHoldEligibility
    def validate_RedirectToHoldEligibilityType(self, value):
        # Validate type RedirectToHoldEligibilityType, a restriction on xs:string.
        pass
    def get_Events(self): return self.Events
    def set_Events(self, Events): self.Events = Events
    def add_Events(self, value): self.Events.append(value)
    def insert_Events(self, index, value): self.Events[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='TrackDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackDetail', fromsubclass_=False):
        if self.Notification:
            self.Notification.export(outfile, level, namespace_, name_='Notification')
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.Barcode:
            self.Barcode.export(outfile, level, namespace_, name_='Barcode')
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumberUniqueIdentifier>%s</%sTrackingNumberUniqueIdentifier>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier).encode(ExternalEncoding), input_name='TrackingNumberUniqueIdentifier'), namespace_))
        if self.StatusCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusCode>%s</%sStatusCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusCode).encode(ExternalEncoding), input_name='StatusCode'), namespace_))
        if self.StatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusDescription>%s</%sStatusDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusDescription).encode(ExternalEncoding), input_name='StatusDescription'), namespace_))
        if self.Reconciliation:
            self.Reconciliation.export(outfile, level, namespace_, name_='Reconciliation')
        if self.ServiceCommitMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceCommitMessage>%s</%sServiceCommitMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceCommitMessage).encode(ExternalEncoding), input_name='ServiceCommitMessage'), namespace_))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.OperatingCompany is not None:
            showIndent(outfile, level)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>\n' % (namespace_, self.gds_format_string(quote_xml(self.OperatingCompany).encode(ExternalEncoding), input_name='OperatingCompany'), namespace_))
        if self.ProductionLocationContactAndAddress:
            self.ProductionLocationContactAndAddress.export(outfile, level, namespace_, name_='ProductionLocationContactAndAddress')
        for OtherIdentifiers_ in self.OtherIdentifiers:
            OtherIdentifiers_.export(outfile, level, namespace_, name_='OtherIdentifiers')
        if self.ServiceInfo is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceInfo>%s</%sServiceInfo>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceInfo).encode(ExternalEncoding), input_name='ServiceInfo'), namespace_))
        if self.ServiceType is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceType>%s</%sServiceType>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceType).encode(ExternalEncoding), input_name='ServiceType'), namespace_))
        if self.PackageWeight:
            self.PackageWeight.export(outfile, level, namespace_, name_='PackageWeight')
        if self.PackageDimensions:
            self.PackageDimensions.export(outfile, level, namespace_, name_='PackageDimensions')
        if self.PackageDimensionalWeight:
            self.PackageDimensionalWeight.export(outfile, level, namespace_, name_='PackageDimensionalWeight')
        if self.ShipmentWeight:
            self.ShipmentWeight.export(outfile, level, namespace_, name_='ShipmentWeight')
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackaging>%s</%sPackaging>\n' % (namespace_, self.gds_format_string(quote_xml(self.Packaging).encode(ExternalEncoding), input_name='Packaging'), namespace_))
        if self.PackagingType is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackagingType>%s</%sPackagingType>\n' % (namespace_, self.gds_format_string(quote_xml(self.PackagingType).encode(ExternalEncoding), input_name='PackagingType'), namespace_))
        if self.PackageSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackageSequenceNumber>%s</%sPackageSequenceNumber>\n' % (namespace_, self.gds_format_integer(self.PackageSequenceNumber, input_name='PackageSequenceNumber'), namespace_))
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackageCount>%s</%sPackageCount>\n' % (namespace_, self.gds_format_integer(self.PackageCount, input_name='PackageCount'), namespace_))
        if self.TrackReturnLabelType is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackReturnLabelType>%s</%sTrackReturnLabelType>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackReturnLabelType).encode(ExternalEncoding), input_name='TrackReturnLabelType'), namespace_))
        if self.TrackReturnDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackReturnDescription>%s</%sTrackReturnDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackReturnDescription).encode(ExternalEncoding), input_name='TrackReturnDescription'), namespace_))
        if self.ShipperAddress:
            self.ShipperAddress.export(outfile, level, namespace_, name_='ShipperAddress')
        if self.OriginLocationAddress:
            self.OriginLocationAddress.export(outfile, level, namespace_, name_='OriginLocationAddress')
        if self.EstimatedPickupTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sEstimatedPickupTimestamp>%s</%sEstimatedPickupTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.EstimatedPickupTimestamp).encode(ExternalEncoding), input_name='EstimatedPickupTimestamp'), namespace_))
        if self.ShipTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipTimestamp>%s</%sShipTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipTimestamp).encode(ExternalEncoding), input_name='ShipTimestamp'), namespace_))
        if self.TotalTransitDistance:
            self.TotalTransitDistance.export(outfile, level, namespace_, name_='TotalTransitDistance')
        if self.DistanceToDestination:
            self.DistanceToDestination.export(outfile, level, namespace_, name_='DistanceToDestination')
        if self.DestinationAddress:
            self.DestinationAddress.export(outfile, level, namespace_, name_='DestinationAddress')
        if self.DestinationLocationAddress:
            self.DestinationLocationAddress.export(outfile, level, namespace_, name_='DestinationLocationAddress')
        if self.EstimatedDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sEstimatedDeliveryTimestamp>%s</%sEstimatedDeliveryTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.EstimatedDeliveryTimestamp).encode(ExternalEncoding), input_name='EstimatedDeliveryTimestamp'), namespace_))
        if self.ActualDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sActualDeliveryTimestamp>%s</%sActualDeliveryTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.ActualDeliveryTimestamp).encode(ExternalEncoding), input_name='ActualDeliveryTimestamp'), namespace_))
        if self.ActualDeliveryAddress:
            self.ActualDeliveryAddress.export(outfile, level, namespace_, name_='ActualDeliveryAddress')
        if self.OfficeOrderDeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('<%sOfficeOrderDeliveryMethod>%s</%sOfficeOrderDeliveryMethod>\n' % (namespace_, self.gds_format_string(quote_xml(self.OfficeOrderDeliveryMethod).encode(ExternalEncoding), input_name='OfficeOrderDeliveryMethod'), namespace_))
        if self.DeliveryLocationType is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliveryLocationType>%s</%sDeliveryLocationType>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliveryLocationType).encode(ExternalEncoding), input_name='DeliveryLocationType'), namespace_))
        if self.DeliveryLocationDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliveryLocationDescription>%s</%sDeliveryLocationDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliveryLocationDescription).encode(ExternalEncoding), input_name='DeliveryLocationDescription'), namespace_))
        if self.DeliverySignatureName is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliverySignatureName>%s</%sDeliverySignatureName>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliverySignatureName).encode(ExternalEncoding), input_name='DeliverySignatureName'), namespace_))
        if self.SignatureProofOfDeliveryAvailable is not None:
            showIndent(outfile, level)
            outfile.write('<%sSignatureProofOfDeliveryAvailable>%s</%sSignatureProofOfDeliveryAvailable>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.SignatureProofOfDeliveryAvailable)), input_name='SignatureProofOfDeliveryAvailable'), namespace_))
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level)
            outfile.write('<%sNotificationEventsAvailable>%s</%sNotificationEventsAvailable>\n' % (namespace_, self.gds_format_string(quote_xml(NotificationEventsAvailable_).encode(ExternalEncoding), input_name='NotificationEventsAvailable'), namespace_))
        for SplitShipmentParts_ in self.SplitShipmentParts:
            SplitShipmentParts_.export(outfile, level, namespace_, name_='SplitShipmentParts')
        if self.RedirectToHoldEligibility is not None:
            showIndent(outfile, level)
            outfile.write('<%sRedirectToHoldEligibility>%s</%sRedirectToHoldEligibility>\n' % (namespace_, self.gds_format_string(quote_xml(self.RedirectToHoldEligibility).encode(ExternalEncoding), input_name='RedirectToHoldEligibility'), namespace_))
        for Events_ in self.Events:
            Events_.export(outfile, level, namespace_, name_='Events')
    def hasContent_(self):
        if (
            self.Notification is not None or
            self.TrackingNumber is not None or
            self.Barcode is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None or
            self.Reconciliation is not None or
            self.ServiceCommitMessage is not None or
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.ProductionLocationContactAndAddress is not None or
            self.OtherIdentifiers or
            self.ServiceInfo is not None or
            self.ServiceType is not None or
            self.PackageWeight is not None or
            self.PackageDimensions is not None or
            self.PackageDimensionalWeight is not None or
            self.ShipmentWeight is not None or
            self.Packaging is not None or
            self.PackagingType is not None or
            self.PackageSequenceNumber is not None or
            self.PackageCount is not None or
            self.TrackReturnLabelType is not None or
            self.TrackReturnDescription is not None or
            self.ShipperAddress is not None or
            self.OriginLocationAddress is not None or
            self.EstimatedPickupTimestamp is not None or
            self.ShipTimestamp is not None or
            self.TotalTransitDistance is not None or
            self.DistanceToDestination is not None or
            self.DestinationAddress is not None or
            self.DestinationLocationAddress is not None or
            self.EstimatedDeliveryTimestamp is not None or
            self.ActualDeliveryTimestamp is not None or
            self.ActualDeliveryAddress is not None or
            self.OfficeOrderDeliveryMethod is not None or
            self.DeliveryLocationType is not None or
            self.DeliveryLocationDescription is not None or
            self.DeliverySignatureName is not None or
            self.SignatureProofOfDeliveryAvailable is not None or
            self.NotificationEventsAvailable or
            self.SplitShipmentParts or
            self.RedirectToHoldEligibility is not None or
            self.Events
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Notification is not None:
            showIndent(outfile, level)
            outfile.write('Notification=model_.Notification(\n')
            self.Notification.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.Barcode is not None:
            showIndent(outfile, level)
            outfile.write('Barcode=model_.StringBarcode(\n')
            self.Barcode.exportLiteral(outfile, level, name_='Barcode')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumberUniqueIdentifier=%s,\n' % quote_python(self.TrackingNumberUniqueIdentifier).encode(ExternalEncoding))
        if self.StatusCode is not None:
            showIndent(outfile, level)
            outfile.write('StatusCode=%s,\n' % quote_python(self.StatusCode).encode(ExternalEncoding))
        if self.StatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('StatusDescription=%s,\n' % quote_python(self.StatusDescription).encode(ExternalEncoding))
        if self.Reconciliation is not None:
            showIndent(outfile, level)
            outfile.write('Reconciliation=model_.TrackReconciliation(\n')
            self.Reconciliation.exportLiteral(outfile, level, name_='Reconciliation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ServiceCommitMessage is not None:
            showIndent(outfile, level)
            outfile.write('ServiceCommitMessage=%s,\n' % quote_python(self.ServiceCommitMessage).encode(ExternalEncoding))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.OperatingCompany is not None:
            showIndent(outfile, level)
            outfile.write('OperatingCompany=%s,\n' % quote_python(self.OperatingCompany).encode(ExternalEncoding))
        if self.ProductionLocationContactAndAddress is not None:
            showIndent(outfile, level)
            outfile.write('ProductionLocationContactAndAddress=model_.ContactAndAddress(\n')
            self.ProductionLocationContactAndAddress.exportLiteral(outfile, level, name_='ProductionLocationContactAndAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('OtherIdentifiers=[\n')
        level += 1
        for OtherIdentifiers_ in self.OtherIdentifiers:
            showIndent(outfile, level)
            outfile.write('model_.TrackPackageIdentifier(\n')
            OtherIdentifiers_.exportLiteral(outfile, level, name_='TrackPackageIdentifier')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ServiceInfo is not None:
            showIndent(outfile, level)
            outfile.write('ServiceInfo=%s,\n' % quote_python(self.ServiceInfo).encode(ExternalEncoding))
        if self.ServiceType is not None:
            showIndent(outfile, level)
            outfile.write('ServiceType=%s,\n' % quote_python(self.ServiceType).encode(ExternalEncoding))
        if self.PackageWeight is not None:
            showIndent(outfile, level)
            outfile.write('PackageWeight=model_.Weight(\n')
            self.PackageWeight.exportLiteral(outfile, level, name_='PackageWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PackageDimensions is not None:
            showIndent(outfile, level)
            outfile.write('PackageDimensions=model_.Dimensions(\n')
            self.PackageDimensions.exportLiteral(outfile, level, name_='PackageDimensions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PackageDimensionalWeight is not None:
            showIndent(outfile, level)
            outfile.write('PackageDimensionalWeight=model_.Weight(\n')
            self.PackageDimensionalWeight.exportLiteral(outfile, level, name_='PackageDimensionalWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipmentWeight is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentWeight=model_.Weight(\n')
            self.ShipmentWeight.exportLiteral(outfile, level, name_='ShipmentWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('Packaging=%s,\n' % quote_python(self.Packaging).encode(ExternalEncoding))
        if self.PackagingType is not None:
            showIndent(outfile, level)
            outfile.write('PackagingType=%s,\n' % quote_python(self.PackagingType).encode(ExternalEncoding))
        if self.PackageSequenceNumber is not None:
            showIndent(outfile, level)
            outfile.write('PackageSequenceNumber=%d,\n' % self.PackageSequenceNumber)
        if self.PackageCount is not None:
            showIndent(outfile, level)
            outfile.write('PackageCount=%d,\n' % self.PackageCount)
        if self.TrackReturnLabelType is not None:
            showIndent(outfile, level)
            outfile.write('TrackReturnLabelType=%s,\n' % quote_python(self.TrackReturnLabelType).encode(ExternalEncoding))
        if self.TrackReturnDescription is not None:
            showIndent(outfile, level)
            outfile.write('TrackReturnDescription=%s,\n' % quote_python(self.TrackReturnDescription).encode(ExternalEncoding))
        if self.ShipperAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipperAddress=model_.Address(\n')
            self.ShipperAddress.exportLiteral(outfile, level, name_='ShipperAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OriginLocationAddress is not None:
            showIndent(outfile, level)
            outfile.write('OriginLocationAddress=model_.Address(\n')
            self.OriginLocationAddress.exportLiteral(outfile, level, name_='OriginLocationAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EstimatedPickupTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('EstimatedPickupTimestamp=%s,\n' % quote_python(self.EstimatedPickupTimestamp).encode(ExternalEncoding))
        if self.ShipTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('ShipTimestamp=%s,\n' % quote_python(self.ShipTimestamp).encode(ExternalEncoding))
        if self.TotalTransitDistance is not None:
            showIndent(outfile, level)
            outfile.write('TotalTransitDistance=model_.Distance(\n')
            self.TotalTransitDistance.exportLiteral(outfile, level, name_='TotalTransitDistance')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DistanceToDestination is not None:
            showIndent(outfile, level)
            outfile.write('DistanceToDestination=model_.Distance(\n')
            self.DistanceToDestination.exportLiteral(outfile, level, name_='DistanceToDestination')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DestinationAddress is not None:
            showIndent(outfile, level)
            outfile.write('DestinationAddress=model_.Address(\n')
            self.DestinationAddress.exportLiteral(outfile, level, name_='DestinationAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DestinationLocationAddress is not None:
            showIndent(outfile, level)
            outfile.write('DestinationLocationAddress=model_.Address(\n')
            self.DestinationLocationAddress.exportLiteral(outfile, level, name_='DestinationLocationAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EstimatedDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('EstimatedDeliveryTimestamp=%s,\n' % quote_python(self.EstimatedDeliveryTimestamp).encode(ExternalEncoding))
        if self.ActualDeliveryTimestamp is not None:
            showIndent(outfile, level)
            outfile.write('ActualDeliveryTimestamp=%s,\n' % quote_python(self.ActualDeliveryTimestamp).encode(ExternalEncoding))
        if self.ActualDeliveryAddress is not None:
            showIndent(outfile, level)
            outfile.write('ActualDeliveryAddress=model_.Address(\n')
            self.ActualDeliveryAddress.exportLiteral(outfile, level, name_='ActualDeliveryAddress')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OfficeOrderDeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('OfficeOrderDeliveryMethod=%s,\n' % quote_python(self.OfficeOrderDeliveryMethod).encode(ExternalEncoding))
        if self.DeliveryLocationType is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryLocationType=%s,\n' % quote_python(self.DeliveryLocationType).encode(ExternalEncoding))
        if self.DeliveryLocationDescription is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryLocationDescription=%s,\n' % quote_python(self.DeliveryLocationDescription).encode(ExternalEncoding))
        if self.DeliverySignatureName is not None:
            showIndent(outfile, level)
            outfile.write('DeliverySignatureName=%s,\n' % quote_python(self.DeliverySignatureName).encode(ExternalEncoding))
        if self.SignatureProofOfDeliveryAvailable is not None:
            showIndent(outfile, level)
            outfile.write('SignatureProofOfDeliveryAvailable=%s,\n' % self.SignatureProofOfDeliveryAvailable)
        showIndent(outfile, level)
        outfile.write('NotificationEventsAvailable=[\n')
        level += 1
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(NotificationEventsAvailable_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SplitShipmentParts=[\n')
        level += 1
        for SplitShipmentParts_ in self.SplitShipmentParts:
            showIndent(outfile, level)
            outfile.write('model_.TrackSplitShipmentPart(\n')
            SplitShipmentParts_.exportLiteral(outfile, level, name_='TrackSplitShipmentPart')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.RedirectToHoldEligibility is not None:
            showIndent(outfile, level)
            outfile.write('RedirectToHoldEligibility=%s,\n' % quote_python(self.RedirectToHoldEligibility).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Events=[\n')
        level += 1
        for Events_ in self.Events:
            showIndent(outfile, level)
            outfile.write('model_.TrackEvent(\n')
            Events_.exportLiteral(outfile, level, name_='TrackEvent')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Notification':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.set_Notification(obj_)
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'Barcode':
            obj_ = StringBarcode.factory()
            obj_.build(child_)
            self.set_Barcode(obj_)
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
        elif nodeName_ == 'Reconciliation':
            obj_ = TrackReconciliation.factory()
            obj_.build(child_)
            self.set_Reconciliation(obj_)
        elif nodeName_ == 'ServiceCommitMessage':
            ServiceCommitMessage_ = child_.text
            ServiceCommitMessage_ = self.gds_validate_string(ServiceCommitMessage_, node, 'ServiceCommitMessage')
            self.ServiceCommitMessage = ServiceCommitMessage_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'OperatingCompany':
            OperatingCompany_ = child_.text
            OperatingCompany_ = self.gds_validate_string(OperatingCompany_, node, 'OperatingCompany')
            self.OperatingCompany = OperatingCompany_
            self.validate_OperatingCompanyType(self.OperatingCompany)    # validate type OperatingCompanyType
        elif nodeName_ == 'ProductionLocationContactAndAddress':
            obj_ = ContactAndAddress.factory()
            obj_.build(child_)
            self.set_ProductionLocationContactAndAddress(obj_)
        elif nodeName_ == 'OtherIdentifiers':
            obj_ = TrackPackageIdentifier.factory()
            obj_.build(child_)
            self.OtherIdentifiers.append(obj_)
        elif nodeName_ == 'ServiceInfo':
            ServiceInfo_ = child_.text
            ServiceInfo_ = self.gds_validate_string(ServiceInfo_, node, 'ServiceInfo')
            self.ServiceInfo = ServiceInfo_
        elif nodeName_ == 'ServiceType':
            ServiceType_ = child_.text
            ServiceType_ = self.gds_validate_string(ServiceType_, node, 'ServiceType')
            self.ServiceType = ServiceType_
            self.validate_ServiceType(self.ServiceType)    # validate type ServiceType
        elif nodeName_ == 'PackageWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_PackageWeight(obj_)
        elif nodeName_ == 'PackageDimensions':
            obj_ = Dimensions.factory()
            obj_.build(child_)
            self.set_PackageDimensions(obj_)
        elif nodeName_ == 'PackageDimensionalWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_PackageDimensionalWeight(obj_)
        elif nodeName_ == 'ShipmentWeight':
            obj_ = Weight.factory()
            obj_.build(child_)
            self.set_ShipmentWeight(obj_)
        elif nodeName_ == 'Packaging':
            Packaging_ = child_.text
            Packaging_ = self.gds_validate_string(Packaging_, node, 'Packaging')
            self.Packaging = Packaging_
        elif nodeName_ == 'PackagingType':
            PackagingType_ = child_.text
            PackagingType_ = self.gds_validate_string(PackagingType_, node, 'PackagingType')
            self.PackagingType = PackagingType_
            self.validate_PackagingType(self.PackagingType)    # validate type PackagingType
        elif nodeName_ == 'PackageSequenceNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageSequenceNumber')
            self.PackageSequenceNumber = ival_
        elif nodeName_ == 'PackageCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PackageCount')
            self.PackageCount = ival_
        elif nodeName_ == 'TrackReturnLabelType':
            TrackReturnLabelType_ = child_.text
            TrackReturnLabelType_ = self.gds_validate_string(TrackReturnLabelType_, node, 'TrackReturnLabelType')
            self.TrackReturnLabelType = TrackReturnLabelType_
            self.validate_TrackReturnLabelType(self.TrackReturnLabelType)    # validate type TrackReturnLabelType
        elif nodeName_ == 'TrackReturnDescription':
            TrackReturnDescription_ = child_.text
            TrackReturnDescription_ = self.gds_validate_string(TrackReturnDescription_, node, 'TrackReturnDescription')
            self.TrackReturnDescription = TrackReturnDescription_
        elif nodeName_ == 'ShipperAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_ShipperAddress(obj_)
        elif nodeName_ == 'OriginLocationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_OriginLocationAddress(obj_)
        elif nodeName_ == 'EstimatedPickupTimestamp':
            EstimatedPickupTimestamp_ = child_.text
            EstimatedPickupTimestamp_ = self.gds_validate_string(EstimatedPickupTimestamp_, node, 'EstimatedPickupTimestamp')
            self.EstimatedPickupTimestamp = EstimatedPickupTimestamp_
        elif nodeName_ == 'ShipTimestamp':
            ShipTimestamp_ = child_.text
            ShipTimestamp_ = self.gds_validate_string(ShipTimestamp_, node, 'ShipTimestamp')
            self.ShipTimestamp = ShipTimestamp_
        elif nodeName_ == 'TotalTransitDistance':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.set_TotalTransitDistance(obj_)
        elif nodeName_ == 'DistanceToDestination':
            obj_ = Distance.factory()
            obj_.build(child_)
            self.set_DistanceToDestination(obj_)
        elif nodeName_ == 'DestinationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_DestinationAddress(obj_)
        elif nodeName_ == 'DestinationLocationAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_DestinationLocationAddress(obj_)
        elif nodeName_ == 'EstimatedDeliveryTimestamp':
            EstimatedDeliveryTimestamp_ = child_.text
            EstimatedDeliveryTimestamp_ = self.gds_validate_string(EstimatedDeliveryTimestamp_, node, 'EstimatedDeliveryTimestamp')
            self.EstimatedDeliveryTimestamp = EstimatedDeliveryTimestamp_
        elif nodeName_ == 'ActualDeliveryTimestamp':
            ActualDeliveryTimestamp_ = child_.text
            ActualDeliveryTimestamp_ = self.gds_validate_string(ActualDeliveryTimestamp_, node, 'ActualDeliveryTimestamp')
            self.ActualDeliveryTimestamp = ActualDeliveryTimestamp_
        elif nodeName_ == 'ActualDeliveryAddress':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_ActualDeliveryAddress(obj_)
        elif nodeName_ == 'OfficeOrderDeliveryMethod':
            OfficeOrderDeliveryMethod_ = child_.text
            OfficeOrderDeliveryMethod_ = self.gds_validate_string(OfficeOrderDeliveryMethod_, node, 'OfficeOrderDeliveryMethod')
            self.OfficeOrderDeliveryMethod = OfficeOrderDeliveryMethod_
            self.validate_OfficeOrderDeliveryMethodType(self.OfficeOrderDeliveryMethod)    # validate type OfficeOrderDeliveryMethodType
        elif nodeName_ == 'DeliveryLocationType':
            DeliveryLocationType_ = child_.text
            DeliveryLocationType_ = self.gds_validate_string(DeliveryLocationType_, node, 'DeliveryLocationType')
            self.DeliveryLocationType = DeliveryLocationType_
            self.validate_TrackDeliveryLocationType(self.DeliveryLocationType)    # validate type TrackDeliveryLocationType
        elif nodeName_ == 'DeliveryLocationDescription':
            DeliveryLocationDescription_ = child_.text
            DeliveryLocationDescription_ = self.gds_validate_string(DeliveryLocationDescription_, node, 'DeliveryLocationDescription')
            self.DeliveryLocationDescription = DeliveryLocationDescription_
        elif nodeName_ == 'DeliverySignatureName':
            DeliverySignatureName_ = child_.text
            DeliverySignatureName_ = self.gds_validate_string(DeliverySignatureName_, node, 'DeliverySignatureName')
            self.DeliverySignatureName = DeliverySignatureName_
        elif nodeName_ == 'SignatureProofOfDeliveryAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'SignatureProofOfDeliveryAvailable')
            self.SignatureProofOfDeliveryAvailable = ival_
        elif nodeName_ == 'NotificationEventsAvailable':
            NotificationEventsAvailable_ = child_.text
            NotificationEventsAvailable_ = self.gds_validate_string(NotificationEventsAvailable_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(NotificationEventsAvailable_)
            self.validate_EMailNotificationEventType(self.NotificationEventsAvailable)    # validate type EMailNotificationEventType
        elif nodeName_ == 'SplitShipmentParts':
            obj_ = TrackSplitShipmentPart.factory()
            obj_.build(child_)
            self.SplitShipmentParts.append(obj_)
        elif nodeName_ == 'RedirectToHoldEligibility':
            RedirectToHoldEligibility_ = child_.text
            RedirectToHoldEligibility_ = self.gds_validate_string(RedirectToHoldEligibility_, node, 'RedirectToHoldEligibility')
            self.RedirectToHoldEligibility = RedirectToHoldEligibility_
            self.validate_RedirectToHoldEligibilityType(self.RedirectToHoldEligibility)    # validate type RedirectToHoldEligibilityType
        elif nodeName_ == 'Events':
            obj_ = TrackEvent.factory()
            obj_.build(child_)
            self.Events.append(obj_)
# end class TrackDetail


class TrackEvent(GeneratedsSuper):
    """FedEx scanning information about a package."""
    subclass = None
    superclass = None
    def __init__(self, Timestamp=None, EventType=None, EventDescription=None, StatusExceptionCode=None, StatusExceptionDescription=None, Address=None, ArrivalLocation=None):
        self.Timestamp = Timestamp
        self.EventType = EventType
        self.EventDescription = EventDescription
        self.StatusExceptionCode = StatusExceptionCode
        self.StatusExceptionDescription = StatusExceptionDescription
        self.Address = Address
        self.ArrivalLocation = ArrivalLocation
    def factory(*args_, **kwargs_):
        if TrackEvent.subclass:
            return TrackEvent.subclass(*args_, **kwargs_)
        else:
            return TrackEvent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Timestamp(self): return self.Timestamp
    def set_Timestamp(self, Timestamp): self.Timestamp = Timestamp
    def get_EventType(self): return self.EventType
    def set_EventType(self, EventType): self.EventType = EventType
    def get_EventDescription(self): return self.EventDescription
    def set_EventDescription(self, EventDescription): self.EventDescription = EventDescription
    def get_StatusExceptionCode(self): return self.StatusExceptionCode
    def set_StatusExceptionCode(self, StatusExceptionCode): self.StatusExceptionCode = StatusExceptionCode
    def get_StatusExceptionDescription(self): return self.StatusExceptionDescription
    def set_StatusExceptionDescription(self, StatusExceptionDescription): self.StatusExceptionDescription = StatusExceptionDescription
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_ArrivalLocation(self): return self.ArrivalLocation
    def set_ArrivalLocation(self, ArrivalLocation): self.ArrivalLocation = ArrivalLocation
    def validate_ArrivalLocationType(self, value):
        # Validate type ArrivalLocationType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='TrackEvent', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackEvent')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackEvent'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackEvent', fromsubclass_=False):
        if self.Timestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sTimestamp>%s</%sTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.Timestamp).encode(ExternalEncoding), input_name='Timestamp'), namespace_))
        if self.EventType is not None:
            showIndent(outfile, level)
            outfile.write('<%sEventType>%s</%sEventType>\n' % (namespace_, self.gds_format_string(quote_xml(self.EventType).encode(ExternalEncoding), input_name='EventType'), namespace_))
        if self.EventDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sEventDescription>%s</%sEventDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.EventDescription).encode(ExternalEncoding), input_name='EventDescription'), namespace_))
        if self.StatusExceptionCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusExceptionCode>%s</%sStatusExceptionCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusExceptionCode).encode(ExternalEncoding), input_name='StatusExceptionCode'), namespace_))
        if self.StatusExceptionDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusExceptionDescription>%s</%sStatusExceptionDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusExceptionDescription).encode(ExternalEncoding), input_name='StatusExceptionDescription'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address')
        if self.ArrivalLocation is not None:
            showIndent(outfile, level)
            outfile.write('<%sArrivalLocation>%s</%sArrivalLocation>\n' % (namespace_, self.gds_format_string(quote_xml(self.ArrivalLocation).encode(ExternalEncoding), input_name='ArrivalLocation'), namespace_))
    def hasContent_(self):
        if (
            self.Timestamp is not None or
            self.EventType is not None or
            self.EventDescription is not None or
            self.StatusExceptionCode is not None or
            self.StatusExceptionDescription is not None or
            self.Address is not None or
            self.ArrivalLocation is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackEvent'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Timestamp is not None:
            showIndent(outfile, level)
            outfile.write('Timestamp=%s,\n' % quote_python(self.Timestamp).encode(ExternalEncoding))
        if self.EventType is not None:
            showIndent(outfile, level)
            outfile.write('EventType=%s,\n' % quote_python(self.EventType).encode(ExternalEncoding))
        if self.EventDescription is not None:
            showIndent(outfile, level)
            outfile.write('EventDescription=%s,\n' % quote_python(self.EventDescription).encode(ExternalEncoding))
        if self.StatusExceptionCode is not None:
            showIndent(outfile, level)
            outfile.write('StatusExceptionCode=%s,\n' % quote_python(self.StatusExceptionCode).encode(ExternalEncoding))
        if self.StatusExceptionDescription is not None:
            showIndent(outfile, level)
            outfile.write('StatusExceptionDescription=%s,\n' % quote_python(self.StatusExceptionDescription).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ArrivalLocation is not None:
            showIndent(outfile, level)
            outfile.write('ArrivalLocation=%s,\n' % quote_python(self.ArrivalLocation).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Timestamp':
            Timestamp_ = child_.text
            Timestamp_ = self.gds_validate_string(Timestamp_, node, 'Timestamp')
            self.Timestamp = Timestamp_
        elif nodeName_ == 'EventType':
            EventType_ = child_.text
            EventType_ = self.gds_validate_string(EventType_, node, 'EventType')
            self.EventType = EventType_
        elif nodeName_ == 'EventDescription':
            EventDescription_ = child_.text
            EventDescription_ = self.gds_validate_string(EventDescription_, node, 'EventDescription')
            self.EventDescription = EventDescription_
        elif nodeName_ == 'StatusExceptionCode':
            StatusExceptionCode_ = child_.text
            StatusExceptionCode_ = self.gds_validate_string(StatusExceptionCode_, node, 'StatusExceptionCode')
            self.StatusExceptionCode = StatusExceptionCode_
        elif nodeName_ == 'StatusExceptionDescription':
            StatusExceptionDescription_ = child_.text
            StatusExceptionDescription_ = self.gds_validate_string(StatusExceptionDescription_, node, 'StatusExceptionDescription')
            self.StatusExceptionDescription = StatusExceptionDescription_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
        elif nodeName_ == 'ArrivalLocation':
            ArrivalLocation_ = child_.text
            ArrivalLocation_ = self.gds_validate_string(ArrivalLocation_, node, 'ArrivalLocation')
            self.ArrivalLocation = ArrivalLocation_
            self.validate_ArrivalLocationType(self.ArrivalLocation)    # validate type ArrivalLocationType
# end class TrackEvent


class TrackNotificationPackage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TrackingNumber=None, TrackingNumberUniqueIdentifiers=None, CarrierCode=None, ShipDate=None, Destination=None, RecipientDetails=None):
        self.TrackingNumber = TrackingNumber
        self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
        self.CarrierCode = CarrierCode
        self.ShipDate = ShipDate
        self.Destination = Destination
        if RecipientDetails is None:
            self.RecipientDetails = []
        else:
            self.RecipientDetails = RecipientDetails
    def factory(*args_, **kwargs_):
        if TrackNotificationPackage.subclass:
            return TrackNotificationPackage.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationPackage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_TrackingNumberUniqueIdentifiers(self): return self.TrackingNumberUniqueIdentifiers
    def set_TrackingNumberUniqueIdentifiers(self, TrackingNumberUniqueIdentifiers): self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_RecipientDetails(self): return self.RecipientDetails
    def set_RecipientDetails(self, RecipientDetails): self.RecipientDetails = RecipientDetails
    def add_RecipientDetails(self, value): self.RecipientDetails.append(value)
    def insert_RecipientDetails(self, index, value): self.RecipientDetails[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationPackage', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationPackage')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationPackage'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationPackage', fromsubclass_=False):
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.TrackingNumberUniqueIdentifiers is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumberUniqueIdentifiers>%s</%sTrackingNumberUniqueIdentifiers>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifiers).encode(ExternalEncoding), input_name='TrackingNumberUniqueIdentifiers'), namespace_))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDate>%s</%sShipDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_))
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
        for RecipientDetails_ in self.RecipientDetails:
            RecipientDetails_.export(outfile, level, namespace_, name_='RecipientDetails')
    def hasContent_(self):
        if (
            self.TrackingNumber is not None or
            self.TrackingNumberUniqueIdentifiers is not None or
            self.CarrierCode is not None or
            self.ShipDate is not None or
            self.Destination is not None or
            self.RecipientDetails
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackNotificationPackage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.TrackingNumberUniqueIdentifiers is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumberUniqueIdentifiers=%s,\n' % quote_python(self.TrackingNumberUniqueIdentifiers).encode(ExternalEncoding))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.Address(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('RecipientDetails=[\n')
        level += 1
        for RecipientDetails_ in self.RecipientDetails:
            showIndent(outfile, level)
            outfile.write('model_.TrackNotificationRecipientDetail(\n')
            RecipientDetails_.exportLiteral(outfile, level, name_='TrackNotificationRecipientDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'TrackingNumberUniqueIdentifiers':
            TrackingNumberUniqueIdentifiers_ = child_.text
            TrackingNumberUniqueIdentifiers_ = self.gds_validate_string(TrackingNumberUniqueIdentifiers_, node, 'TrackingNumberUniqueIdentifiers')
            self.TrackingNumberUniqueIdentifiers = TrackingNumberUniqueIdentifiers_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
        elif nodeName_ == 'RecipientDetails':
            obj_ = TrackNotificationRecipientDetail.factory()
            obj_.build(child_)
            self.RecipientDetails.append(obj_)
# end class TrackNotificationPackage


class TrackNotificationRecipientDetail(GeneratedsSuper):
    """Options available for a tracking notification recipient."""
    subclass = None
    superclass = None
    def __init__(self, NotificationEventsAvailable=None):
        if NotificationEventsAvailable is None:
            self.NotificationEventsAvailable = []
        else:
            self.NotificationEventsAvailable = NotificationEventsAvailable
    def factory(*args_, **kwargs_):
        if TrackNotificationRecipientDetail.subclass:
            return TrackNotificationRecipientDetail.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationRecipientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NotificationEventsAvailable(self): return self.NotificationEventsAvailable
    def set_NotificationEventsAvailable(self, NotificationEventsAvailable): self.NotificationEventsAvailable = NotificationEventsAvailable
    def add_NotificationEventsAvailable(self, value): self.NotificationEventsAvailable.append(value)
    def insert_NotificationEventsAvailable(self, index, value): self.NotificationEventsAvailable[index] = value
    def validate_EMailNotificationEventType(self, value):
        # Validate type EMailNotificationEventType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationRecipientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationRecipientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationRecipientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationRecipientDetail', fromsubclass_=False):
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level)
            outfile.write('<%sNotificationEventsAvailable>%s</%sNotificationEventsAvailable>\n' % (namespace_, self.gds_format_string(quote_xml(NotificationEventsAvailable_).encode(ExternalEncoding), input_name='NotificationEventsAvailable'), namespace_))
    def hasContent_(self):
        if (
            self.NotificationEventsAvailable
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackNotificationRecipientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('NotificationEventsAvailable=[\n')
        level += 1
        for NotificationEventsAvailable_ in self.NotificationEventsAvailable:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(NotificationEventsAvailable_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NotificationEventsAvailable':
            NotificationEventsAvailable_ = child_.text
            NotificationEventsAvailable_ = self.gds_validate_string(NotificationEventsAvailable_, node, 'NotificationEventsAvailable')
            self.NotificationEventsAvailable.append(NotificationEventsAvailable_)
            self.validate_EMailNotificationEventType(self.NotificationEventsAvailable)    # validate type EMailNotificationEventType
# end class TrackNotificationRecipientDetail


class TrackNotificationReply(GeneratedsSuper):
    """FedEx Track Notification reply."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DuplicateWaybill=None, MoreDataAvailable=None, PagingToken=None, Packages=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.DuplicateWaybill = DuplicateWaybill
        self.MoreDataAvailable = MoreDataAvailable
        self.PagingToken = PagingToken
        if Packages is None:
            self.Packages = []
        else:
            self.Packages = Packages
    def factory(*args_, **kwargs_):
        if TrackNotificationReply.subclass:
            return TrackNotificationReply.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_DuplicateWaybill(self): return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill): self.DuplicateWaybill = DuplicateWaybill
    def get_MoreDataAvailable(self): return self.MoreDataAvailable
    def set_MoreDataAvailable(self, MoreDataAvailable): self.MoreDataAvailable = MoreDataAvailable
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_Packages(self): return self.Packages
    def set_Packages(self, Packages): self.Packages = Packages
    def add_Packages(self, value): self.Packages.append(value)
    def insert_Packages(self, index, value): self.Packages[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuplicateWaybill>%s</%sDuplicateWaybill>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.DuplicateWaybill)), input_name='DuplicateWaybill'), namespace_))
        if self.MoreDataAvailable is not None:
            showIndent(outfile, level)
            outfile.write('<%sMoreDataAvailable>%s</%sMoreDataAvailable>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.MoreDataAvailable)), input_name='MoreDataAvailable'), namespace_))
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagingToken>%s</%sPagingToken>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagingToken).encode(ExternalEncoding), input_name='PagingToken'), namespace_))
        for Packages_ in self.Packages:
            Packages_.export(outfile, level, namespace_, name_='Packages')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DuplicateWaybill is not None or
            self.MoreDataAvailable is not None or
            self.PagingToken is not None or
            self.Packages
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackNotificationReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level)
            outfile.write('DuplicateWaybill=%s,\n' % self.DuplicateWaybill)
        if self.MoreDataAvailable is not None:
            showIndent(outfile, level)
            outfile.write('MoreDataAvailable=%s,\n' % self.MoreDataAvailable)
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('PagingToken=%s,\n' % quote_python(self.PagingToken).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Packages=[\n')
        level += 1
        for Packages_ in self.Packages:
            showIndent(outfile, level)
            outfile.write('model_.TrackNotificationPackage(\n')
            Packages_.exportLiteral(outfile, level, name_='TrackNotificationPackage')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
        elif nodeName_ == 'MoreDataAvailable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreDataAvailable')
            self.MoreDataAvailable = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'Packages':
            obj_ = TrackNotificationPackage.factory()
            obj_.build(child_)
            self.Packages.append(obj_)
# end class TrackNotificationReply


class TrackNotificationRequest(GeneratedsSuper):
    """FedEx Track Notification request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, TrackingNumber=None, MultiPiece=None, PagingToken=None, TrackingNumberUniqueId=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, SenderEMailAddress=None, SenderContactName=None, NotificationDetail=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.TrackingNumber = TrackingNumber
        self.MultiPiece = MultiPiece
        self.PagingToken = PagingToken
        self.TrackingNumberUniqueId = TrackingNumberUniqueId
        self.ShipDateRangeBegin = ShipDateRangeBegin
        self.ShipDateRangeEnd = ShipDateRangeEnd
        self.SenderEMailAddress = SenderEMailAddress
        self.SenderContactName = SenderContactName
        self.NotificationDetail = NotificationDetail
    def factory(*args_, **kwargs_):
        if TrackNotificationRequest.subclass:
            return TrackNotificationRequest.subclass(*args_, **kwargs_)
        else:
            return TrackNotificationRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_TrackingNumber(self): return self.TrackingNumber
    def set_TrackingNumber(self, TrackingNumber): self.TrackingNumber = TrackingNumber
    def get_MultiPiece(self): return self.MultiPiece
    def set_MultiPiece(self, MultiPiece): self.MultiPiece = MultiPiece
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_TrackingNumberUniqueId(self): return self.TrackingNumberUniqueId
    def set_TrackingNumberUniqueId(self, TrackingNumberUniqueId): self.TrackingNumberUniqueId = TrackingNumberUniqueId
    def get_ShipDateRangeBegin(self): return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin): self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self): return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd): self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_SenderEMailAddress(self): return self.SenderEMailAddress
    def set_SenderEMailAddress(self, SenderEMailAddress): self.SenderEMailAddress = SenderEMailAddress
    def get_SenderContactName(self): return self.SenderContactName
    def set_SenderContactName(self, SenderContactName): self.SenderContactName = SenderContactName
    def get_NotificationDetail(self): return self.NotificationDetail
    def set_NotificationDetail(self, NotificationDetail): self.NotificationDetail = NotificationDetail
    def export(self, outfile, level, namespace_='ns:', name_='TrackNotificationRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackNotificationRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackNotificationRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackNotificationRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumber>%s</%sTrackingNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumber).encode(ExternalEncoding), input_name='TrackingNumber'), namespace_))
        if self.MultiPiece is not None:
            showIndent(outfile, level)
            outfile.write('<%sMultiPiece>%s</%sMultiPiece>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.MultiPiece)), input_name='MultiPiece'), namespace_))
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagingToken>%s</%sPagingToken>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagingToken).encode(ExternalEncoding), input_name='PagingToken'), namespace_))
        if self.TrackingNumberUniqueId is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumberUniqueId>%s</%sTrackingNumberUniqueId>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumberUniqueId).encode(ExternalEncoding), input_name='TrackingNumberUniqueId'), namespace_))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDateRangeBegin>%s</%sShipDateRangeBegin>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDateRangeBegin).encode(ExternalEncoding), input_name='ShipDateRangeBegin'), namespace_))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDateRangeEnd>%s</%sShipDateRangeEnd>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDateRangeEnd).encode(ExternalEncoding), input_name='ShipDateRangeEnd'), namespace_))
        if self.SenderEMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sSenderEMailAddress>%s</%sSenderEMailAddress>\n' % (namespace_, self.gds_format_string(quote_xml(self.SenderEMailAddress).encode(ExternalEncoding), input_name='SenderEMailAddress'), namespace_))
        if self.SenderContactName is not None:
            showIndent(outfile, level)
            outfile.write('<%sSenderContactName>%s</%sSenderContactName>\n' % (namespace_, self.gds_format_string(quote_xml(self.SenderContactName).encode(ExternalEncoding), input_name='SenderContactName'), namespace_))
        if self.NotificationDetail:
            self.NotificationDetail.export(outfile, level, namespace_, name_='NotificationDetail', )
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.TrackingNumber is not None or
            self.MultiPiece is not None or
            self.PagingToken is not None or
            self.TrackingNumberUniqueId is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.SenderEMailAddress is not None or
            self.SenderContactName is not None or
            self.NotificationDetail is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackNotificationRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TrackingNumber is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumber=%s,\n' % quote_python(self.TrackingNumber).encode(ExternalEncoding))
        if self.MultiPiece is not None:
            showIndent(outfile, level)
            outfile.write('MultiPiece=%s,\n' % self.MultiPiece)
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('PagingToken=%s,\n' % quote_python(self.PagingToken).encode(ExternalEncoding))
        if self.TrackingNumberUniqueId is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumberUniqueId=%s,\n' % quote_python(self.TrackingNumberUniqueId).encode(ExternalEncoding))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level)
            outfile.write('ShipDateRangeBegin=%s,\n' % quote_python(self.ShipDateRangeBegin).encode(ExternalEncoding))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level)
            outfile.write('ShipDateRangeEnd=%s,\n' % quote_python(self.ShipDateRangeEnd).encode(ExternalEncoding))
        if self.SenderEMailAddress is not None:
            showIndent(outfile, level)
            outfile.write('SenderEMailAddress=%s,\n' % quote_python(self.SenderEMailAddress).encode(ExternalEncoding))
        if self.SenderContactName is not None:
            showIndent(outfile, level)
            outfile.write('SenderContactName=%s,\n' % quote_python(self.SenderContactName).encode(ExternalEncoding))
        if self.NotificationDetail is not None:
            showIndent(outfile, level)
            outfile.write('NotificationDetail=model_.EMailNotificationDetail(\n')
            self.NotificationDetail.exportLiteral(outfile, level, name_='NotificationDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'TrackingNumber':
            TrackingNumber_ = child_.text
            TrackingNumber_ = self.gds_validate_string(TrackingNumber_, node, 'TrackingNumber')
            self.TrackingNumber = TrackingNumber_
        elif nodeName_ == 'MultiPiece':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MultiPiece')
            self.MultiPiece = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'TrackingNumberUniqueId':
            TrackingNumberUniqueId_ = child_.text
            TrackingNumberUniqueId_ = self.gds_validate_string(TrackingNumberUniqueId_, node, 'TrackingNumberUniqueId')
            self.TrackingNumberUniqueId = TrackingNumberUniqueId_
        elif nodeName_ == 'ShipDateRangeBegin':
            ShipDateRangeBegin_ = child_.text
            ShipDateRangeBegin_ = self.gds_validate_string(ShipDateRangeBegin_, node, 'ShipDateRangeBegin')
            self.ShipDateRangeBegin = ShipDateRangeBegin_
        elif nodeName_ == 'ShipDateRangeEnd':
            ShipDateRangeEnd_ = child_.text
            ShipDateRangeEnd_ = self.gds_validate_string(ShipDateRangeEnd_, node, 'ShipDateRangeEnd')
            self.ShipDateRangeEnd = ShipDateRangeEnd_
        elif nodeName_ == 'SenderEMailAddress':
            SenderEMailAddress_ = child_.text
            SenderEMailAddress_ = self.gds_validate_string(SenderEMailAddress_, node, 'SenderEMailAddress')
            self.SenderEMailAddress = SenderEMailAddress_
        elif nodeName_ == 'SenderContactName':
            SenderContactName_ = child_.text
            SenderContactName_ = self.gds_validate_string(SenderContactName_, node, 'SenderContactName')
            self.SenderContactName = SenderContactName_
        elif nodeName_ == 'NotificationDetail':
            obj_ = EMailNotificationDetail.factory()
            obj_.build(child_)
            self.set_NotificationDetail(obj_)
# end class TrackNotificationRequest


class TrackPackageIdentifier(GeneratedsSuper):
    """The type and value of the package identifier that is to be used to
    retrieve the tracking information for a package."""
    subclass = None
    superclass = None
    def __init__(self, Value=None, Type=None):
        self.Value = Value
        self.Type = Type
    def factory(*args_, **kwargs_):
        if TrackPackageIdentifier.subclass:
            return TrackPackageIdentifier.subclass(*args_, **kwargs_)
        else:
            return TrackPackageIdentifier(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_TrackIdentifierType(self, value):
        # Validate type TrackIdentifierType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='TrackPackageIdentifier', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackPackageIdentifier')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackPackageIdentifier'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackPackageIdentifier', fromsubclass_=False):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('<%sType>%s</%sType>\n' % (namespace_, self.gds_format_string(quote_xml(self.Type).encode(ExternalEncoding), input_name='Type'), namespace_))
    def hasContent_(self):
        if (
            self.Value is not None or
            self.Type is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackPackageIdentifier'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
        if self.Type is not None:
            showIndent(outfile, level)
            outfile.write('Type=%s,\n' % quote_python(self.Type).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            self.validate_TrackIdentifierType(self.Type)    # validate type TrackIdentifierType
# end class TrackPackageIdentifier


class TrackReconciliation(GeneratedsSuper):
    """Used to report the status of a piece of a multiple piece shipment
    which is no longer traveling with the rest of the packages in
    the shipment or has not been accounted for."""
    subclass = None
    superclass = None
    def __init__(self, Status=None, Description=None):
        self.Status = Status
        self.Description = Description
    def factory(*args_, **kwargs_):
        if TrackReconciliation.subclass:
            return TrackReconciliation.subclass(*args_, **kwargs_)
        else:
            return TrackReconciliation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='ns:', name_='TrackReconciliation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackReconciliation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackReconciliation'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackReconciliation', fromsubclass_=False):
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatus>%s</%sStatus>\n' % (namespace_, self.gds_format_string(quote_xml(self.Status).encode(ExternalEncoding), input_name='Status'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Status is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackReconciliation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Status is not None:
            showIndent(outfile, level)
            outfile.write('Status=%s,\n' % quote_python(self.Status).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Status':
            Status_ = child_.text
            Status_ = self.gds_validate_string(Status_, node, 'Status')
            self.Status = Status_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class TrackReconciliation


class TrackReply(GeneratedsSuper):
    """The descriptive data returned from a FedEx package tracking request."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, DuplicateWaybill=None, MoreData=None, PagingToken=None, TrackDetails=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.DuplicateWaybill = DuplicateWaybill
        self.MoreData = MoreData
        self.PagingToken = PagingToken
        if TrackDetails is None:
            self.TrackDetails = []
        else:
            self.TrackDetails = TrackDetails
    def factory(*args_, **kwargs_):
        if TrackReply.subclass:
            return TrackReply.subclass(*args_, **kwargs_)
        else:
            return TrackReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_DuplicateWaybill(self): return self.DuplicateWaybill
    def set_DuplicateWaybill(self, DuplicateWaybill): self.DuplicateWaybill = DuplicateWaybill
    def get_MoreData(self): return self.MoreData
    def set_MoreData(self, MoreData): self.MoreData = MoreData
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def get_TrackDetails(self): return self.TrackDetails
    def set_TrackDetails(self, TrackDetails): self.TrackDetails = TrackDetails
    def add_TrackDetails(self, value): self.TrackDetails.append(value)
    def insert_TrackDetails(self, index, value): self.TrackDetails[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='TrackReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level)
            outfile.write('<%sDuplicateWaybill>%s</%sDuplicateWaybill>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.DuplicateWaybill)), input_name='DuplicateWaybill'), namespace_))
        if self.MoreData is not None:
            showIndent(outfile, level)
            outfile.write('<%sMoreData>%s</%sMoreData>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.MoreData)), input_name='MoreData'), namespace_))
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagingToken>%s</%sPagingToken>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagingToken).encode(ExternalEncoding), input_name='PagingToken'), namespace_))
        for TrackDetails_ in self.TrackDetails:
            TrackDetails_.export(outfile, level, namespace_, name_='TrackDetails')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.DuplicateWaybill is not None or
            self.MoreData is not None or
            self.PagingToken is not None or
            self.TrackDetails
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DuplicateWaybill is not None:
            showIndent(outfile, level)
            outfile.write('DuplicateWaybill=%s,\n' % self.DuplicateWaybill)
        if self.MoreData is not None:
            showIndent(outfile, level)
            outfile.write('MoreData=%s,\n' % self.MoreData)
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('PagingToken=%s,\n' % quote_python(self.PagingToken).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('TrackDetails=[\n')
        level += 1
        for TrackDetails_ in self.TrackDetails:
            showIndent(outfile, level)
            outfile.write('model_.TrackDetail(\n')
            TrackDetails_.exportLiteral(outfile, level, name_='TrackDetail')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'DuplicateWaybill':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'DuplicateWaybill')
            self.DuplicateWaybill = ival_
        elif nodeName_ == 'MoreData':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'MoreData')
            self.MoreData = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
        elif nodeName_ == 'TrackDetails':
            obj_ = TrackDetail.factory()
            obj_.build(child_)
            self.TrackDetails.append(obj_)
# end class TrackReply


class TrackRequest(GeneratedsSuper):
    """The descriptive data sent by a client to track a FedEx package."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, CarrierCode=None, OperatingCompany=None, PackageIdentifier=None, TrackingNumberUniqueIdentifier=None, ShipDateRangeBegin=None, ShipDateRangeEnd=None, ShipmentAccountNumber=None, Destination=None, IncludeDetailedScans=None, PagingToken=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.CarrierCode = CarrierCode
        self.OperatingCompany = OperatingCompany
        self.PackageIdentifier = PackageIdentifier
        self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
        self.ShipDateRangeBegin = ShipDateRangeBegin
        self.ShipDateRangeEnd = ShipDateRangeEnd
        self.ShipmentAccountNumber = ShipmentAccountNumber
        self.Destination = Destination
        self.IncludeDetailedScans = IncludeDetailedScans
        self.PagingToken = PagingToken
    def factory(*args_, **kwargs_):
        if TrackRequest.subclass:
            return TrackRequest.subclass(*args_, **kwargs_)
        else:
            return TrackRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_OperatingCompany(self): return self.OperatingCompany
    def set_OperatingCompany(self, OperatingCompany): self.OperatingCompany = OperatingCompany
    def validate_OperatingCompanyType(self, value):
        # Validate type OperatingCompanyType, a restriction on xs:string.
        pass
    def get_PackageIdentifier(self): return self.PackageIdentifier
    def set_PackageIdentifier(self, PackageIdentifier): self.PackageIdentifier = PackageIdentifier
    def get_TrackingNumberUniqueIdentifier(self): return self.TrackingNumberUniqueIdentifier
    def set_TrackingNumberUniqueIdentifier(self, TrackingNumberUniqueIdentifier): self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier
    def get_ShipDateRangeBegin(self): return self.ShipDateRangeBegin
    def set_ShipDateRangeBegin(self, ShipDateRangeBegin): self.ShipDateRangeBegin = ShipDateRangeBegin
    def get_ShipDateRangeEnd(self): return self.ShipDateRangeEnd
    def set_ShipDateRangeEnd(self, ShipDateRangeEnd): self.ShipDateRangeEnd = ShipDateRangeEnd
    def get_ShipmentAccountNumber(self): return self.ShipmentAccountNumber
    def set_ShipmentAccountNumber(self, ShipmentAccountNumber): self.ShipmentAccountNumber = ShipmentAccountNumber
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_IncludeDetailedScans(self): return self.IncludeDetailedScans
    def set_IncludeDetailedScans(self, IncludeDetailedScans): self.IncludeDetailedScans = IncludeDetailedScans
    def get_PagingToken(self): return self.PagingToken
    def set_PagingToken(self, PagingToken): self.PagingToken = PagingToken
    def export(self, outfile, level, namespace_='ns:', name_='TrackRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.OperatingCompany is not None:
            showIndent(outfile, level)
            outfile.write('<%sOperatingCompany>%s</%sOperatingCompany>\n' % (namespace_, self.gds_format_string(quote_xml(self.OperatingCompany).encode(ExternalEncoding), input_name='OperatingCompany'), namespace_))
        if self.PackageIdentifier:
            self.PackageIdentifier.export(outfile, level, namespace_, name_='PackageIdentifier', )
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level)
            outfile.write('<%sTrackingNumberUniqueIdentifier>%s</%sTrackingNumberUniqueIdentifier>\n' % (namespace_, self.gds_format_string(quote_xml(self.TrackingNumberUniqueIdentifier).encode(ExternalEncoding), input_name='TrackingNumberUniqueIdentifier'), namespace_))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDateRangeBegin>%s</%sShipDateRangeBegin>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDateRangeBegin).encode(ExternalEncoding), input_name='ShipDateRangeBegin'), namespace_))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDateRangeEnd>%s</%sShipDateRangeEnd>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDateRangeEnd).encode(ExternalEncoding), input_name='ShipDateRangeEnd'), namespace_))
        if self.ShipmentAccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipmentAccountNumber>%s</%sShipmentAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipmentAccountNumber).encode(ExternalEncoding), input_name='ShipmentAccountNumber'), namespace_))
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
        if self.IncludeDetailedScans is not None:
            showIndent(outfile, level)
            outfile.write('<%sIncludeDetailedScans>%s</%sIncludeDetailedScans>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.IncludeDetailedScans)), input_name='IncludeDetailedScans'), namespace_))
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('<%sPagingToken>%s</%sPagingToken>\n' % (namespace_, self.gds_format_string(quote_xml(self.PagingToken).encode(ExternalEncoding), input_name='PagingToken'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.CarrierCode is not None or
            self.OperatingCompany is not None or
            self.PackageIdentifier is not None or
            self.TrackingNumberUniqueIdentifier is not None or
            self.ShipDateRangeBegin is not None or
            self.ShipDateRangeEnd is not None or
            self.ShipmentAccountNumber is not None or
            self.Destination is not None or
            self.IncludeDetailedScans is not None or
            self.PagingToken is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.OperatingCompany is not None:
            showIndent(outfile, level)
            outfile.write('OperatingCompany=%s,\n' % quote_python(self.OperatingCompany).encode(ExternalEncoding))
        if self.PackageIdentifier is not None:
            showIndent(outfile, level)
            outfile.write('PackageIdentifier=model_.TrackPackageIdentifier(\n')
            self.PackageIdentifier.exportLiteral(outfile, level, name_='PackageIdentifier')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TrackingNumberUniqueIdentifier is not None:
            showIndent(outfile, level)
            outfile.write('TrackingNumberUniqueIdentifier=%s,\n' % quote_python(self.TrackingNumberUniqueIdentifier).encode(ExternalEncoding))
        if self.ShipDateRangeBegin is not None:
            showIndent(outfile, level)
            outfile.write('ShipDateRangeBegin=%s,\n' % quote_python(self.ShipDateRangeBegin).encode(ExternalEncoding))
        if self.ShipDateRangeEnd is not None:
            showIndent(outfile, level)
            outfile.write('ShipDateRangeEnd=%s,\n' % quote_python(self.ShipDateRangeEnd).encode(ExternalEncoding))
        if self.ShipmentAccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentAccountNumber=%s,\n' % quote_python(self.ShipmentAccountNumber).encode(ExternalEncoding))
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.Address(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IncludeDetailedScans is not None:
            showIndent(outfile, level)
            outfile.write('IncludeDetailedScans=%s,\n' % self.IncludeDetailedScans)
        if self.PagingToken is not None:
            showIndent(outfile, level)
            outfile.write('PagingToken=%s,\n' % quote_python(self.PagingToken).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'OperatingCompany':
            OperatingCompany_ = child_.text
            OperatingCompany_ = self.gds_validate_string(OperatingCompany_, node, 'OperatingCompany')
            self.OperatingCompany = OperatingCompany_
            self.validate_OperatingCompanyType(self.OperatingCompany)    # validate type OperatingCompanyType
        elif nodeName_ == 'PackageIdentifier':
            obj_ = TrackPackageIdentifier.factory()
            obj_.build(child_)
            self.set_PackageIdentifier(obj_)
        elif nodeName_ == 'TrackingNumberUniqueIdentifier':
            TrackingNumberUniqueIdentifier_ = child_.text
            TrackingNumberUniqueIdentifier_ = self.gds_validate_string(TrackingNumberUniqueIdentifier_, node, 'TrackingNumberUniqueIdentifier')
            self.TrackingNumberUniqueIdentifier = TrackingNumberUniqueIdentifier_
        elif nodeName_ == 'ShipDateRangeBegin':
            ShipDateRangeBegin_ = child_.text
            ShipDateRangeBegin_ = self.gds_validate_string(ShipDateRangeBegin_, node, 'ShipDateRangeBegin')
            self.ShipDateRangeBegin = ShipDateRangeBegin_
        elif nodeName_ == 'ShipDateRangeEnd':
            ShipDateRangeEnd_ = child_.text
            ShipDateRangeEnd_ = self.gds_validate_string(ShipDateRangeEnd_, node, 'ShipDateRangeEnd')
            self.ShipDateRangeEnd = ShipDateRangeEnd_
        elif nodeName_ == 'ShipmentAccountNumber':
            ShipmentAccountNumber_ = child_.text
            ShipmentAccountNumber_ = self.gds_validate_string(ShipmentAccountNumber_, node, 'ShipmentAccountNumber')
            self.ShipmentAccountNumber = ShipmentAccountNumber_
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
        elif nodeName_ == 'IncludeDetailedScans':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'IncludeDetailedScans')
            self.IncludeDetailedScans = ival_
        elif nodeName_ == 'PagingToken':
            PagingToken_ = child_.text
            PagingToken_ = self.gds_validate_string(PagingToken_, node, 'PagingToken')
            self.PagingToken = PagingToken_
# end class TrackRequest


class TrackSplitShipmentPart(GeneratedsSuper):
    """Used when a cargo shipment is split across vehicles. This is used to
    give the status of each part of the shipment."""
    subclass = None
    superclass = None
    def __init__(self, PieceCount=None, Timestamp=None, StatusCode=None, StatusDescription=None):
        self.PieceCount = PieceCount
        self.Timestamp = Timestamp
        self.StatusCode = StatusCode
        self.StatusDescription = StatusDescription
    def factory(*args_, **kwargs_):
        if TrackSplitShipmentPart.subclass:
            return TrackSplitShipmentPart.subclass(*args_, **kwargs_)
        else:
            return TrackSplitShipmentPart(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PieceCount(self): return self.PieceCount
    def set_PieceCount(self, PieceCount): self.PieceCount = PieceCount
    def get_Timestamp(self): return self.Timestamp
    def set_Timestamp(self, Timestamp): self.Timestamp = Timestamp
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusDescription(self): return self.StatusDescription
    def set_StatusDescription(self, StatusDescription): self.StatusDescription = StatusDescription
    def export(self, outfile, level, namespace_='ns:', name_='TrackSplitShipmentPart', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TrackSplitShipmentPart')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TrackSplitShipmentPart'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TrackSplitShipmentPart', fromsubclass_=False):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('<%sPieceCount>%s</%sPieceCount>\n' % (namespace_, self.gds_format_integer(self.PieceCount, input_name='PieceCount'), namespace_))
        if self.Timestamp is not None:
            showIndent(outfile, level)
            outfile.write('<%sTimestamp>%s</%sTimestamp>\n' % (namespace_, self.gds_format_string(quote_xml(self.Timestamp).encode(ExternalEncoding), input_name='Timestamp'), namespace_))
        if self.StatusCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusCode>%s</%sStatusCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusCode).encode(ExternalEncoding), input_name='StatusCode'), namespace_))
        if self.StatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sStatusDescription>%s</%sStatusDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.StatusDescription).encode(ExternalEncoding), input_name='StatusDescription'), namespace_))
    def hasContent_(self):
        if (
            self.PieceCount is not None or
            self.Timestamp is not None or
            self.StatusCode is not None or
            self.StatusDescription is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TrackSplitShipmentPart'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PieceCount is not None:
            showIndent(outfile, level)
            outfile.write('PieceCount=%d,\n' % self.PieceCount)
        if self.Timestamp is not None:
            showIndent(outfile, level)
            outfile.write('Timestamp=%s,\n' % quote_python(self.Timestamp).encode(ExternalEncoding))
        if self.StatusCode is not None:
            showIndent(outfile, level)
            outfile.write('StatusCode=%s,\n' % quote_python(self.StatusCode).encode(ExternalEncoding))
        if self.StatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('StatusDescription=%s,\n' % quote_python(self.StatusDescription).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PieceCount':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ <= 0:
                raise_parse_error(child_, 'requires positiveInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'PieceCount')
            self.PieceCount = ival_
        elif nodeName_ == 'Timestamp':
            Timestamp_ = child_.text
            Timestamp_ = self.gds_validate_string(Timestamp_, node, 'Timestamp')
            self.Timestamp = Timestamp_
        elif nodeName_ == 'StatusCode':
            StatusCode_ = child_.text
            StatusCode_ = self.gds_validate_string(StatusCode_, node, 'StatusCode')
            self.StatusCode = StatusCode_
        elif nodeName_ == 'StatusDescription':
            StatusDescription_ = child_.text
            StatusDescription_ = self.gds_validate_string(StatusDescription_, node, 'StatusDescription')
            self.StatusDescription = StatusDescription_
# end class TrackSplitShipmentPart


class TransactionDetail(GeneratedsSuper):
    """Descriptive data that governs data payload language/translations.
    The TransactionDetail from the request is echoed back to the
    caller in the corresponding reply."""
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class Weight(GeneratedsSuper):
    """The descriptive data for the heaviness of an object."""
    subclass = None
    superclass = None
    def __init__(self, Units=None, Value=None):
        self.Units = Units
        self.Value = Value
    def factory(*args_, **kwargs_):
        if Weight.subclass:
            return Weight.subclass(*args_, **kwargs_)
        else:
            return Weight(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Units(self): return self.Units
    def set_Units(self, Units): self.Units = Units
    def validate_WeightUnits(self, value):
        # Validate type WeightUnits, a restriction on xs:string.
        pass
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='Weight', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Weight')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Weight'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Weight', fromsubclass_=False):
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('<%sUnits>%s</%sUnits>\n' % (namespace_, self.gds_format_string(quote_xml(self.Units).encode(ExternalEncoding), input_name='Units'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_float(self.Value, input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Units is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Weight'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Units is not None:
            showIndent(outfile, level)
            outfile.write('Units=%s,\n' % quote_python(self.Units).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%f,\n' % self.Value)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Units':
            Units_ = child_.text
            Units_ = self.gds_validate_string(Units_, node, 'Units')
            self.Units = Units_
            self.validate_WeightUnits(self.Units)    # validate type WeightUnits
        elif nodeName_ == 'Value':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Value')
            self.Value = fval_
# end class Weight


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SignatureProofOfDeliveryFaxReply'
        rootClass = SignatureProofOfDeliveryFaxReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SignatureProofOfDeliveryFaxReply'
        rootClass = SignatureProofOfDeliveryFaxReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="SignatureProofOfDeliveryFaxReply",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SignatureProofOfDeliveryFaxReply'
        rootClass = SignatureProofOfDeliveryFaxReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from track import *\n\n')
    sys.stdout.write('import track as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ClientDetail",
    "Contact",
    "ContactAndAddress",
    "Dimensions",
    "Distance",
    "EMailNotificationDetail",
    "EMailNotificationRecipient",
    "Localization",
    "Notification",
    "NotificationParameter",
    "QualifiedTrackingNumber",
    "SignatureProofOfDeliveryFaxReply",
    "SignatureProofOfDeliveryFaxRequest",
    "SignatureProofOfDeliveryLetterReply",
    "SignatureProofOfDeliveryLetterRequest",
    "StringBarcode",
    "TrackDetail",
    "TrackEvent",
    "TrackNotificationPackage",
    "TrackNotificationRecipientDetail",
    "TrackNotificationReply",
    "TrackNotificationRequest",
    "TrackPackageIdentifier",
    "TrackReconciliation",
    "TrackReply",
    "TrackRequest",
    "TrackSplitShipmentPart",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail",
    "Weight"
    ]
