#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Nov 28 15:43:43 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class Address(GeneratedsSuper):
    """Descriptive data for a physical location. May be used as an actual
    physical address (place to which one could go), or as a
    container of "address parts" which should be handled as a unit
    (such as a city-state-ZIP combination within the US)."""
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, CountryCode=None):
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def export(self, outfile, level, namespace_='ns:', name_='Address', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Address', fromsubclass_=False):
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
    def hasContent_(self):
        if (
            self.PostalCode is not None or
            self.CountryCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class Address


class ClientDetail(GeneratedsSuper):
    """Descriptive data for the client submitting a transaction."""
    subclass = None
    superclass = None
    def __init__(self, AccountNumber=None, MeterNumber=None, Localization=None):
        self.AccountNumber = AccountNumber
        self.MeterNumber = MeterNumber
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if ClientDetail.subclass:
            return ClientDetail.subclass(*args_, **kwargs_)
        else:
            return ClientDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_MeterNumber(self): return self.MeterNumber
    def set_MeterNumber(self, MeterNumber): self.MeterNumber = MeterNumber
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='ClientDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ClientDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ClientDetail', fromsubclass_=False):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sMeterNumber>%s</%sMeterNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.MeterNumber).encode(ExternalEncoding), input_name='MeterNumber'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.AccountNumber is not None or
            self.MeterNumber is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.MeterNumber is not None:
            showIndent(outfile, level)
            outfile.write('MeterNumber=%s,\n' % quote_python(self.MeterNumber).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'MeterNumber':
            MeterNumber_ = child_.text
            MeterNumber_ = self.gds_validate_string(MeterNumber_, node, 'MeterNumber')
            self.MeterNumber = MeterNumber_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class ClientDetail


class Localization(GeneratedsSuper):
    """Identifies the representation of human-readable text."""
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, LocaleCode=None):
        self.LanguageCode = LanguageCode
        self.LocaleCode = LocaleCode
    def factory(*args_, **kwargs_):
        if Localization.subclass:
            return Localization.subclass(*args_, **kwargs_)
        else:
            return Localization(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_LocaleCode(self): return self.LocaleCode
    def set_LocaleCode(self, LocaleCode): self.LocaleCode = LocaleCode
    def export(self, outfile, level, namespace_='ns:', name_='Localization', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Localization')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Localization'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Localization', fromsubclass_=False):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LanguageCode).encode(ExternalEncoding), input_name='LanguageCode'), namespace_))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocaleCode>%s</%sLocaleCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocaleCode).encode(ExternalEncoding), input_name='LocaleCode'), namespace_))
    def hasContent_(self):
        if (
            self.LanguageCode is not None or
            self.LocaleCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Localization'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LanguageCode is not None:
            showIndent(outfile, level)
            outfile.write('LanguageCode=%s,\n' % quote_python(self.LanguageCode).encode(ExternalEncoding))
        if self.LocaleCode is not None:
            showIndent(outfile, level)
            outfile.write('LocaleCode=%s,\n' % quote_python(self.LocaleCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LanguageCode':
            LanguageCode_ = child_.text
            LanguageCode_ = self.gds_validate_string(LanguageCode_, node, 'LanguageCode')
            self.LanguageCode = LanguageCode_
        elif nodeName_ == 'LocaleCode':
            LocaleCode_ = child_.text
            LocaleCode_ = self.gds_validate_string(LocaleCode_, node, 'LocaleCode')
            self.LocaleCode = LocaleCode_
# end class Localization


class Notification(GeneratedsSuper):
    """The descriptive data regarding the result of the submitted
    transaction."""
    subclass = None
    superclass = None
    def __init__(self, Severity=None, Source=None, Code=None, Message=None, LocalizedMessage=None, MessageParameters=None):
        self.Severity = Severity
        self.Source = Source
        self.Code = Code
        self.Message = Message
        self.LocalizedMessage = LocalizedMessage
        if MessageParameters is None:
            self.MessageParameters = []
        else:
            self.MessageParameters = MessageParameters
    def factory(*args_, **kwargs_):
        if Notification.subclass:
            return Notification.subclass(*args_, **kwargs_)
        else:
            return Notification(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Severity(self): return self.Severity
    def set_Severity(self, Severity): self.Severity = Severity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Message(self): return self.Message
    def set_Message(self, Message): self.Message = Message
    def get_LocalizedMessage(self): return self.LocalizedMessage
    def set_LocalizedMessage(self, LocalizedMessage): self.LocalizedMessage = LocalizedMessage
    def get_MessageParameters(self): return self.MessageParameters
    def set_MessageParameters(self, MessageParameters): self.MessageParameters = MessageParameters
    def add_MessageParameters(self, value): self.MessageParameters.append(value)
    def insert_MessageParameters(self, index, value): self.MessageParameters[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='Notification', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notification')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='Notification'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='Notification', fromsubclass_=False):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('<%sSeverity>%s</%sSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.Severity).encode(ExternalEncoding), input_name='Severity'), namespace_))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('<%sSource>%s</%sSource>\n' % (namespace_, self.gds_format_string(quote_xml(self.Source).encode(ExternalEncoding), input_name='Source'), namespace_))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('<%sMessage>%s</%sMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.Message).encode(ExternalEncoding), input_name='Message'), namespace_))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocalizedMessage>%s</%sLocalizedMessage>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocalizedMessage).encode(ExternalEncoding), input_name='LocalizedMessage'), namespace_))
        for MessageParameters_ in self.MessageParameters:
            MessageParameters_.export(outfile, level, namespace_, name_='MessageParameters')
    def hasContent_(self):
        if (
            self.Severity is not None or
            self.Source is not None or
            self.Code is not None or
            self.Message is not None or
            self.LocalizedMessage is not None or
            self.MessageParameters
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notification'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Severity is not None:
            showIndent(outfile, level)
            outfile.write('Severity=%s,\n' % quote_python(self.Severity).encode(ExternalEncoding))
        if self.Source is not None:
            showIndent(outfile, level)
            outfile.write('Source=%s,\n' % quote_python(self.Source).encode(ExternalEncoding))
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Message is not None:
            showIndent(outfile, level)
            outfile.write('Message=%s,\n' % quote_python(self.Message).encode(ExternalEncoding))
        if self.LocalizedMessage is not None:
            showIndent(outfile, level)
            outfile.write('LocalizedMessage=%s,\n' % quote_python(self.LocalizedMessage).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('MessageParameters=[\n')
        level += 1
        for MessageParameters_ in self.MessageParameters:
            showIndent(outfile, level)
            outfile.write('model_.NotificationParameter(\n')
            MessageParameters_.exportLiteral(outfile, level, name_='NotificationParameter')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Severity':
            Severity_ = child_.text
            Severity_ = self.gds_validate_string(Severity_, node, 'Severity')
            self.Severity = Severity_
            self.validate_NotificationSeverityType(self.Severity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
        elif nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Message':
            Message_ = child_.text
            Message_ = self.gds_validate_string(Message_, node, 'Message')
            self.Message = Message_
        elif nodeName_ == 'LocalizedMessage':
            LocalizedMessage_ = child_.text
            LocalizedMessage_ = self.gds_validate_string(LocalizedMessage_, node, 'LocalizedMessage')
            self.LocalizedMessage = LocalizedMessage_
        elif nodeName_ == 'MessageParameters':
            obj_ = NotificationParameter.factory()
            obj_.build(child_)
            self.MessageParameters.append(obj_)
# end class Notification


class NotificationParameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Value=None):
        self.Id = Id
        self.Value = Value
    def factory(*args_, **kwargs_):
        if NotificationParameter.subclass:
            return NotificationParameter.subclass(*args_, **kwargs_)
        else:
            return NotificationParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def export(self, outfile, level, namespace_='ns:', name_='NotificationParameter', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NotificationParameter')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='NotificationParameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='NotificationParameter', fromsubclass_=False):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('<%sId>%s</%sId>\n' % (namespace_, self.gds_format_string(quote_xml(self.Id).encode(ExternalEncoding), input_name='Id'), namespace_))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('<%sValue>%s</%sValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.Value).encode(ExternalEncoding), input_name='Value'), namespace_))
    def hasContent_(self):
        if (
            self.Id is not None or
            self.Value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NotificationParameter'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Id is not None:
            showIndent(outfile, level)
            outfile.write('Id=%s,\n' % quote_python(self.Id).encode(ExternalEncoding))
        if self.Value is not None:
            showIndent(outfile, level)
            outfile.write('Value=%s,\n' % quote_python(self.Value).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Id':
            Id_ = child_.text
            Id_ = self.gds_validate_string(Id_, node, 'Id')
            self.Id = Id_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class NotificationParameter


class PostalCodeInquiryReply(GeneratedsSuper):
    """FedEx Postal Code Inquiry reply."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, ExpressFreightContractorDeliveryArea=None, ExpressDescription=None, ExpressFreightDescription=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.ExpressFreightContractorDeliveryArea = ExpressFreightContractorDeliveryArea
        self.ExpressDescription = ExpressDescription
        self.ExpressFreightDescription = ExpressFreightDescription
    def factory(*args_, **kwargs_):
        if PostalCodeInquiryReply.subclass:
            return PostalCodeInquiryReply.subclass(*args_, **kwargs_)
        else:
            return PostalCodeInquiryReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_ExpressFreightContractorDeliveryArea(self): return self.ExpressFreightContractorDeliveryArea
    def set_ExpressFreightContractorDeliveryArea(self, ExpressFreightContractorDeliveryArea): self.ExpressFreightContractorDeliveryArea = ExpressFreightContractorDeliveryArea
    def get_ExpressDescription(self): return self.ExpressDescription
    def set_ExpressDescription(self, ExpressDescription): self.ExpressDescription = ExpressDescription
    def get_ExpressFreightDescription(self): return self.ExpressFreightDescription
    def set_ExpressFreightDescription(self, ExpressFreightDescription): self.ExpressFreightDescription = ExpressFreightDescription
    def export(self, outfile, level, namespace_='ns:', name_='PostalCodeInquiryReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalCodeInquiryReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PostalCodeInquiryReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PostalCodeInquiryReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.ExpressFreightContractorDeliveryArea is not None:
            showIndent(outfile, level)
            outfile.write('<%sExpressFreightContractorDeliveryArea>%s</%sExpressFreightContractorDeliveryArea>\n' % (namespace_, self.gds_format_boolean(self.gds_str_lower(str(self.ExpressFreightContractorDeliveryArea)), input_name='ExpressFreightContractorDeliveryArea'), namespace_))
        if self.ExpressDescription:
            self.ExpressDescription.export(outfile, level, namespace_, name_='ExpressDescription')
        if self.ExpressFreightDescription:
            self.ExpressFreightDescription.export(outfile, level, namespace_, name_='ExpressFreightDescription')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.ExpressFreightContractorDeliveryArea is not None or
            self.ExpressDescription is not None or
            self.ExpressFreightDescription is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PostalCodeInquiryReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpressFreightContractorDeliveryArea is not None:
            showIndent(outfile, level)
            outfile.write('ExpressFreightContractorDeliveryArea=%s,\n' % self.ExpressFreightContractorDeliveryArea)
        if self.ExpressDescription is not None:
            showIndent(outfile, level)
            outfile.write('ExpressDescription=model_.PostalCodeServiceAreaDescription(\n')
            self.ExpressDescription.exportLiteral(outfile, level, name_='ExpressDescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpressFreightDescription is not None:
            showIndent(outfile, level)
            outfile.write('ExpressFreightDescription=model_.PostalCodeServiceAreaDescription(\n')
            self.ExpressFreightDescription.exportLiteral(outfile, level, name_='ExpressFreightDescription')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'ExpressFreightContractorDeliveryArea':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'ExpressFreightContractorDeliveryArea')
            self.ExpressFreightContractorDeliveryArea = ival_
        elif nodeName_ == 'ExpressDescription':
            obj_ = PostalCodeServiceAreaDescription.factory()
            obj_.build(child_)
            self.set_ExpressDescription(obj_)
        elif nodeName_ == 'ExpressFreightDescription':
            obj_ = PostalCodeServiceAreaDescription.factory()
            obj_.build(child_)
            self.set_ExpressFreightDescription(obj_)
# end class PostalCodeInquiryReply


class PostalCodeInquiryRequest(GeneratedsSuper):
    """FedEx Postal Code Inquiry request."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, PostalCode=None, CountryCode=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if PostalCodeInquiryRequest.subclass:
            return PostalCodeInquiryRequest.subclass(*args_, **kwargs_)
        else:
            return PostalCodeInquiryRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def export(self, outfile, level, namespace_='ns:', name_='PostalCodeInquiryRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalCodeInquiryRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PostalCodeInquiryRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PostalCodeInquiryRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.PostalCode is not None or
            self.CountryCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PostalCodeInquiryRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class PostalCodeInquiryRequest


class PostalCodeServiceAreaDescription(GeneratedsSuper):
    """Postal Code Service Area description."""
    subclass = None
    superclass = None
    def __init__(self, LocationId=None, StateOrProvinceCode=None, PostalCode=None, ServiceArea=None):
        self.LocationId = LocationId
        self.StateOrProvinceCode = StateOrProvinceCode
        self.PostalCode = PostalCode
        self.ServiceArea = ServiceArea
    def factory(*args_, **kwargs_):
        if PostalCodeServiceAreaDescription.subclass:
            return PostalCodeServiceAreaDescription.subclass(*args_, **kwargs_)
        else:
            return PostalCodeServiceAreaDescription(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LocationId(self): return self.LocationId
    def set_LocationId(self, LocationId): self.LocationId = LocationId
    def get_StateOrProvinceCode(self): return self.StateOrProvinceCode
    def set_StateOrProvinceCode(self, StateOrProvinceCode): self.StateOrProvinceCode = StateOrProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_ServiceArea(self): return self.ServiceArea
    def set_ServiceArea(self, ServiceArea): self.ServiceArea = ServiceArea
    def export(self, outfile, level, namespace_='ns:', name_='PostalCodeServiceAreaDescription', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalCodeServiceAreaDescription')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='PostalCodeServiceAreaDescription'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='PostalCodeServiceAreaDescription', fromsubclass_=False):
        if self.LocationId is not None:
            showIndent(outfile, level)
            outfile.write('<%sLocationId>%s</%sLocationId>\n' % (namespace_, self.gds_format_string(quote_xml(self.LocationId).encode(ExternalEncoding), input_name='LocationId'), namespace_))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateOrProvinceCode>%s</%sStateOrProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateOrProvinceCode).encode(ExternalEncoding), input_name='StateOrProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.ServiceArea is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceArea>%s</%sServiceArea>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceArea).encode(ExternalEncoding), input_name='ServiceArea'), namespace_))
    def hasContent_(self):
        if (
            self.LocationId is not None or
            self.StateOrProvinceCode is not None or
            self.PostalCode is not None or
            self.ServiceArea is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PostalCodeServiceAreaDescription'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.LocationId is not None:
            showIndent(outfile, level)
            outfile.write('LocationId=%s,\n' % quote_python(self.LocationId).encode(ExternalEncoding))
        if self.StateOrProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateOrProvinceCode=%s,\n' % quote_python(self.StateOrProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.ServiceArea is not None:
            showIndent(outfile, level)
            outfile.write('ServiceArea=%s,\n' % quote_python(self.ServiceArea).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LocationId':
            LocationId_ = child_.text
            LocationId_ = self.gds_validate_string(LocationId_, node, 'LocationId')
            self.LocationId = LocationId_
        elif nodeName_ == 'StateOrProvinceCode':
            StateOrProvinceCode_ = child_.text
            StateOrProvinceCode_ = self.gds_validate_string(StateOrProvinceCode_, node, 'StateOrProvinceCode')
            self.StateOrProvinceCode = StateOrProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'ServiceArea':
            ServiceArea_ = child_.text
            ServiceArea_ = self.gds_validate_string(ServiceArea_, node, 'ServiceArea')
            self.ServiceArea = ServiceArea_
# end class PostalCodeServiceAreaDescription


class ServiceAvailabilityOption(GeneratedsSuper):
    """The descriptive data which identifies an available FedEx Service."""
    subclass = None
    superclass = None
    def __init__(self, Service=None, DeliveryDate=None, DeliveryDay=None, DestinationStationId=None, DestinationAirportId=None):
        self.Service = Service
        self.DeliveryDate = DeliveryDate
        self.DeliveryDay = DeliveryDay
        self.DestinationStationId = DestinationStationId
        self.DestinationAirportId = DestinationAirportId
    def factory(*args_, **kwargs_):
        if ServiceAvailabilityOption.subclass:
            return ServiceAvailabilityOption.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityOption(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_DeliveryDate(self): return self.DeliveryDate
    def set_DeliveryDate(self, DeliveryDate): self.DeliveryDate = DeliveryDate
    def get_DeliveryDay(self): return self.DeliveryDay
    def set_DeliveryDay(self, DeliveryDay): self.DeliveryDay = DeliveryDay
    def validate_DayOfWeekType(self, value):
        # Validate type DayOfWeekType, a restriction on xs:string.
        pass
    def get_DestinationStationId(self): return self.DestinationStationId
    def set_DestinationStationId(self, DestinationStationId): self.DestinationStationId = DestinationStationId
    def get_DestinationAirportId(self): return self.DestinationAirportId
    def set_DestinationAirportId(self, DestinationAirportId): self.DestinationAirportId = DestinationAirportId
    def export(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityOption', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceAvailabilityOption')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ServiceAvailabilityOption'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityOption', fromsubclass_=False):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('<%sService>%s</%sService>\n' % (namespace_, self.gds_format_string(quote_xml(self.Service).encode(ExternalEncoding), input_name='Service'), namespace_))
        if self.DeliveryDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliveryDate>%s</%sDeliveryDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliveryDate).encode(ExternalEncoding), input_name='DeliveryDate'), namespace_))
        if self.DeliveryDay is not None:
            showIndent(outfile, level)
            outfile.write('<%sDeliveryDay>%s</%sDeliveryDay>\n' % (namespace_, self.gds_format_string(quote_xml(self.DeliveryDay).encode(ExternalEncoding), input_name='DeliveryDay'), namespace_))
        if self.DestinationStationId is not None:
            showIndent(outfile, level)
            outfile.write('<%sDestinationStationId>%s</%sDestinationStationId>\n' % (namespace_, self.gds_format_string(quote_xml(self.DestinationStationId).encode(ExternalEncoding), input_name='DestinationStationId'), namespace_))
        if self.DestinationAirportId is not None:
            showIndent(outfile, level)
            outfile.write('<%sDestinationAirportId>%s</%sDestinationAirportId>\n' % (namespace_, self.gds_format_string(quote_xml(self.DestinationAirportId).encode(ExternalEncoding), input_name='DestinationAirportId'), namespace_))
    def hasContent_(self):
        if (
            self.Service is not None or
            self.DeliveryDate is not None or
            self.DeliveryDay is not None or
            self.DestinationStationId is not None or
            self.DestinationAirportId is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceAvailabilityOption'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=%s,\n' % quote_python(self.Service).encode(ExternalEncoding))
        if self.DeliveryDate is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryDate=%s,\n' % quote_python(self.DeliveryDate).encode(ExternalEncoding))
        if self.DeliveryDay is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryDay=%s,\n' % quote_python(self.DeliveryDay).encode(ExternalEncoding))
        if self.DestinationStationId is not None:
            showIndent(outfile, level)
            outfile.write('DestinationStationId=%s,\n' % quote_python(self.DestinationStationId).encode(ExternalEncoding))
        if self.DestinationAirportId is not None:
            showIndent(outfile, level)
            outfile.write('DestinationAirportId=%s,\n' % quote_python(self.DestinationAirportId).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            self.validate_ServiceType(self.Service)    # validate type ServiceType
        elif nodeName_ == 'DeliveryDate':
            DeliveryDate_ = child_.text
            DeliveryDate_ = self.gds_validate_string(DeliveryDate_, node, 'DeliveryDate')
            self.DeliveryDate = DeliveryDate_
        elif nodeName_ == 'DeliveryDay':
            DeliveryDay_ = child_.text
            DeliveryDay_ = self.gds_validate_string(DeliveryDay_, node, 'DeliveryDay')
            self.DeliveryDay = DeliveryDay_
            self.validate_DayOfWeekType(self.DeliveryDay)    # validate type DayOfWeekType
        elif nodeName_ == 'DestinationStationId':
            DestinationStationId_ = child_.text
            DestinationStationId_ = self.gds_validate_string(DestinationStationId_, node, 'DestinationStationId')
            self.DestinationStationId = DestinationStationId_
        elif nodeName_ == 'DestinationAirportId':
            DestinationAirportId_ = child_.text
            DestinationAirportId_ = self.gds_validate_string(DestinationAirportId_, node, 'DestinationAirportId')
            self.DestinationAirportId = DestinationAirportId_
# end class ServiceAvailabilityOption


class ServiceAvailabilityReply(GeneratedsSuper):
    """The descriptive data returned for a FedEx service availability
    request."""
    subclass = None
    superclass = None
    def __init__(self, HighestSeverity=None, Notifications=None, TransactionDetail=None, Version=None, Options=None):
        self.HighestSeverity = HighestSeverity
        if Notifications is None:
            self.Notifications = []
        else:
            self.Notifications = Notifications
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        if Options is None:
            self.Options = []
        else:
            self.Options = Options
    def factory(*args_, **kwargs_):
        if ServiceAvailabilityReply.subclass:
            return ServiceAvailabilityReply.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HighestSeverity(self): return self.HighestSeverity
    def set_HighestSeverity(self, HighestSeverity): self.HighestSeverity = HighestSeverity
    def validate_NotificationSeverityType(self, value):
        # Validate type NotificationSeverityType, a restriction on xs:string.
        pass
    def get_Notifications(self): return self.Notifications
    def set_Notifications(self, Notifications): self.Notifications = Notifications
    def add_Notifications(self, value): self.Notifications.append(value)
    def insert_Notifications(self, index, value): self.Notifications[index] = value
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Options(self): return self.Options
    def set_Options(self, Options): self.Options = Options
    def add_Options(self, value): self.Options.append(value)
    def insert_Options(self, index, value): self.Options[index] = value
    def export(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityReply', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceAvailabilityReply')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ServiceAvailabilityReply'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityReply', fromsubclass_=False):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sHighestSeverity>%s</%sHighestSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.HighestSeverity).encode(ExternalEncoding), input_name='HighestSeverity'), namespace_))
        for Notifications_ in self.Notifications:
            Notifications_.export(outfile, level, namespace_, name_='Notifications')
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        for Options_ in self.Options:
            Options_.export(outfile, level, namespace_, name_='Options')
    def hasContent_(self):
        if (
            self.HighestSeverity is not None or
            self.Notifications or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Options
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceAvailabilityReply'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HighestSeverity is not None:
            showIndent(outfile, level)
            outfile.write('HighestSeverity=%s,\n' % quote_python(self.HighestSeverity).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Notifications=[\n')
        level += 1
        for Notifications_ in self.Notifications:
            showIndent(outfile, level)
            outfile.write('model_.Notification(\n')
            Notifications_.exportLiteral(outfile, level, name_='Notification')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Options=[\n')
        level += 1
        for Options_ in self.Options:
            showIndent(outfile, level)
            outfile.write('model_.ServiceAvailabilityOption(\n')
            Options_.exportLiteral(outfile, level, name_='ServiceAvailabilityOption')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HighestSeverity':
            HighestSeverity_ = child_.text
            HighestSeverity_ = self.gds_validate_string(HighestSeverity_, node, 'HighestSeverity')
            self.HighestSeverity = HighestSeverity_
            self.validate_NotificationSeverityType(self.HighestSeverity)    # validate type NotificationSeverityType
        elif nodeName_ == 'Notifications':
            obj_ = Notification.factory()
            obj_.build(child_)
            self.Notifications.append(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'Options':
            obj_ = ServiceAvailabilityOption.factory()
            obj_.build(child_)
            self.Options.append(obj_)
# end class ServiceAvailabilityReply


class ServiceAvailabilityRequest(GeneratedsSuper):
    """The descriptive data which is used to determine which FedEx Express
    services are available between an origin and destination. To
    check the availability of one particular FedEx Express service
    and packaging type, include the Service and Packaging elements
    in the request message. Only information regarding that single
    service and packaging type will be returned from the request. To
    obtain a list of all available services for a given origin and
    destination, omit the Service and Packaging elements from the
    request. In this case the reply will contain every available
    service."""
    subclass = None
    superclass = None
    def __init__(self, WebAuthenticationDetail=None, ClientDetail=None, TransactionDetail=None, Version=None, Origin=None, Destination=None, ShipDate=None, CarrierCode=None, Service=None, Packaging=None):
        self.WebAuthenticationDetail = WebAuthenticationDetail
        self.ClientDetail = ClientDetail
        self.TransactionDetail = TransactionDetail
        self.Version = Version
        self.Origin = Origin
        self.Destination = Destination
        self.ShipDate = ShipDate
        self.CarrierCode = CarrierCode
        self.Service = Service
        self.Packaging = Packaging
    def factory(*args_, **kwargs_):
        if ServiceAvailabilityRequest.subclass:
            return ServiceAvailabilityRequest.subclass(*args_, **kwargs_)
        else:
            return ServiceAvailabilityRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_WebAuthenticationDetail(self): return self.WebAuthenticationDetail
    def set_WebAuthenticationDetail(self, WebAuthenticationDetail): self.WebAuthenticationDetail = WebAuthenticationDetail
    def get_ClientDetail(self): return self.ClientDetail
    def set_ClientDetail(self, ClientDetail): self.ClientDetail = ClientDetail
    def get_TransactionDetail(self): return self.TransactionDetail
    def set_TransactionDetail(self, TransactionDetail): self.TransactionDetail = TransactionDetail
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Origin(self): return self.Origin
    def set_Origin(self, Origin): self.Origin = Origin
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_CarrierCode(self): return self.CarrierCode
    def set_CarrierCode(self, CarrierCode): self.CarrierCode = CarrierCode
    def validate_CarrierCodeType(self, value):
        # Validate type CarrierCodeType, a restriction on xs:string.
        pass
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def validate_ServiceType(self, value):
        # Validate type ServiceType, a restriction on xs:string.
        pass
    def get_Packaging(self): return self.Packaging
    def set_Packaging(self, Packaging): self.Packaging = Packaging
    def validate_PackagingType(self, value):
        # Validate type PackagingType, a restriction on xs:string.
        pass
    def export(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceAvailabilityRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='ServiceAvailabilityRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='ServiceAvailabilityRequest', fromsubclass_=False):
        if self.WebAuthenticationDetail:
            self.WebAuthenticationDetail.export(outfile, level, namespace_, name_='WebAuthenticationDetail', )
        if self.ClientDetail:
            self.ClientDetail.export(outfile, level, namespace_, name_='ClientDetail', )
        if self.TransactionDetail:
            self.TransactionDetail.export(outfile, level, namespace_, name_='TransactionDetail')
        if self.Version:
            self.Version.export(outfile, level, namespace_, name_='Version', )
        if self.Origin:
            self.Origin.export(outfile, level, namespace_, name_='Origin', )
        if self.Destination:
            self.Destination.export(outfile, level, namespace_, name_='Destination', )
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipDate>%s</%sShipDate>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCarrierCode>%s</%sCarrierCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CarrierCode).encode(ExternalEncoding), input_name='CarrierCode'), namespace_))
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('<%sService>%s</%sService>\n' % (namespace_, self.gds_format_string(quote_xml(self.Service).encode(ExternalEncoding), input_name='Service'), namespace_))
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('<%sPackaging>%s</%sPackaging>\n' % (namespace_, self.gds_format_string(quote_xml(self.Packaging).encode(ExternalEncoding), input_name='Packaging'), namespace_))
    def hasContent_(self):
        if (
            self.WebAuthenticationDetail is not None or
            self.ClientDetail is not None or
            self.TransactionDetail is not None or
            self.Version is not None or
            self.Origin is not None or
            self.Destination is not None or
            self.ShipDate is not None or
            self.CarrierCode is not None or
            self.Service is not None or
            self.Packaging is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceAvailabilityRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.WebAuthenticationDetail is not None:
            showIndent(outfile, level)
            outfile.write('WebAuthenticationDetail=model_.WebAuthenticationDetail(\n')
            self.WebAuthenticationDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClientDetail is not None:
            showIndent(outfile, level)
            outfile.write('ClientDetail=model_.ClientDetail(\n')
            self.ClientDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransactionDetail is not None:
            showIndent(outfile, level)
            outfile.write('TransactionDetail=model_.TransactionDetail(\n')
            self.TransactionDetail.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Version is not None:
            showIndent(outfile, level)
            outfile.write('Version=model_.VersionId(\n')
            self.Version.exportLiteral(outfile, level, name_='Version')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Origin is not None:
            showIndent(outfile, level)
            outfile.write('Origin=model_.Address(\n')
            self.Origin.exportLiteral(outfile, level, name_='Origin')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=model_.Address(\n')
            self.Destination.exportLiteral(outfile, level, name_='Destination')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.CarrierCode is not None:
            showIndent(outfile, level)
            outfile.write('CarrierCode=%s,\n' % quote_python(self.CarrierCode).encode(ExternalEncoding))
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=%s,\n' % quote_python(self.Service).encode(ExternalEncoding))
        if self.Packaging is not None:
            showIndent(outfile, level)
            outfile.write('Packaging=%s,\n' % quote_python(self.Packaging).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'WebAuthenticationDetail':
            obj_ = WebAuthenticationDetail.factory()
            obj_.build(child_)
            self.set_WebAuthenticationDetail(obj_)
        elif nodeName_ == 'ClientDetail':
            obj_ = ClientDetail.factory()
            obj_.build(child_)
            self.set_ClientDetail(obj_)
        elif nodeName_ == 'TransactionDetail':
            obj_ = TransactionDetail.factory()
            obj_.build(child_)
            self.set_TransactionDetail(obj_)
        elif nodeName_ == 'Version':
            obj_ = VersionId.factory()
            obj_.build(child_)
            self.set_Version(obj_)
        elif nodeName_ == 'Origin':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Origin(obj_)
        elif nodeName_ == 'Destination':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Destination(obj_)
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'CarrierCode':
            CarrierCode_ = child_.text
            CarrierCode_ = self.gds_validate_string(CarrierCode_, node, 'CarrierCode')
            self.CarrierCode = CarrierCode_
            self.validate_CarrierCodeType(self.CarrierCode)    # validate type CarrierCodeType
        elif nodeName_ == 'Service':
            Service_ = child_.text
            Service_ = self.gds_validate_string(Service_, node, 'Service')
            self.Service = Service_
            self.validate_ServiceType(self.Service)    # validate type ServiceType
        elif nodeName_ == 'Packaging':
            Packaging_ = child_.text
            Packaging_ = self.gds_validate_string(Packaging_, node, 'Packaging')
            self.Packaging = Packaging_
            self.validate_PackagingType(self.Packaging)    # validate type PackagingType
# end class ServiceAvailabilityRequest


class TransactionDetail(GeneratedsSuper):
    """The descriptive data that governs data payload
    language/translations."""
    subclass = None
    superclass = None
    def __init__(self, CustomerTransactionId=None, Localization=None):
        self.CustomerTransactionId = CustomerTransactionId
        self.Localization = Localization
    def factory(*args_, **kwargs_):
        if TransactionDetail.subclass:
            return TransactionDetail.subclass(*args_, **kwargs_)
        else:
            return TransactionDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerTransactionId(self): return self.CustomerTransactionId
    def set_CustomerTransactionId(self, CustomerTransactionId): self.CustomerTransactionId = CustomerTransactionId
    def get_Localization(self): return self.Localization
    def set_Localization(self, Localization): self.Localization = Localization
    def export(self, outfile, level, namespace_='ns:', name_='TransactionDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='TransactionDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='TransactionDetail', fromsubclass_=False):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerTransactionId>%s</%sCustomerTransactionId>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerTransactionId).encode(ExternalEncoding), input_name='CustomerTransactionId'), namespace_))
        if self.Localization:
            self.Localization.export(outfile, level, namespace_, name_='Localization')
    def hasContent_(self):
        if (
            self.CustomerTransactionId is not None or
            self.Localization is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerTransactionId is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTransactionId=%s,\n' % quote_python(self.CustomerTransactionId).encode(ExternalEncoding))
        if self.Localization is not None:
            showIndent(outfile, level)
            outfile.write('Localization=model_.Localization(\n')
            self.Localization.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerTransactionId':
            CustomerTransactionId_ = child_.text
            CustomerTransactionId_ = self.gds_validate_string(CustomerTransactionId_, node, 'CustomerTransactionId')
            self.CustomerTransactionId = CustomerTransactionId_
        elif nodeName_ == 'Localization':
            obj_ = Localization.factory()
            obj_.build(child_)
            self.set_Localization(obj_)
# end class TransactionDetail


class WebAuthenticationDetail(GeneratedsSuper):
    """Used in authentication of the sender's identity."""
    subclass = None
    superclass = None
    def __init__(self, UserCredential=None):
        self.UserCredential = UserCredential
    def factory(*args_, **kwargs_):
        if WebAuthenticationDetail.subclass:
            return WebAuthenticationDetail.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationDetail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UserCredential(self): return self.UserCredential
    def set_UserCredential(self, UserCredential): self.UserCredential = UserCredential
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationDetail')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationDetail'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationDetail', fromsubclass_=False):
        if self.UserCredential:
            self.UserCredential.export(outfile, level, namespace_, name_='UserCredential', )
    def hasContent_(self):
        if (
            self.UserCredential is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationDetail'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UserCredential is not None:
            showIndent(outfile, level)
            outfile.write('UserCredential=model_.WebAuthenticationCredential(\n')
            self.UserCredential.exportLiteral(outfile, level, name_='UserCredential')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UserCredential':
            obj_ = WebAuthenticationCredential.factory()
            obj_.build(child_)
            self.set_UserCredential(obj_)
# end class WebAuthenticationDetail


class WebAuthenticationCredential(GeneratedsSuper):
    """Two part authentication string used for the sender's identity"""
    subclass = None
    superclass = None
    def __init__(self, Key=None, Password=None):
        self.Key = Key
        self.Password = Password
    def factory(*args_, **kwargs_):
        if WebAuthenticationCredential.subclass:
            return WebAuthenticationCredential.subclass(*args_, **kwargs_)
        else:
            return WebAuthenticationCredential(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Key(self): return self.Key
    def set_Key(self, Key): self.Key = Key
    def get_Password(self): return self.Password
    def set_Password(self, Password): self.Password = Password
    def export(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WebAuthenticationCredential')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='WebAuthenticationCredential'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='WebAuthenticationCredential', fromsubclass_=False):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('<%sKey>%s</%sKey>\n' % (namespace_, self.gds_format_string(quote_xml(self.Key).encode(ExternalEncoding), input_name='Key'), namespace_))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('<%sPassword>%s</%sPassword>\n' % (namespace_, self.gds_format_string(quote_xml(self.Password).encode(ExternalEncoding), input_name='Password'), namespace_))
    def hasContent_(self):
        if (
            self.Key is not None or
            self.Password is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WebAuthenticationCredential'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Key is not None:
            showIndent(outfile, level)
            outfile.write('Key=%s,\n' % quote_python(self.Key).encode(ExternalEncoding))
        if self.Password is not None:
            showIndent(outfile, level)
            outfile.write('Password=%s,\n' % quote_python(self.Password).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Key':
            Key_ = child_.text
            Key_ = self.gds_validate_string(Key_, node, 'Key')
            self.Key = Key_
        elif nodeName_ == 'Password':
            Password_ = child_.text
            Password_ = self.gds_validate_string(Password_, node, 'Password')
            self.Password = Password_
# end class WebAuthenticationCredential


class VersionId(GeneratedsSuper):
    """Identifies the version/level of a service operation expected by a
    caller (in each request) and performed by the callee (in each
    reply)."""
    subclass = None
    superclass = None
    def __init__(self, ServiceId=None, Major=None, Intermediate=None, Minor=None):
        self.ServiceId = ServiceId
        self.Major = Major
        self.Intermediate = Intermediate
        self.Minor = Minor
    def factory(*args_, **kwargs_):
        if VersionId.subclass:
            return VersionId.subclass(*args_, **kwargs_)
        else:
            return VersionId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServiceId(self): return self.ServiceId
    def set_ServiceId(self, ServiceId): self.ServiceId = ServiceId
    def get_Major(self): return self.Major
    def set_Major(self, Major): self.Major = Major
    def get_Intermediate(self): return self.Intermediate
    def set_Intermediate(self, Intermediate): self.Intermediate = Intermediate
    def get_Minor(self): return self.Minor
    def set_Minor(self, Minor): self.Minor = Minor
    def export(self, outfile, level, namespace_='ns:', name_='VersionId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VersionId')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='ns:', name_='VersionId'):
        pass
    def exportChildren(self, outfile, level, namespace_='ns:', name_='VersionId', fromsubclass_=False):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('<%sServiceId>%s</%sServiceId>\n' % (namespace_, self.gds_format_string(quote_xml(self.ServiceId).encode(ExternalEncoding), input_name='ServiceId'), namespace_))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('<%sMajor>%s</%sMajor>\n' % (namespace_, self.gds_format_integer(self.Major, input_name='Major'), namespace_))
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('<%sIntermediate>%s</%sIntermediate>\n' % (namespace_, self.gds_format_integer(self.Intermediate, input_name='Intermediate'), namespace_))
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('<%sMinor>%s</%sMinor>\n' % (namespace_, self.gds_format_integer(self.Minor, input_name='Minor'), namespace_))
    def hasContent_(self):
        if (
            self.ServiceId is not None or
            self.Major is not None or
            self.Intermediate is not None or
            self.Minor is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VersionId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServiceId is not None:
            showIndent(outfile, level)
            outfile.write('ServiceId=%s,\n' % quote_python(self.ServiceId).encode(ExternalEncoding))
        if self.Major is not None:
            showIndent(outfile, level)
            outfile.write('Major=%d,\n' % self.Major)
        if self.Intermediate is not None:
            showIndent(outfile, level)
            outfile.write('Intermediate=%d,\n' % self.Intermediate)
        if self.Minor is not None:
            showIndent(outfile, level)
            outfile.write('Minor=%d,\n' % self.Minor)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServiceId':
            ServiceId_ = child_.text
            ServiceId_ = self.gds_validate_string(ServiceId_, node, 'ServiceId')
            self.ServiceId = ServiceId_
        elif nodeName_ == 'Major':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Major')
            self.Major = ival_
        elif nodeName_ == 'Intermediate':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Intermediate')
            self.Intermediate = ival_
        elif nodeName_ == 'Minor':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Minor')
            self.Minor = ival_
# end class VersionId


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PostalCodeInquiryReply'
        rootClass = PostalCodeInquiryReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PostalCodeInquiryReply'
        rootClass = PostalCodeInquiryReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="PostalCodeInquiryReply",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PostalCodeInquiryReply'
        rootClass = PostalCodeInquiryReply
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from movement import *\n\n')
    sys.stdout.write('import movement as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Address",
    "ClientDetail",
    "Localization",
    "Notification",
    "NotificationParameter",
    "PostalCodeInquiryReply",
    "PostalCodeInquiryRequest",
    "PostalCodeServiceAreaDescription",
    "ServiceAvailabilityOption",
    "ServiceAvailabilityReply",
    "ServiceAvailabilityRequest",
    "TransactionDetail",
    "VersionId",
    "WebAuthenticationCredential",
    "WebAuthenticationDetail"
    ]
