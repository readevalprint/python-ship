#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Tue Dec 06 11:51:38 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class RatingServiceSelectionRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, PickupType=None, CustomerClassification=None, Shipment=None):
        self.Request = Request
        self.PickupType = PickupType
        self.CustomerClassification = CustomerClassification
        self.Shipment = Shipment
    def factory(*args_, **kwargs_):
        if RatingServiceSelectionRequest.subclass:
            return RatingServiceSelectionRequest.subclass(*args_, **kwargs_)
        else:
            return RatingServiceSelectionRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_PickupType(self): return self.PickupType
    def set_PickupType(self, PickupType): self.PickupType = PickupType
    def get_CustomerClassification(self): return self.CustomerClassification
    def set_CustomerClassification(self, CustomerClassification): self.CustomerClassification = CustomerClassification
    def get_Shipment(self): return self.Shipment
    def set_Shipment(self, Shipment): self.Shipment = Shipment
    def export(self, outfile, level, namespace_='', name_='RatingServiceSelectionRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatingServiceSelectionRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RatingServiceSelectionRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RatingServiceSelectionRequest', fromsubclass_=False):
        if self.Request:
            self.Request.export(outfile, level, namespace_, name_='Request', )
        if self.PickupType:
            self.PickupType.export(outfile, level, namespace_, name_='PickupType')
        if self.CustomerClassification:
            self.CustomerClassification.export(outfile, level, namespace_, name_='CustomerClassification')
        if self.Shipment:
            self.Shipment.export(outfile, level, namespace_, name_='Shipment', )
    def hasContent_(self):
        if (
            self.Request is not None or
            self.PickupType is not None or
            self.CustomerClassification is not None or
            self.Shipment is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RatingServiceSelectionRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Request is not None:
            showIndent(outfile, level)
            outfile.write('Request=model_.RequestType(\n')
            self.Request.exportLiteral(outfile, level, name_='Request')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PickupType is not None:
            showIndent(outfile, level)
            outfile.write('PickupType=model_.CodeType(\n')
            self.PickupType.exportLiteral(outfile, level, name_='PickupType')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CustomerClassification is not None:
            showIndent(outfile, level)
            outfile.write('CustomerClassification=model_.CodeType(\n')
            self.CustomerClassification.exportLiteral(outfile, level, name_='CustomerClassification')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Shipment is not None:
            showIndent(outfile, level)
            outfile.write('Shipment=model_.ShipmentType(\n')
            self.Shipment.exportLiteral(outfile, level, name_='Shipment')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.set_Request(obj_)
        elif nodeName_ == 'PickupType':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.set_PickupType(obj_)
        elif nodeName_ == 'CustomerClassification':
            obj_ = CodeType.factory()
            obj_.build(child_)
            self.set_CustomerClassification(obj_)
        elif nodeName_ == 'Shipment':
            obj_ = ShipmentType.factory()
            obj_.build(child_)
            self.set_Shipment(obj_)
# end class RatingServiceSelectionRequest


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestAction=None, RequestOption=None, TransactionReference=None):
        self.RequestAction = RequestAction
        self.RequestOption = RequestOption
        self.TransactionReference = TransactionReference
    def factory(*args_, **kwargs_):
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestAction(self): return self.RequestAction
    def set_RequestAction(self, RequestAction): self.RequestAction = RequestAction
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def export(self, outfile, level, namespace_='', name_='RequestType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequestType', fromsubclass_=False):
        if self.RequestAction is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestAction>%s</%sRequestAction>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestAction).encode(ExternalEncoding), input_name='RequestAction'), namespace_))
        if self.RequestOption is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestOption>%s</%sRequestOption>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestOption).encode(ExternalEncoding), input_name='RequestOption'), namespace_))
        if self.TransactionReference:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference')
    def hasContent_(self):
        if (
            self.RequestAction is not None or
            self.RequestOption is not None or
            self.TransactionReference is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RequestType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.RequestAction is not None:
            showIndent(outfile, level)
            outfile.write('RequestAction=%s,\n' % quote_python(self.RequestAction).encode(ExternalEncoding))
        if self.RequestOption is not None:
            showIndent(outfile, level)
            outfile.write('RequestOption=%s,\n' % quote_python(self.RequestOption).encode(ExternalEncoding))
        if self.TransactionReference is not None:
            showIndent(outfile, level)
            outfile.write('TransactionReference=model_.TransactionReferenceType(\n')
            self.TransactionReference.exportLiteral(outfile, level, name_='TransactionReference')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestAction':
            RequestAction_ = child_.text
            RequestAction_ = self.gds_validate_string(RequestAction_, node, 'RequestAction')
            self.RequestAction = RequestAction_
        elif nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption = RequestOption_
        elif nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.set_TransactionReference(obj_)
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, ToolVersion=None):
        self.CustomerContext = CustomerContext
        self.ToolVersion = ToolVersion
    def factory(*args_, **kwargs_):
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def get_ToolVersion(self): return self.ToolVersion
    def set_ToolVersion(self, ToolVersion): self.ToolVersion = ToolVersion
    def export(self, outfile, level, namespace_='', name_='TransactionReferenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransactionReferenceType', fromsubclass_=False):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerContext).encode(ExternalEncoding), input_name='CustomerContext'), namespace_))
        if self.ToolVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sToolVersion>%s</%sToolVersion>\n' % (namespace_, self.gds_format_string(quote_xml(self.ToolVersion).encode(ExternalEncoding), input_name='ToolVersion'), namespace_))
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.ToolVersion is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('CustomerContext=%s,\n' % quote_python(self.CustomerContext).encode(ExternalEncoding))
        if self.ToolVersion is not None:
            showIndent(outfile, level)
            outfile.write('ToolVersion=%s,\n' % quote_python(self.ToolVersion).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
        elif nodeName_ == 'ToolVersion':
            ToolVersion_ = child_.text
            ToolVersion_ = self.gds_validate_string(ToolVersion_, node, 'ToolVersion')
            self.ToolVersion = ToolVersion_
# end class TransactionReferenceType


class CodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None):
        self.Code = Code
    def factory(*args_, **kwargs_):
        if CodeType.subclass:
            return CodeType.subclass(*args_, **kwargs_)
        else:
            return CodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def export(self, outfile, level, namespace_='', name_='CodeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CodeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CodeType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
# end class CodeType


class CodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='CodeDescriptionType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CodeDescriptionType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodeDescriptionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeDescriptionType


class ShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Shipper=None, ShipTo=None, ShipFrom=None, Service=None, DocumentsOnly=None, Package=None, ShipmentServiceOptions=None, RateInformation=None, InvoiceLineTotal=None):
        self.Shipper = Shipper
        self.ShipTo = ShipTo
        self.ShipFrom = ShipFrom
        self.Service = Service
        self.DocumentsOnly = DocumentsOnly
        if Package is None:
            self.Package = []
        else:
            self.Package = Package
        self.ShipmentServiceOptions = ShipmentServiceOptions
        self.RateInformation = RateInformation
        self.InvoiceLineTotal = InvoiceLineTotal
    def factory(*args_, **kwargs_):
        if ShipmentType.subclass:
            return ShipmentType.subclass(*args_, **kwargs_)
        else:
            return ShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Shipper(self): return self.Shipper
    def set_Shipper(self, Shipper): self.Shipper = Shipper
    def get_ShipTo(self): return self.ShipTo
    def set_ShipTo(self, ShipTo): self.ShipTo = ShipTo
    def get_ShipFrom(self): return self.ShipFrom
    def set_ShipFrom(self, ShipFrom): self.ShipFrom = ShipFrom
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_DocumentsOnly(self): return self.DocumentsOnly
    def set_DocumentsOnly(self, DocumentsOnly): self.DocumentsOnly = DocumentsOnly
    def get_Package(self): return self.Package
    def set_Package(self, Package): self.Package = Package
    def add_Package(self, value): self.Package.append(value)
    def insert_Package(self, index, value): self.Package[index] = value
    def get_ShipmentServiceOptions(self): return self.ShipmentServiceOptions
    def set_ShipmentServiceOptions(self, ShipmentServiceOptions): self.ShipmentServiceOptions = ShipmentServiceOptions
    def get_RateInformation(self): return self.RateInformation
    def set_RateInformation(self, RateInformation): self.RateInformation = RateInformation
    def get_InvoiceLineTotal(self): return self.InvoiceLineTotal
    def set_InvoiceLineTotal(self, InvoiceLineTotal): self.InvoiceLineTotal = InvoiceLineTotal
    def export(self, outfile, level, namespace_='', name_='ShipmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentType', fromsubclass_=False):
        if self.Shipper:
            self.Shipper.export(outfile, level, namespace_, name_='Shipper', )
        if self.ShipTo:
            self.ShipTo.export(outfile, level, namespace_, name_='ShipTo', )
        if self.ShipFrom:
            self.ShipFrom.export(outfile, level, namespace_, name_='ShipFrom')
        if self.Service:
            self.Service.export(outfile, level, namespace_, name_='Service')
        if self.DocumentsOnly is not None:
            showIndent(outfile, level)
            outfile.write('<%sDocumentsOnly>%s</%sDocumentsOnly>\n' % (namespace_, self.gds_format_string(quote_xml(self.DocumentsOnly).encode(ExternalEncoding), input_name='DocumentsOnly'), namespace_))
        for Package_ in self.Package:
            Package_.export(outfile, level, namespace_, name_='Package')
        if self.ShipmentServiceOptions:
            self.ShipmentServiceOptions.export(outfile, level, namespace_, name_='ShipmentServiceOptions')
        if self.RateInformation:
            self.RateInformation.export(outfile, level, namespace_, name_='RateInformation')
        if self.InvoiceLineTotal:
            self.InvoiceLineTotal.export(outfile, level, namespace_, name_='InvoiceLineTotal')
    def hasContent_(self):
        if (
            self.Shipper is not None or
            self.ShipTo is not None or
            self.ShipFrom is not None or
            self.Service is not None or
            self.DocumentsOnly is not None or
            self.Package or
            self.ShipmentServiceOptions is not None or
            self.RateInformation is not None or
            self.InvoiceLineTotal is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Shipper is not None:
            showIndent(outfile, level)
            outfile.write('Shipper=model_.ShipperType(\n')
            self.Shipper.exportLiteral(outfile, level, name_='Shipper')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipTo is not None:
            showIndent(outfile, level)
            outfile.write('ShipTo=model_.ShipToType(\n')
            self.ShipTo.exportLiteral(outfile, level, name_='ShipTo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipFrom is not None:
            showIndent(outfile, level)
            outfile.write('ShipFrom=model_.ShipFromType(\n')
            self.ShipFrom.exportLiteral(outfile, level, name_='ShipFrom')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=model_.CodeDescriptionType(\n')
            self.Service.exportLiteral(outfile, level, name_='Service')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DocumentsOnly is not None:
            showIndent(outfile, level)
            outfile.write('DocumentsOnly=%s,\n' % quote_python(self.DocumentsOnly).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Package=[\n')
        level += 1
        for Package_ in self.Package:
            showIndent(outfile, level)
            outfile.write('model_.PackageType(\n')
            Package_.exportLiteral(outfile, level, name_='PackageType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ShipmentServiceOptions is not None:
            showIndent(outfile, level)
            outfile.write('ShipmentServiceOptions=model_.ShipmentServiceOptionsType(\n')
            self.ShipmentServiceOptions.exportLiteral(outfile, level, name_='ShipmentServiceOptions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RateInformation is not None:
            showIndent(outfile, level)
            outfile.write('RateInformation=model_.RateInformationType(\n')
            self.RateInformation.exportLiteral(outfile, level, name_='RateInformation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InvoiceLineTotal is not None:
            showIndent(outfile, level)
            outfile.write('InvoiceLineTotal=model_.InvoiceLineTotalType(\n')
            self.InvoiceLineTotal.exportLiteral(outfile, level, name_='InvoiceLineTotal')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Shipper':
            obj_ = ShipperType.factory()
            obj_.build(child_)
            self.set_Shipper(obj_)
        elif nodeName_ == 'ShipTo':
            obj_ = ShipToType.factory()
            obj_.build(child_)
            self.set_ShipTo(obj_)
        elif nodeName_ == 'ShipFrom':
            obj_ = ShipFromType.factory()
            obj_.build(child_)
            self.set_ShipFrom(obj_)
        elif nodeName_ == 'Service':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.set_Service(obj_)
        elif nodeName_ == 'DocumentsOnly':
            DocumentsOnly_ = child_.text
            DocumentsOnly_ = self.gds_validate_string(DocumentsOnly_, node, 'DocumentsOnly')
            self.DocumentsOnly = DocumentsOnly_
        elif nodeName_ == 'Package':
            obj_ = PackageType.factory()
            obj_.build(child_)
            self.Package.append(obj_)
        elif nodeName_ == 'ShipmentServiceOptions':
            obj_ = ShipmentServiceOptionsType.factory()
            obj_.build(child_)
            self.set_ShipmentServiceOptions(obj_)
        elif nodeName_ == 'RateInformation':
            obj_ = RateInformationType.factory()
            obj_.build(child_)
            self.set_RateInformation(obj_)
        elif nodeName_ == 'InvoiceLineTotal':
            obj_ = InvoiceLineTotalType.factory()
            obj_.build(child_)
            self.set_InvoiceLineTotal(obj_)
# end class ShipmentType


class ShipperType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, ShipperNumber=None, Address=None):
        self.Name = Name
        self.ShipperNumber = ShipperNumber
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ShipperType.subclass:
            return ShipperType.subclass(*args_, **kwargs_)
        else:
            return ShipperType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_ShipperNumber(self): return self.ShipperNumber
    def set_ShipperNumber(self, ShipperNumber): self.ShipperNumber = ShipperNumber
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='', name_='ShipperType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipperType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipperType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipperType', fromsubclass_=False):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('<%sName>%s</%sName>\n' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_))
        if self.ShipperNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sShipperNumber>%s</%sShipperNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.ShipperNumber).encode(ExternalEncoding), input_name='ShipperNumber'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address', )
    def hasContent_(self):
        if (
            self.Name is not None or
            self.ShipperNumber is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipperType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.ShipperNumber is not None:
            showIndent(outfile, level)
            outfile.write('ShipperNumber=%s,\n' % quote_python(self.ShipperNumber).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.AddressType(\n')
            self.Address.exportLiteral(outfile, level, name_='Address')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'ShipperNumber':
            ShipperNumber_ = child_.text
            ShipperNumber_ = self.gds_validate_string(ShipperNumber_, node, 'ShipperNumber')
            self.ShipperNumber = ShipperNumber_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ShipperType


class PhoneNumberType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StructuredPhoneNumber=None):
        self.StructuredPhoneNumber = StructuredPhoneNumber
    def factory(*args_, **kwargs_):
        if PhoneNumberType.subclass:
            return PhoneNumberType.subclass(*args_, **kwargs_)
        else:
            return PhoneNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StructuredPhoneNumber(self): return self.StructuredPhoneNumber
    def set_StructuredPhoneNumber(self, StructuredPhoneNumber): self.StructuredPhoneNumber = StructuredPhoneNumber
    def export(self, outfile, level, namespace_='', name_='PhoneNumberType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PhoneNumberType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PhoneNumberType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PhoneNumberType', fromsubclass_=False):
        if self.StructuredPhoneNumber:
            self.StructuredPhoneNumber.export(outfile, level, namespace_, name_='StructuredPhoneNumber')
    def hasContent_(self):
        if (
            self.StructuredPhoneNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PhoneNumberType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.StructuredPhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('StructuredPhoneNumber=model_.StructuredPhoneNumberType(\n')
            self.StructuredPhoneNumber.exportLiteral(outfile, level, name_='StructuredPhoneNumber')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StructuredPhoneNumber':
            obj_ = StructuredPhoneNumberType.factory()
            obj_.build(child_)
            self.set_StructuredPhoneNumber(obj_)
# end class PhoneNumberType


class StructuredPhoneNumberType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PhoneCountryCode=None, PhoneDialPlanNumber=None, PhoneLineNumber=None, PhoneExtension=None):
        self.PhoneCountryCode = PhoneCountryCode
        self.PhoneDialPlanNumber = PhoneDialPlanNumber
        self.PhoneLineNumber = PhoneLineNumber
        self.PhoneExtension = PhoneExtension
    def factory(*args_, **kwargs_):
        if StructuredPhoneNumberType.subclass:
            return StructuredPhoneNumberType.subclass(*args_, **kwargs_)
        else:
            return StructuredPhoneNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PhoneCountryCode(self): return self.PhoneCountryCode
    def set_PhoneCountryCode(self, PhoneCountryCode): self.PhoneCountryCode = PhoneCountryCode
    def get_PhoneDialPlanNumber(self): return self.PhoneDialPlanNumber
    def set_PhoneDialPlanNumber(self, PhoneDialPlanNumber): self.PhoneDialPlanNumber = PhoneDialPlanNumber
    def get_PhoneLineNumber(self): return self.PhoneLineNumber
    def set_PhoneLineNumber(self, PhoneLineNumber): self.PhoneLineNumber = PhoneLineNumber
    def get_PhoneExtension(self): return self.PhoneExtension
    def set_PhoneExtension(self, PhoneExtension): self.PhoneExtension = PhoneExtension
    def export(self, outfile, level, namespace_='', name_='StructuredPhoneNumberType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StructuredPhoneNumberType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StructuredPhoneNumberType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StructuredPhoneNumberType', fromsubclass_=False):
        if self.PhoneCountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneCountryCode>%s</%sPhoneCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneCountryCode).encode(ExternalEncoding), input_name='PhoneCountryCode'), namespace_))
        if self.PhoneDialPlanNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneDialPlanNumber>%s</%sPhoneDialPlanNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneDialPlanNumber).encode(ExternalEncoding), input_name='PhoneDialPlanNumber'), namespace_))
        if self.PhoneLineNumber is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneLineNumber>%s</%sPhoneLineNumber>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneLineNumber).encode(ExternalEncoding), input_name='PhoneLineNumber'), namespace_))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('<%sPhoneExtension>%s</%sPhoneExtension>\n' % (namespace_, self.gds_format_string(quote_xml(self.PhoneExtension).encode(ExternalEncoding), input_name='PhoneExtension'), namespace_))
    def hasContent_(self):
        if (
            self.PhoneCountryCode is not None or
            self.PhoneDialPlanNumber is not None or
            self.PhoneLineNumber is not None or
            self.PhoneExtension is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='StructuredPhoneNumberType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PhoneCountryCode is not None:
            showIndent(outfile, level)
            outfile.write('PhoneCountryCode=%s,\n' % quote_python(self.PhoneCountryCode).encode(ExternalEncoding))
        if self.PhoneDialPlanNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneDialPlanNumber=%s,\n' % quote_python(self.PhoneDialPlanNumber).encode(ExternalEncoding))
        if self.PhoneLineNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneLineNumber=%s,\n' % quote_python(self.PhoneLineNumber).encode(ExternalEncoding))
        if self.PhoneExtension is not None:
            showIndent(outfile, level)
            outfile.write('PhoneExtension=%s,\n' % quote_python(self.PhoneExtension).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PhoneCountryCode':
            PhoneCountryCode_ = child_.text
            PhoneCountryCode_ = self.gds_validate_string(PhoneCountryCode_, node, 'PhoneCountryCode')
            self.PhoneCountryCode = PhoneCountryCode_
        elif nodeName_ == 'PhoneDialPlanNumber':
            PhoneDialPlanNumber_ = child_.text
            PhoneDialPlanNumber_ = self.gds_validate_string(PhoneDialPlanNumber_, node, 'PhoneDialPlanNumber')
            self.PhoneDialPlanNumber = PhoneDialPlanNumber_
        elif nodeName_ == 'PhoneLineNumber':
            PhoneLineNumber_ = child_.text
            PhoneLineNumber_ = self.gds_validate_string(PhoneLineNumber_, node, 'PhoneLineNumber')
            self.PhoneLineNumber = PhoneLineNumber_
        elif nodeName_ == 'PhoneExtension':
            PhoneExtension_ = child_.text
            PhoneExtension_ = self.gds_validate_string(PhoneExtension_, node, 'PhoneExtension')
            self.PhoneExtension = PhoneExtension_
# end class StructuredPhoneNumberType


class AddressType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AddressLine1=None, AddressLine2=None, AddressLine3=None, City=None, StateProvinceCode=None, PostalCode=None, CountryCode=None, ResidentialAddressIndicator=None):
        self.AddressLine1 = AddressLine1
        self.AddressLine2 = AddressLine2
        self.AddressLine3 = AddressLine3
        self.City = City
        self.StateProvinceCode = StateProvinceCode
        self.PostalCode = PostalCode
        self.CountryCode = CountryCode
        self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def factory(*args_, **kwargs_):
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AddressLine1(self): return self.AddressLine1
    def set_AddressLine1(self, AddressLine1): self.AddressLine1 = AddressLine1
    def get_AddressLine2(self): return self.AddressLine2
    def set_AddressLine2(self, AddressLine2): self.AddressLine2 = AddressLine2
    def get_AddressLine3(self): return self.AddressLine3
    def set_AddressLine3(self, AddressLine3): self.AddressLine3 = AddressLine3
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_StateProvinceCode(self): return self.StateProvinceCode
    def set_StateProvinceCode(self, StateProvinceCode): self.StateProvinceCode = StateProvinceCode
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_ResidentialAddressIndicator(self): return self.ResidentialAddressIndicator
    def set_ResidentialAddressIndicator(self, ResidentialAddressIndicator): self.ResidentialAddressIndicator = ResidentialAddressIndicator
    def export(self, outfile, level, namespace_='', name_='AddressType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressType', fromsubclass_=False):
        if self.AddressLine1 is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressLine1>%s</%sAddressLine1>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressLine1).encode(ExternalEncoding), input_name='AddressLine1'), namespace_))
        if self.AddressLine2 is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressLine2>%s</%sAddressLine2>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressLine2).encode(ExternalEncoding), input_name='AddressLine2'), namespace_))
        if self.AddressLine3 is not None:
            showIndent(outfile, level)
            outfile.write('<%sAddressLine3>%s</%sAddressLine3>\n' % (namespace_, self.gds_format_string(quote_xml(self.AddressLine3).encode(ExternalEncoding), input_name='AddressLine3'), namespace_))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('<%sCity>%s</%sCity>\n' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sStateProvinceCode>%s</%sStateProvinceCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.StateProvinceCode).encode(ExternalEncoding), input_name='StateProvinceCode'), namespace_))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostalCode>%s</%sPostalCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
        if self.ResidentialAddressIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sResidentialAddressIndicator>%s</%sResidentialAddressIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.ResidentialAddressIndicator).encode(ExternalEncoding), input_name='ResidentialAddressIndicator'), namespace_))
    def hasContent_(self):
        if (
            self.AddressLine1 is not None or
            self.AddressLine2 is not None or
            self.AddressLine3 is not None or
            self.City is not None or
            self.StateProvinceCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.ResidentialAddressIndicator is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AddressLine1 is not None:
            showIndent(outfile, level)
            outfile.write('AddressLine1=%s,\n' % quote_python(self.AddressLine1).encode(ExternalEncoding))
        if self.AddressLine2 is not None:
            showIndent(outfile, level)
            outfile.write('AddressLine2=%s,\n' % quote_python(self.AddressLine2).encode(ExternalEncoding))
        if self.AddressLine3 is not None:
            showIndent(outfile, level)
            outfile.write('AddressLine3=%s,\n' % quote_python(self.AddressLine3).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.StateProvinceCode is not None:
            showIndent(outfile, level)
            outfile.write('StateProvinceCode=%s,\n' % quote_python(self.StateProvinceCode).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
        if self.ResidentialAddressIndicator is not None:
            showIndent(outfile, level)
            outfile.write('ResidentialAddressIndicator=%s,\n' % quote_python(self.ResidentialAddressIndicator).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AddressLine1':
            AddressLine1_ = child_.text
            AddressLine1_ = self.gds_validate_string(AddressLine1_, node, 'AddressLine1')
            self.AddressLine1 = AddressLine1_
        elif nodeName_ == 'AddressLine2':
            AddressLine2_ = child_.text
            AddressLine2_ = self.gds_validate_string(AddressLine2_, node, 'AddressLine2')
            self.AddressLine2 = AddressLine2_
        elif nodeName_ == 'AddressLine3':
            AddressLine3_ = child_.text
            AddressLine3_ = self.gds_validate_string(AddressLine3_, node, 'AddressLine3')
            self.AddressLine3 = AddressLine3_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'StateProvinceCode':
            StateProvinceCode_ = child_.text
            StateProvinceCode_ = self.gds_validate_string(StateProvinceCode_, node, 'StateProvinceCode')
            self.StateProvinceCode = StateProvinceCode_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
        elif nodeName_ == 'ResidentialAddressIndicator':
            ResidentialAddressIndicator_ = child_.text
            ResidentialAddressIndicator_ = self.gds_validate_string(ResidentialAddressIndicator_, node, 'ResidentialAddressIndicator')
            self.ResidentialAddressIndicator = ResidentialAddressIndicator_
# end class AddressType


class ShipToType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None):
        self.CompanyName = CompanyName
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ShipToType.subclass:
            return ShipToType.subclass(*args_, **kwargs_)
        else:
            return ShipToType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='', name_='ShipToType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipToType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipToType', fromsubclass_=False):
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address', )
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipToType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.AddressType(\n')
            self.Address.exportLiteral(outfile, level, name_='Address')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ShipToType


class ShipFromType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompanyName=None, Address=None):
        self.CompanyName = CompanyName
        self.Address = Address
    def factory(*args_, **kwargs_):
        if ShipFromType.subclass:
            return ShipFromType.subclass(*args_, **kwargs_)
        else:
            return ShipFromType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def export(self, outfile, level, namespace_='', name_='ShipFromType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipFromType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipFromType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipFromType', fromsubclass_=False):
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('<%sCompanyName>%s</%sCompanyName>\n' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_))
        if self.Address:
            self.Address.export(outfile, level, namespace_, name_='Address', )
    def hasContent_(self):
        if (
            self.CompanyName is not None or
            self.Address is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipFromType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.AddressType(\n')
            self.Address.exportLiteral(outfile, level, name_='Address')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory()
            obj_.build(child_)
            self.set_Address(obj_)
# end class ShipFromType


class WeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def export(self, outfile, level, namespace_='', name_='WeightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='WeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='WeightType', fromsubclass_=False):
        if self.UnitOfMeasurement:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', )
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeight>%s</%sWeight>\n' % (namespace_, self.gds_format_string(quote_xml(self.Weight).encode(ExternalEncoding), input_name='Weight'), namespace_))
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WeightType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UnitOfMeasurement is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasurement=model_.UnitOfMeasurementType(\n')
            self.UnitOfMeasurement.exportLiteral(outfile, level, name_='UnitOfMeasurement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=%s,\n' % quote_python(self.Weight).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.set_UnitOfMeasurement(obj_)
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class WeightType


class UnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='UnitOfMeasurementType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnitOfMeasurementType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnitOfMeasurementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UnitOfMeasurementType


class PackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PackagingType=None, Dimensions=None, PackageWeight=None, LargePackageIndicator=None, PackageServiceOptions=None, AdditionalHandling=None):
        self.PackagingType = PackagingType
        self.Dimensions = Dimensions
        self.PackageWeight = PackageWeight
        self.LargePackageIndicator = LargePackageIndicator
        self.PackageServiceOptions = PackageServiceOptions
        self.AdditionalHandling = AdditionalHandling
    def factory(*args_, **kwargs_):
        if PackageType.subclass:
            return PackageType.subclass(*args_, **kwargs_)
        else:
            return PackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PackagingType(self): return self.PackagingType
    def set_PackagingType(self, PackagingType): self.PackagingType = PackagingType
    def get_Dimensions(self): return self.Dimensions
    def set_Dimensions(self, Dimensions): self.Dimensions = Dimensions
    def get_PackageWeight(self): return self.PackageWeight
    def set_PackageWeight(self, PackageWeight): self.PackageWeight = PackageWeight
    def get_LargePackageIndicator(self): return self.LargePackageIndicator
    def set_LargePackageIndicator(self, LargePackageIndicator): self.LargePackageIndicator = LargePackageIndicator
    def get_PackageServiceOptions(self): return self.PackageServiceOptions
    def set_PackageServiceOptions(self, PackageServiceOptions): self.PackageServiceOptions = PackageServiceOptions
    def get_AdditionalHandling(self): return self.AdditionalHandling
    def set_AdditionalHandling(self, AdditionalHandling): self.AdditionalHandling = AdditionalHandling
    def export(self, outfile, level, namespace_='', name_='PackageType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackageType', fromsubclass_=False):
        if self.PackagingType:
            self.PackagingType.export(outfile, level, namespace_, name_='PackagingType')
        if self.Dimensions:
            self.Dimensions.export(outfile, level, namespace_, name_='Dimensions')
        if self.PackageWeight:
            self.PackageWeight.export(outfile, level, namespace_, name_='PackageWeight')
        if self.LargePackageIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sLargePackageIndicator>%s</%sLargePackageIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.LargePackageIndicator).encode(ExternalEncoding), input_name='LargePackageIndicator'), namespace_))
        if self.PackageServiceOptions:
            self.PackageServiceOptions.export(outfile, level, namespace_, name_='PackageServiceOptions')
        if self.AdditionalHandling is not None:
            showIndent(outfile, level)
            outfile.write('<%sAdditionalHandling>%s</%sAdditionalHandling>\n' % (namespace_, self.gds_format_string(quote_xml(self.AdditionalHandling).encode(ExternalEncoding), input_name='AdditionalHandling'), namespace_))
    def hasContent_(self):
        if (
            self.PackagingType is not None or
            self.Dimensions is not None or
            self.PackageWeight is not None or
            self.LargePackageIndicator is not None or
            self.PackageServiceOptions is not None or
            self.AdditionalHandling is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PackageType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PackagingType is not None:
            showIndent(outfile, level)
            outfile.write('PackagingType=model_.CodeDescriptionType(\n')
            self.PackagingType.exportLiteral(outfile, level, name_='PackagingType')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Dimensions is not None:
            showIndent(outfile, level)
            outfile.write('Dimensions=model_.DimensionsType(\n')
            self.Dimensions.exportLiteral(outfile, level, name_='Dimensions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PackageWeight is not None:
            showIndent(outfile, level)
            outfile.write('PackageWeight=model_.WeightType(\n')
            self.PackageWeight.exportLiteral(outfile, level, name_='PackageWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.LargePackageIndicator is not None:
            showIndent(outfile, level)
            outfile.write('LargePackageIndicator=%s,\n' % quote_python(self.LargePackageIndicator).encode(ExternalEncoding))
        if self.PackageServiceOptions is not None:
            showIndent(outfile, level)
            outfile.write('PackageServiceOptions=model_.PackageServiceOptionsType(\n')
            self.PackageServiceOptions.exportLiteral(outfile, level, name_='PackageServiceOptions')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AdditionalHandling is not None:
            showIndent(outfile, level)
            outfile.write('AdditionalHandling=%s,\n' % quote_python(self.AdditionalHandling).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PackagingType':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.set_PackagingType(obj_)
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionsType.factory()
            obj_.build(child_)
            self.set_Dimensions(obj_)
        elif nodeName_ == 'PackageWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.set_PackageWeight(obj_)
        elif nodeName_ == 'LargePackageIndicator':
            LargePackageIndicator_ = child_.text
            LargePackageIndicator_ = self.gds_validate_string(LargePackageIndicator_, node, 'LargePackageIndicator')
            self.LargePackageIndicator = LargePackageIndicator_
        elif nodeName_ == 'PackageServiceOptions':
            obj_ = PackageServiceOptionsType.factory()
            obj_.build(child_)
            self.set_PackageServiceOptions(obj_)
        elif nodeName_ == 'AdditionalHandling':
            AdditionalHandling_ = child_.text
            AdditionalHandling_ = self.gds_validate_string(AdditionalHandling_, node, 'AdditionalHandling')
            self.AdditionalHandling = AdditionalHandling_
# end class PackageType


class PackagingTypeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if PackagingTypeType.subclass:
            return PackagingTypeType.subclass(*args_, **kwargs_)
        else:
            return PackagingTypeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='PackagingTypeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackagingTypeType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackagingTypeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackagingTypeType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PackagingTypeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class PackagingTypeType


class DimensionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Length=None, Width=None, Height=None):
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Length = Length
        self.Width = Width
        self.Height = Height
    def factory(*args_, **kwargs_):
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Length(self): return self.Length
    def set_Length(self, Length): self.Length = Length
    def get_Width(self): return self.Width
    def set_Width(self, Width): self.Width = Width
    def get_Height(self): return self.Height
    def set_Height(self, Height): self.Height = Height
    def export(self, outfile, level, namespace_='', name_='DimensionsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DimensionsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DimensionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DimensionsType', fromsubclass_=False):
        if self.UnitOfMeasurement:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement')
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('<%sLength>%s</%sLength>\n' % (namespace_, self.gds_format_string(quote_xml(self.Length).encode(ExternalEncoding), input_name='Length'), namespace_))
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('<%sWidth>%s</%sWidth>\n' % (namespace_, self.gds_format_string(quote_xml(self.Width).encode(ExternalEncoding), input_name='Width'), namespace_))
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('<%sHeight>%s</%sHeight>\n' % (namespace_, self.gds_format_string(quote_xml(self.Height).encode(ExternalEncoding), input_name='Height'), namespace_))
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Length is not None or
            self.Width is not None or
            self.Height is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DimensionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UnitOfMeasurement is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasurement=model_.UnitOfMeasurementType(\n')
            self.UnitOfMeasurement.exportLiteral(outfile, level, name_='UnitOfMeasurement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Length is not None:
            showIndent(outfile, level)
            outfile.write('Length=%s,\n' % quote_python(self.Length).encode(ExternalEncoding))
        if self.Width is not None:
            showIndent(outfile, level)
            outfile.write('Width=%s,\n' % quote_python(self.Width).encode(ExternalEncoding))
        if self.Height is not None:
            showIndent(outfile, level)
            outfile.write('Height=%s,\n' % quote_python(self.Height).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.set_UnitOfMeasurement(obj_)
        elif nodeName_ == 'Length':
            Length_ = child_.text
            Length_ = self.gds_validate_string(Length_, node, 'Length')
            self.Length = Length_
        elif nodeName_ == 'Width':
            Width_ = child_.text
            Width_ = self.gds_validate_string(Width_, node, 'Width')
            self.Width = Width_
        elif nodeName_ == 'Height':
            Height_ = child_.text
            Height_ = self.gds_validate_string(Height_, node, 'Height')
            self.Height = Height_
# end class DimensionsType


class PackageServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InsuredValue=None, COD=None, DeliveryConfirmation=None, VerbalConfirmation=None):
        self.InsuredValue = InsuredValue
        self.COD = COD
        self.DeliveryConfirmation = DeliveryConfirmation
        self.VerbalConfirmation = VerbalConfirmation
    def factory(*args_, **kwargs_):
        if PackageServiceOptionsType.subclass:
            return PackageServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return PackageServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_InsuredValue(self): return self.InsuredValue
    def set_InsuredValue(self, InsuredValue): self.InsuredValue = InsuredValue
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_VerbalConfirmation(self): return self.VerbalConfirmation
    def set_VerbalConfirmation(self, VerbalConfirmation): self.VerbalConfirmation = VerbalConfirmation
    def export(self, outfile, level, namespace_='', name_='PackageServiceOptionsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PackageServiceOptionsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PackageServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PackageServiceOptionsType', fromsubclass_=False):
        if self.InsuredValue:
            self.InsuredValue.export(outfile, level, namespace_, name_='InsuredValue')
        if self.COD:
            self.COD.export(outfile, level, namespace_, name_='COD')
        if self.DeliveryConfirmation:
            self.DeliveryConfirmation.export(outfile, level, namespace_, name_='DeliveryConfirmation')
        if self.VerbalConfirmation:
            self.VerbalConfirmation.export(outfile, level, namespace_, name_='VerbalConfirmation')
    def hasContent_(self):
        if (
            self.InsuredValue is not None or
            self.COD is not None or
            self.DeliveryConfirmation is not None or
            self.VerbalConfirmation is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PackageServiceOptionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.InsuredValue is not None:
            showIndent(outfile, level)
            outfile.write('InsuredValue=model_.InsuredValueType(\n')
            self.InsuredValue.exportLiteral(outfile, level, name_='InsuredValue')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COD is not None:
            showIndent(outfile, level)
            outfile.write('COD=model_.CODType(\n')
            self.COD.exportLiteral(outfile, level, name_='COD')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DeliveryConfirmation is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryConfirmation=model_.DeliveryConfirmationType(\n')
            self.DeliveryConfirmation.exportLiteral(outfile, level, name_='DeliveryConfirmation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.VerbalConfirmation is not None:
            showIndent(outfile, level)
            outfile.write('VerbalConfirmation=model_.VerbalConfirmationType(\n')
            self.VerbalConfirmation.exportLiteral(outfile, level, name_='VerbalConfirmation')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InsuredValue':
            obj_ = InsuredValueType.factory()
            obj_.build(child_)
            self.set_InsuredValue(obj_)
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.set_COD(obj_)
        elif nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory()
            obj_.build(child_)
            self.set_DeliveryConfirmation(obj_)
        elif nodeName_ == 'VerbalConfirmation':
            obj_ = VerbalConfirmationType.factory()
            obj_.build(child_)
            self.set_VerbalConfirmation(obj_)
# end class PackageServiceOptionsType


class InsuredValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if InsuredValueType.subclass:
            return InsuredValueType.subclass(*args_, **kwargs_)
        else:
            return InsuredValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def export(self, outfile, level, namespace_='', name_='InsuredValueType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InsuredValueType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InsuredValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InsuredValueType', fromsubclass_=False):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyCode).encode(ExternalEncoding), input_name='CurrencyCode'), namespace_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.MonetaryValue).encode(ExternalEncoding), input_name='MonetaryValue'), namespace_))
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InsuredValueType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyCode=%s,\n' % quote_python(self.CurrencyCode).encode(ExternalEncoding))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('MonetaryValue=%s,\n' % quote_python(self.MonetaryValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InsuredValueType


class CODType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CODFundsCode=None, CODAmount=None):
        self.CODFundsCode = CODFundsCode
        self.CODAmount = CODAmount
    def factory(*args_, **kwargs_):
        if CODType.subclass:
            return CODType.subclass(*args_, **kwargs_)
        else:
            return CODType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CODFundsCode(self): return self.CODFundsCode
    def set_CODFundsCode(self, CODFundsCode): self.CODFundsCode = CODFundsCode
    def get_CODAmount(self): return self.CODAmount
    def set_CODAmount(self, CODAmount): self.CODAmount = CODAmount
    def export(self, outfile, level, namespace_='', name_='CODType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CODType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CODType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CODType', fromsubclass_=False):
        if self.CODFundsCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCODFundsCode>%s</%sCODFundsCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CODFundsCode).encode(ExternalEncoding), input_name='CODFundsCode'), namespace_))
        if self.CODAmount:
            self.CODAmount.export(outfile, level, namespace_, name_='CODAmount', )
    def hasContent_(self):
        if (
            self.CODFundsCode is not None or
            self.CODAmount is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CODType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CODFundsCode is not None:
            showIndent(outfile, level)
            outfile.write('CODFundsCode=%s,\n' % quote_python(self.CODFundsCode).encode(ExternalEncoding))
        if self.CODAmount is not None:
            showIndent(outfile, level)
            outfile.write('CODAmount=model_.AmountType(\n')
            self.CODAmount.exportLiteral(outfile, level, name_='CODAmount')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CODFundsCode':
            CODFundsCode_ = child_.text
            CODFundsCode_ = self.gds_validate_string(CODFundsCode_, node, 'CODFundsCode')
            self.CODFundsCode = CODFundsCode_
        elif nodeName_ == 'CODAmount':
            obj_ = AmountType.factory()
            obj_.build(child_)
            self.set_CODAmount(obj_)
# end class CODType


class AmountType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if AmountType.subclass:
            return AmountType.subclass(*args_, **kwargs_)
        else:
            return AmountType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def export(self, outfile, level, namespace_='', name_='AmountType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AmountType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AmountType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AmountType', fromsubclass_=False):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyCode).encode(ExternalEncoding), input_name='CurrencyCode'), namespace_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.MonetaryValue).encode(ExternalEncoding), input_name='MonetaryValue'), namespace_))
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AmountType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyCode=%s,\n' % quote_python(self.CurrencyCode).encode(ExternalEncoding))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('MonetaryValue=%s,\n' % quote_python(self.MonetaryValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class AmountType


class DeliveryConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DCISType=None):
        self.DCISType = DCISType
    def factory(*args_, **kwargs_):
        if DeliveryConfirmationType.subclass:
            return DeliveryConfirmationType.subclass(*args_, **kwargs_)
        else:
            return DeliveryConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DCISType(self): return self.DCISType
    def set_DCISType(self, DCISType): self.DCISType = DCISType
    def export(self, outfile, level, namespace_='', name_='DeliveryConfirmationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryConfirmationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DeliveryConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DeliveryConfirmationType', fromsubclass_=False):
        if self.DCISType is not None:
            showIndent(outfile, level)
            outfile.write('<%sDCISType>%s</%sDCISType>\n' % (namespace_, self.gds_format_string(quote_xml(self.DCISType).encode(ExternalEncoding), input_name='DCISType'), namespace_))
    def hasContent_(self):
        if (
            self.DCISType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DeliveryConfirmationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.DCISType is not None:
            showIndent(outfile, level)
            outfile.write('DCISType=%s,\n' % quote_python(self.DCISType).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DCISType':
            DCISType_ = child_.text
            DCISType_ = self.gds_validate_string(DCISType_, node, 'DCISType')
            self.DCISType = DCISType_
# end class DeliveryConfirmationType


class VerbalConfirmationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, PhoneNumber=None):
        self.Name = Name
        self.PhoneNumber = PhoneNumber
    def factory(*args_, **kwargs_):
        if VerbalConfirmationType.subclass:
            return VerbalConfirmationType.subclass(*args_, **kwargs_)
        else:
            return VerbalConfirmationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_PhoneNumber(self): return self.PhoneNumber
    def set_PhoneNumber(self, PhoneNumber): self.PhoneNumber = PhoneNumber
    def export(self, outfile, level, namespace_='', name_='VerbalConfirmationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VerbalConfirmationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VerbalConfirmationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VerbalConfirmationType', fromsubclass_=False):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('<%sName>%s</%sName>\n' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_))
        if self.PhoneNumber:
            self.PhoneNumber.export(outfile, level, namespace_, name_='PhoneNumber')
    def hasContent_(self):
        if (
            self.Name is not None or
            self.PhoneNumber is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VerbalConfirmationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.PhoneNumber is not None:
            showIndent(outfile, level)
            outfile.write('PhoneNumber=model_.PhoneNumberType(\n')
            self.PhoneNumber.exportLiteral(outfile, level, name_='PhoneNumber')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'PhoneNumber':
            obj_ = PhoneNumberType.factory()
            obj_.build(child_)
            self.set_PhoneNumber(obj_)
# end class VerbalConfirmationType


class ShipmentServiceOptionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SaturdayPickup=None, SaturdayDelivery=None, OnCallAir=None, COD=None, ReturnOfDocumentIndicator=None, DeliveryConfirmation=None, UPScarbonneutralIndicator=None):
        self.SaturdayPickup = SaturdayPickup
        self.SaturdayDelivery = SaturdayDelivery
        self.OnCallAir = OnCallAir
        self.COD = COD
        self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
        self.DeliveryConfirmation = DeliveryConfirmation
        self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
    def factory(*args_, **kwargs_):
        if ShipmentServiceOptionsType.subclass:
            return ShipmentServiceOptionsType.subclass(*args_, **kwargs_)
        else:
            return ShipmentServiceOptionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SaturdayPickup(self): return self.SaturdayPickup
    def set_SaturdayPickup(self, SaturdayPickup): self.SaturdayPickup = SaturdayPickup
    def get_SaturdayDelivery(self): return self.SaturdayDelivery
    def set_SaturdayDelivery(self, SaturdayDelivery): self.SaturdayDelivery = SaturdayDelivery
    def get_OnCallAir(self): return self.OnCallAir
    def set_OnCallAir(self, OnCallAir): self.OnCallAir = OnCallAir
    def get_COD(self): return self.COD
    def set_COD(self, COD): self.COD = COD
    def get_ReturnOfDocumentIndicator(self): return self.ReturnOfDocumentIndicator
    def set_ReturnOfDocumentIndicator(self, ReturnOfDocumentIndicator): self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator
    def get_DeliveryConfirmation(self): return self.DeliveryConfirmation
    def set_DeliveryConfirmation(self, DeliveryConfirmation): self.DeliveryConfirmation = DeliveryConfirmation
    def get_UPScarbonneutralIndicator(self): return self.UPScarbonneutralIndicator
    def set_UPScarbonneutralIndicator(self, UPScarbonneutralIndicator): self.UPScarbonneutralIndicator = UPScarbonneutralIndicator
    def export(self, outfile, level, namespace_='', name_='ShipmentServiceOptionsType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipmentServiceOptionsType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipmentServiceOptionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipmentServiceOptionsType', fromsubclass_=False):
        if self.SaturdayPickup is not None:
            showIndent(outfile, level)
            outfile.write('<%sSaturdayPickup>%s</%sSaturdayPickup>\n' % (namespace_, self.gds_format_string(quote_xml(self.SaturdayPickup).encode(ExternalEncoding), input_name='SaturdayPickup'), namespace_))
        if self.SaturdayDelivery is not None:
            showIndent(outfile, level)
            outfile.write('<%sSaturdayDelivery>%s</%sSaturdayDelivery>\n' % (namespace_, self.gds_format_string(quote_xml(self.SaturdayDelivery).encode(ExternalEncoding), input_name='SaturdayDelivery'), namespace_))
        if self.OnCallAir:
            self.OnCallAir.export(outfile, level, namespace_, name_='OnCallAir')
        if self.COD:
            self.COD.export(outfile, level, namespace_, name_='COD')
        if self.ReturnOfDocumentIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sReturnOfDocumentIndicator>%s</%sReturnOfDocumentIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.ReturnOfDocumentIndicator).encode(ExternalEncoding), input_name='ReturnOfDocumentIndicator'), namespace_))
        if self.DeliveryConfirmation:
            self.DeliveryConfirmation.export(outfile, level, namespace_, name_='DeliveryConfirmation')
        if self.UPScarbonneutralIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sUPScarbonneutralIndicator>%s</%sUPScarbonneutralIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.UPScarbonneutralIndicator).encode(ExternalEncoding), input_name='UPScarbonneutralIndicator'), namespace_))
    def hasContent_(self):
        if (
            self.SaturdayPickup is not None or
            self.SaturdayDelivery is not None or
            self.OnCallAir is not None or
            self.COD is not None or
            self.ReturnOfDocumentIndicator is not None or
            self.DeliveryConfirmation is not None or
            self.UPScarbonneutralIndicator is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipmentServiceOptionsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SaturdayPickup is not None:
            showIndent(outfile, level)
            outfile.write('SaturdayPickup=%s,\n' % quote_python(self.SaturdayPickup).encode(ExternalEncoding))
        if self.SaturdayDelivery is not None:
            showIndent(outfile, level)
            outfile.write('SaturdayDelivery=%s,\n' % quote_python(self.SaturdayDelivery).encode(ExternalEncoding))
        if self.OnCallAir is not None:
            showIndent(outfile, level)
            outfile.write('OnCallAir=model_.OnCallAirType(\n')
            self.OnCallAir.exportLiteral(outfile, level, name_='OnCallAir')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COD is not None:
            showIndent(outfile, level)
            outfile.write('COD=model_.CODType(\n')
            self.COD.exportLiteral(outfile, level, name_='COD')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReturnOfDocumentIndicator is not None:
            showIndent(outfile, level)
            outfile.write('ReturnOfDocumentIndicator=%s,\n' % quote_python(self.ReturnOfDocumentIndicator).encode(ExternalEncoding))
        if self.DeliveryConfirmation is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryConfirmation=model_.DeliveryConfirmationType(\n')
            self.DeliveryConfirmation.exportLiteral(outfile, level, name_='DeliveryConfirmation')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.UPScarbonneutralIndicator is not None:
            showIndent(outfile, level)
            outfile.write('UPScarbonneutralIndicator=%s,\n' % quote_python(self.UPScarbonneutralIndicator).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SaturdayPickup':
            SaturdayPickup_ = child_.text
            SaturdayPickup_ = self.gds_validate_string(SaturdayPickup_, node, 'SaturdayPickup')
            self.SaturdayPickup = SaturdayPickup_
        elif nodeName_ == 'SaturdayDelivery':
            SaturdayDelivery_ = child_.text
            SaturdayDelivery_ = self.gds_validate_string(SaturdayDelivery_, node, 'SaturdayDelivery')
            self.SaturdayDelivery = SaturdayDelivery_
        elif nodeName_ == 'OnCallAir':
            obj_ = OnCallAirType.factory()
            obj_.build(child_)
            self.set_OnCallAir(obj_)
        elif nodeName_ == 'COD':
            obj_ = CODType.factory()
            obj_.build(child_)
            self.set_COD(obj_)
        elif nodeName_ == 'ReturnOfDocumentIndicator':
            ReturnOfDocumentIndicator_ = child_.text
            ReturnOfDocumentIndicator_ = self.gds_validate_string(ReturnOfDocumentIndicator_, node, 'ReturnOfDocumentIndicator')
            self.ReturnOfDocumentIndicator = ReturnOfDocumentIndicator_
        elif nodeName_ == 'DeliveryConfirmation':
            obj_ = DeliveryConfirmationType.factory()
            obj_.build(child_)
            self.set_DeliveryConfirmation(obj_)
        elif nodeName_ == 'UPScarbonneutralIndicator':
            UPScarbonneutralIndicator_ = child_.text
            UPScarbonneutralIndicator_ = self.gds_validate_string(UPScarbonneutralIndicator_, node, 'UPScarbonneutralIndicator')
            self.UPScarbonneutralIndicator = UPScarbonneutralIndicator_
# end class ShipmentServiceOptionsType


class OnCallAirType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Schedule=None):
        self.Schedule = Schedule
    def factory(*args_, **kwargs_):
        if OnCallAirType.subclass:
            return OnCallAirType.subclass(*args_, **kwargs_)
        else:
            return OnCallAirType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Schedule(self): return self.Schedule
    def set_Schedule(self, Schedule): self.Schedule = Schedule
    def export(self, outfile, level, namespace_='', name_='OnCallAirType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OnCallAirType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OnCallAirType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OnCallAirType', fromsubclass_=False):
        if self.Schedule:
            self.Schedule.export(outfile, level, namespace_, name_='Schedule')
    def hasContent_(self):
        if (
            self.Schedule is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='OnCallAirType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Schedule is not None:
            showIndent(outfile, level)
            outfile.write('Schedule=model_.ScheduleType(\n')
            self.Schedule.exportLiteral(outfile, level, name_='Schedule')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Schedule':
            obj_ = ScheduleType.factory()
            obj_.build(child_)
            self.set_Schedule(obj_)
# end class OnCallAirType


class ScheduleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PickupDay=None, Method=None):
        self.PickupDay = PickupDay
        self.Method = Method
    def factory(*args_, **kwargs_):
        if ScheduleType.subclass:
            return ScheduleType.subclass(*args_, **kwargs_)
        else:
            return ScheduleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PickupDay(self): return self.PickupDay
    def set_PickupDay(self, PickupDay): self.PickupDay = PickupDay
    def get_Method(self): return self.Method
    def set_Method(self, Method): self.Method = Method
    def export(self, outfile, level, namespace_='', name_='ScheduleType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ScheduleType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ScheduleType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ScheduleType', fromsubclass_=False):
        if self.PickupDay is not None:
            showIndent(outfile, level)
            outfile.write('<%sPickupDay>%s</%sPickupDay>\n' % (namespace_, self.gds_format_string(quote_xml(self.PickupDay).encode(ExternalEncoding), input_name='PickupDay'), namespace_))
        if self.Method is not None:
            showIndent(outfile, level)
            outfile.write('<%sMethod>%s</%sMethod>\n' % (namespace_, self.gds_format_string(quote_xml(self.Method).encode(ExternalEncoding), input_name='Method'), namespace_))
    def hasContent_(self):
        if (
            self.PickupDay is not None or
            self.Method is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ScheduleType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PickupDay is not None:
            showIndent(outfile, level)
            outfile.write('PickupDay=%s,\n' % quote_python(self.PickupDay).encode(ExternalEncoding))
        if self.Method is not None:
            showIndent(outfile, level)
            outfile.write('Method=%s,\n' % quote_python(self.Method).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PickupDay':
            PickupDay_ = child_.text
            PickupDay_ = self.gds_validate_string(PickupDay_, node, 'PickupDay')
            self.PickupDay = PickupDay_
        elif nodeName_ == 'Method':
            Method_ = child_.text
            Method_ = self.gds_validate_string(Method_, node, 'Method')
            self.Method = Method_
# end class ScheduleType


class RateInformationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NegotiatedRatesIndicator=None, RateChartIndicator=None):
        self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
        self.RateChartIndicator = RateChartIndicator
    def factory(*args_, **kwargs_):
        if RateInformationType.subclass:
            return RateInformationType.subclass(*args_, **kwargs_)
        else:
            return RateInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NegotiatedRatesIndicator(self): return self.NegotiatedRatesIndicator
    def set_NegotiatedRatesIndicator(self, NegotiatedRatesIndicator): self.NegotiatedRatesIndicator = NegotiatedRatesIndicator
    def get_RateChartIndicator(self): return self.RateChartIndicator
    def set_RateChartIndicator(self, RateChartIndicator): self.RateChartIndicator = RateChartIndicator
    def export(self, outfile, level, namespace_='', name_='RateInformationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RateInformationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RateInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RateInformationType', fromsubclass_=False):
        if self.NegotiatedRatesIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sNegotiatedRatesIndicator>%s</%sNegotiatedRatesIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.NegotiatedRatesIndicator).encode(ExternalEncoding), input_name='NegotiatedRatesIndicator'), namespace_))
        if self.RateChartIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sRateChartIndicator>%s</%sRateChartIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.RateChartIndicator).encode(ExternalEncoding), input_name='RateChartIndicator'), namespace_))
    def hasContent_(self):
        if (
            self.NegotiatedRatesIndicator is not None or
            self.RateChartIndicator is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RateInformationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NegotiatedRatesIndicator is not None:
            showIndent(outfile, level)
            outfile.write('NegotiatedRatesIndicator=%s,\n' % quote_python(self.NegotiatedRatesIndicator).encode(ExternalEncoding))
        if self.RateChartIndicator is not None:
            showIndent(outfile, level)
            outfile.write('RateChartIndicator=%s,\n' % quote_python(self.RateChartIndicator).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NegotiatedRatesIndicator':
            NegotiatedRatesIndicator_ = child_.text
            NegotiatedRatesIndicator_ = self.gds_validate_string(NegotiatedRatesIndicator_, node, 'NegotiatedRatesIndicator')
            self.NegotiatedRatesIndicator = NegotiatedRatesIndicator_
        elif nodeName_ == 'RateChartIndicator':
            RateChartIndicator_ = child_.text
            RateChartIndicator_ = self.gds_validate_string(RateChartIndicator_, node, 'RateChartIndicator')
            self.RateChartIndicator = RateChartIndicator_
# end class RateInformationType


class InvoiceLineTotalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if InvoiceLineTotalType.subclass:
            return InvoiceLineTotalType.subclass(*args_, **kwargs_)
        else:
            return InvoiceLineTotalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def export(self, outfile, level, namespace_='', name_='InvoiceLineTotalType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InvoiceLineTotalType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InvoiceLineTotalType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InvoiceLineTotalType', fromsubclass_=False):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyCode).encode(ExternalEncoding), input_name='CurrencyCode'), namespace_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.MonetaryValue).encode(ExternalEncoding), input_name='MonetaryValue'), namespace_))
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InvoiceLineTotalType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyCode=%s,\n' % quote_python(self.CurrencyCode).encode(ExternalEncoding))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('MonetaryValue=%s,\n' % quote_python(self.MonetaryValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class InvoiceLineTotalType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionRequest'
        rootClass = RatingServiceSelectionRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionRequest'
        rootClass = RatingServiceSelectionRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="RatingServiceSelectionRequest",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionRequest'
        rootClass = RatingServiceSelectionRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from raterequest import *\n\n')
    sys.stdout.write('import raterequest as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressType",
    "AmountType",
    "CODType",
    "CodeDescriptionType",
    "CodeType",
    "DeliveryConfirmationType",
    "DimensionsType",
    "InsuredValueType",
    "InvoiceLineTotalType",
    "OnCallAirType",
    "PackageServiceOptionsType",
    "PackageType",
    "PackagingTypeType",
    "PhoneNumberType",
    "RateInformationType",
    "RatingServiceSelectionRequest",
    "RequestType",
    "ScheduleType",
    "ShipFromType",
    "ShipToType",
    "ShipmentServiceOptionsType",
    "ShipmentType",
    "ShipperType",
    "StructuredPhoneNumberType",
    "TransactionReferenceType",
    "UnitOfMeasurementType",
    "VerbalConfirmationType",
    "WeightType"
    ]
