#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Tue Dec 06 11:51:54 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class RatingServiceSelectionResponse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Response=None, RatedShipment=None):
        self.Response = Response
        if RatedShipment is None:
            self.RatedShipment = []
        else:
            self.RatedShipment = RatedShipment
    def factory(*args_, **kwargs_):
        if RatingServiceSelectionResponse.subclass:
            return RatingServiceSelectionResponse.subclass(*args_, **kwargs_)
        else:
            return RatingServiceSelectionResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Response(self): return self.Response
    def set_Response(self, Response): self.Response = Response
    def get_RatedShipment(self): return self.RatedShipment
    def set_RatedShipment(self, RatedShipment): self.RatedShipment = RatedShipment
    def add_RatedShipment(self, value): self.RatedShipment.append(value)
    def insert_RatedShipment(self, index, value): self.RatedShipment[index] = value
    def export(self, outfile, level, namespace_='', name_='RatingServiceSelectionResponse', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatingServiceSelectionResponse')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RatingServiceSelectionResponse'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RatingServiceSelectionResponse', fromsubclass_=False):
        if self.Response:
            self.Response.export(outfile, level, namespace_, name_='Response', )
        for RatedShipment_ in self.RatedShipment:
            RatedShipment_.export(outfile, level, namespace_, name_='RatedShipment')
    def hasContent_(self):
        if (
            self.Response is not None or
            self.RatedShipment
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RatingServiceSelectionResponse'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Response is not None:
            showIndent(outfile, level)
            outfile.write('Response=model_.ResponseType(\n')
            self.Response.exportLiteral(outfile, level, name_='Response')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('RatedShipment=[\n')
        level += 1
        for RatedShipment_ in self.RatedShipment:
            showIndent(outfile, level)
            outfile.write('model_.RatedShipmentType(\n')
            RatedShipment_.exportLiteral(outfile, level, name_='RatedShipmentType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Response':
            obj_ = ResponseType.factory()
            obj_.build(child_)
            self.set_Response(obj_)
        elif nodeName_ == 'RatedShipment':
            obj_ = RatedShipmentType.factory()
            obj_.build(child_)
            self.RatedShipment.append(obj_)
# end class RatingServiceSelectionResponse


class ResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TransactionReference=None, ResponseStatusCode=None, ResponseStatusDescription=None, Error=None):
        self.TransactionReference = TransactionReference
        self.ResponseStatusCode = ResponseStatusCode
        self.ResponseStatusDescription = ResponseStatusDescription
        if Error is None:
            self.Error = []
        else:
            self.Error = Error
    def factory(*args_, **kwargs_):
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def get_ResponseStatusCode(self): return self.ResponseStatusCode
    def set_ResponseStatusCode(self, ResponseStatusCode): self.ResponseStatusCode = ResponseStatusCode
    def get_ResponseStatusDescription(self): return self.ResponseStatusDescription
    def set_ResponseStatusDescription(self, ResponseStatusDescription): self.ResponseStatusDescription = ResponseStatusDescription
    def get_Error(self): return self.Error
    def set_Error(self, Error): self.Error = Error
    def add_Error(self, value): self.Error.append(value)
    def insert_Error(self, index, value): self.Error[index] = value
    def export(self, outfile, level, namespace_='', name_='ResponseType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResponseType', fromsubclass_=False):
        if self.TransactionReference:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference')
        if self.ResponseStatusCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sResponseStatusCode>%s</%sResponseStatusCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.ResponseStatusCode).encode(ExternalEncoding), input_name='ResponseStatusCode'), namespace_))
        if self.ResponseStatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sResponseStatusDescription>%s</%sResponseStatusDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.ResponseStatusDescription).encode(ExternalEncoding), input_name='ResponseStatusDescription'), namespace_))
        for Error_ in self.Error:
            Error_.export(outfile, level, namespace_, name_='Error')
    def hasContent_(self):
        if (
            self.TransactionReference is not None or
            self.ResponseStatusCode is not None or
            self.ResponseStatusDescription is not None or
            self.Error
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResponseType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TransactionReference is not None:
            showIndent(outfile, level)
            outfile.write('TransactionReference=model_.TransactionReferenceType(\n')
            self.TransactionReference.exportLiteral(outfile, level, name_='TransactionReference')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ResponseStatusCode is not None:
            showIndent(outfile, level)
            outfile.write('ResponseStatusCode=%s,\n' % quote_python(self.ResponseStatusCode).encode(ExternalEncoding))
        if self.ResponseStatusDescription is not None:
            showIndent(outfile, level)
            outfile.write('ResponseStatusDescription=%s,\n' % quote_python(self.ResponseStatusDescription).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('Error=[\n')
        level += 1
        for Error_ in self.Error:
            showIndent(outfile, level)
            outfile.write('model_.ErrorType(\n')
            Error_.exportLiteral(outfile, level, name_='ErrorType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.set_TransactionReference(obj_)
        elif nodeName_ == 'ResponseStatusCode':
            ResponseStatusCode_ = child_.text
            ResponseStatusCode_ = self.gds_validate_string(ResponseStatusCode_, node, 'ResponseStatusCode')
            self.ResponseStatusCode = ResponseStatusCode_
        elif nodeName_ == 'ResponseStatusDescription':
            ResponseStatusDescription_ = child_.text
            ResponseStatusDescription_ = self.gds_validate_string(ResponseStatusDescription_, node, 'ResponseStatusDescription')
            self.ResponseStatusDescription = ResponseStatusDescription_
        elif nodeName_ == 'Error':
            obj_ = ErrorType.factory()
            obj_.build(child_)
            self.Error.append(obj_)
# end class ResponseType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None):
        self.CustomerContext = CustomerContext
    def factory(*args_, **kwargs_):
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def export(self, outfile, level, namespace_='', name_='TransactionReferenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransactionReferenceType', fromsubclass_=False):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerContext).encode(ExternalEncoding), input_name='CustomerContext'), namespace_))
    def hasContent_(self):
        if (
            self.CustomerContext is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('CustomerContext=%s,\n' % quote_python(self.CustomerContext).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
# end class TransactionReferenceType


class ErrorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ErrorSeverity=None, ErrorCode=None, ErrorDescription=None, ErrorLocation=None):
        self.ErrorSeverity = ErrorSeverity
        self.ErrorCode = ErrorCode
        self.ErrorDescription = ErrorDescription
        if ErrorLocation is None:
            self.ErrorLocation = []
        else:
            self.ErrorLocation = ErrorLocation
    def factory(*args_, **kwargs_):
        if ErrorType.subclass:
            return ErrorType.subclass(*args_, **kwargs_)
        else:
            return ErrorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ErrorSeverity(self): return self.ErrorSeverity
    def set_ErrorSeverity(self, ErrorSeverity): self.ErrorSeverity = ErrorSeverity
    def get_ErrorCode(self): return self.ErrorCode
    def set_ErrorCode(self, ErrorCode): self.ErrorCode = ErrorCode
    def get_ErrorDescription(self): return self.ErrorDescription
    def set_ErrorDescription(self, ErrorDescription): self.ErrorDescription = ErrorDescription
    def get_ErrorLocation(self): return self.ErrorLocation
    def set_ErrorLocation(self, ErrorLocation): self.ErrorLocation = ErrorLocation
    def add_ErrorLocation(self, value): self.ErrorLocation.append(value)
    def insert_ErrorLocation(self, index, value): self.ErrorLocation[index] = value
    def export(self, outfile, level, namespace_='', name_='ErrorType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ErrorType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ErrorType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ErrorType', fromsubclass_=False):
        if self.ErrorSeverity is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorSeverity>%s</%sErrorSeverity>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorSeverity).encode(ExternalEncoding), input_name='ErrorSeverity'), namespace_))
        if self.ErrorCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorCode>%s</%sErrorCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorCode).encode(ExternalEncoding), input_name='ErrorCode'), namespace_))
        if self.ErrorDescription is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorDescription>%s</%sErrorDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorDescription).encode(ExternalEncoding), input_name='ErrorDescription'), namespace_))
        for ErrorLocation_ in self.ErrorLocation:
            ErrorLocation_.export(outfile, level, namespace_, name_='ErrorLocation')
    def hasContent_(self):
        if (
            self.ErrorSeverity is not None or
            self.ErrorCode is not None or
            self.ErrorDescription is not None or
            self.ErrorLocation
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ErrorType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ErrorSeverity is not None:
            showIndent(outfile, level)
            outfile.write('ErrorSeverity=%s,\n' % quote_python(self.ErrorSeverity).encode(ExternalEncoding))
        if self.ErrorCode is not None:
            showIndent(outfile, level)
            outfile.write('ErrorCode=%s,\n' % quote_python(self.ErrorCode).encode(ExternalEncoding))
        if self.ErrorDescription is not None:
            showIndent(outfile, level)
            outfile.write('ErrorDescription=%s,\n' % quote_python(self.ErrorDescription).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ErrorLocation=[\n')
        level += 1
        for ErrorLocation_ in self.ErrorLocation:
            showIndent(outfile, level)
            outfile.write('model_.ErrorLocationType(\n')
            ErrorLocation_.exportLiteral(outfile, level, name_='ErrorLocationType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ErrorSeverity':
            ErrorSeverity_ = child_.text
            ErrorSeverity_ = self.gds_validate_string(ErrorSeverity_, node, 'ErrorSeverity')
            self.ErrorSeverity = ErrorSeverity_
        elif nodeName_ == 'ErrorCode':
            ErrorCode_ = child_.text
            ErrorCode_ = self.gds_validate_string(ErrorCode_, node, 'ErrorCode')
            self.ErrorCode = ErrorCode_
        elif nodeName_ == 'ErrorDescription':
            ErrorDescription_ = child_.text
            ErrorDescription_ = self.gds_validate_string(ErrorDescription_, node, 'ErrorDescription')
            self.ErrorDescription = ErrorDescription_
        elif nodeName_ == 'ErrorLocation':
            obj_ = ErrorLocationType.factory()
            obj_.build(child_)
            self.ErrorLocation.append(obj_)
# end class ErrorType


class ErrorLocationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ErrorLocationElementName=None, ErrorLocationElementReference=None, ErrorLocationAttributeName=None):
        self.ErrorLocationElementName = ErrorLocationElementName
        self.ErrorLocationElementReference = ErrorLocationElementReference
        self.ErrorLocationAttributeName = ErrorLocationAttributeName
    def factory(*args_, **kwargs_):
        if ErrorLocationType.subclass:
            return ErrorLocationType.subclass(*args_, **kwargs_)
        else:
            return ErrorLocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ErrorLocationElementName(self): return self.ErrorLocationElementName
    def set_ErrorLocationElementName(self, ErrorLocationElementName): self.ErrorLocationElementName = ErrorLocationElementName
    def get_ErrorLocationElementReference(self): return self.ErrorLocationElementReference
    def set_ErrorLocationElementReference(self, ErrorLocationElementReference): self.ErrorLocationElementReference = ErrorLocationElementReference
    def get_ErrorLocationAttributeName(self): return self.ErrorLocationAttributeName
    def set_ErrorLocationAttributeName(self, ErrorLocationAttributeName): self.ErrorLocationAttributeName = ErrorLocationAttributeName
    def export(self, outfile, level, namespace_='', name_='ErrorLocationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ErrorLocationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ErrorLocationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ErrorLocationType', fromsubclass_=False):
        if self.ErrorLocationElementName is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorLocationElementName>%s</%sErrorLocationElementName>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorLocationElementName).encode(ExternalEncoding), input_name='ErrorLocationElementName'), namespace_))
        if self.ErrorLocationElementReference is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorLocationElementReference>%s</%sErrorLocationElementReference>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorLocationElementReference).encode(ExternalEncoding), input_name='ErrorLocationElementReference'), namespace_))
        if self.ErrorLocationAttributeName is not None:
            showIndent(outfile, level)
            outfile.write('<%sErrorLocationAttributeName>%s</%sErrorLocationAttributeName>\n' % (namespace_, self.gds_format_string(quote_xml(self.ErrorLocationAttributeName).encode(ExternalEncoding), input_name='ErrorLocationAttributeName'), namespace_))
    def hasContent_(self):
        if (
            self.ErrorLocationElementName is not None or
            self.ErrorLocationElementReference is not None or
            self.ErrorLocationAttributeName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ErrorLocationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ErrorLocationElementName is not None:
            showIndent(outfile, level)
            outfile.write('ErrorLocationElementName=%s,\n' % quote_python(self.ErrorLocationElementName).encode(ExternalEncoding))
        if self.ErrorLocationElementReference is not None:
            showIndent(outfile, level)
            outfile.write('ErrorLocationElementReference=%s,\n' % quote_python(self.ErrorLocationElementReference).encode(ExternalEncoding))
        if self.ErrorLocationAttributeName is not None:
            showIndent(outfile, level)
            outfile.write('ErrorLocationAttributeName=%s,\n' % quote_python(self.ErrorLocationAttributeName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ErrorLocationElementName':
            ErrorLocationElementName_ = child_.text
            ErrorLocationElementName_ = self.gds_validate_string(ErrorLocationElementName_, node, 'ErrorLocationElementName')
            self.ErrorLocationElementName = ErrorLocationElementName_
        elif nodeName_ == 'ErrorLocationElementReference':
            ErrorLocationElementReference_ = child_.text
            ErrorLocationElementReference_ = self.gds_validate_string(ErrorLocationElementReference_, node, 'ErrorLocationElementReference')
            self.ErrorLocationElementReference = ErrorLocationElementReference_
        elif nodeName_ == 'ErrorLocationAttributeName':
            ErrorLocationAttributeName_ = child_.text
            ErrorLocationAttributeName_ = self.gds_validate_string(ErrorLocationAttributeName_, node, 'ErrorLocationAttributeName')
            self.ErrorLocationAttributeName = ErrorLocationAttributeName_
# end class ErrorLocationType


class RatedShipmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None, RateChart=None, RatedShipmentWarning=None, BillingWeight=None, TransportationCharges=None, ServiceOptionsCharges=None, TotalCharges=None, GuaranteedDaysToDelivery=None, ScheduledDeliveryTime=None, RatedPackage=None, NegotiatedRates=None):
        self.Service = Service
        self.RateChart = RateChart
        if RatedShipmentWarning is None:
            self.RatedShipmentWarning = []
        else:
            self.RatedShipmentWarning = RatedShipmentWarning
        self.BillingWeight = BillingWeight
        self.TransportationCharges = TransportationCharges
        self.ServiceOptionsCharges = ServiceOptionsCharges
        self.TotalCharges = TotalCharges
        self.GuaranteedDaysToDelivery = GuaranteedDaysToDelivery
        self.ScheduledDeliveryTime = ScheduledDeliveryTime
        if RatedPackage is None:
            self.RatedPackage = []
        else:
            self.RatedPackage = RatedPackage
        self.NegotiatedRates = NegotiatedRates
    def factory(*args_, **kwargs_):
        if RatedShipmentType.subclass:
            return RatedShipmentType.subclass(*args_, **kwargs_)
        else:
            return RatedShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def get_RateChart(self): return self.RateChart
    def set_RateChart(self, RateChart): self.RateChart = RateChart
    def get_RatedShipmentWarning(self): return self.RatedShipmentWarning
    def set_RatedShipmentWarning(self, RatedShipmentWarning): self.RatedShipmentWarning = RatedShipmentWarning
    def add_RatedShipmentWarning(self, value): self.RatedShipmentWarning.append(value)
    def insert_RatedShipmentWarning(self, index, value): self.RatedShipmentWarning[index] = value
    def get_BillingWeight(self): return self.BillingWeight
    def set_BillingWeight(self, BillingWeight): self.BillingWeight = BillingWeight
    def get_TransportationCharges(self): return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges): self.TransportationCharges = TransportationCharges
    def get_ServiceOptionsCharges(self): return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges): self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_TotalCharges(self): return self.TotalCharges
    def set_TotalCharges(self, TotalCharges): self.TotalCharges = TotalCharges
    def get_GuaranteedDaysToDelivery(self): return self.GuaranteedDaysToDelivery
    def set_GuaranteedDaysToDelivery(self, GuaranteedDaysToDelivery): self.GuaranteedDaysToDelivery = GuaranteedDaysToDelivery
    def get_ScheduledDeliveryTime(self): return self.ScheduledDeliveryTime
    def set_ScheduledDeliveryTime(self, ScheduledDeliveryTime): self.ScheduledDeliveryTime = ScheduledDeliveryTime
    def get_RatedPackage(self): return self.RatedPackage
    def set_RatedPackage(self, RatedPackage): self.RatedPackage = RatedPackage
    def add_RatedPackage(self, value): self.RatedPackage.append(value)
    def insert_RatedPackage(self, index, value): self.RatedPackage[index] = value
    def get_NegotiatedRates(self): return self.NegotiatedRates
    def set_NegotiatedRates(self, NegotiatedRates): self.NegotiatedRates = NegotiatedRates
    def export(self, outfile, level, namespace_='', name_='RatedShipmentType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatedShipmentType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RatedShipmentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RatedShipmentType', fromsubclass_=False):
        if self.Service:
            self.Service.export(outfile, level, namespace_, name_='Service', )
        if self.RateChart is not None:
            showIndent(outfile, level)
            outfile.write('<%sRateChart>%s</%sRateChart>\n' % (namespace_, self.gds_format_string(quote_xml(self.RateChart).encode(ExternalEncoding), input_name='RateChart'), namespace_))
        for RatedShipmentWarning_ in self.RatedShipmentWarning:
            showIndent(outfile, level)
            outfile.write('<%sRatedShipmentWarning>%s</%sRatedShipmentWarning>\n' % (namespace_, self.gds_format_string(quote_xml(RatedShipmentWarning_).encode(ExternalEncoding), input_name='RatedShipmentWarning'), namespace_))
        if self.BillingWeight:
            self.BillingWeight.export(outfile, level, namespace_, name_='BillingWeight', )
        if self.TransportationCharges:
            self.TransportationCharges.export(outfile, level, namespace_, name_='TransportationCharges', )
        if self.ServiceOptionsCharges:
            self.ServiceOptionsCharges.export(outfile, level, namespace_, name_='ServiceOptionsCharges', )
        if self.TotalCharges:
            self.TotalCharges.export(outfile, level, namespace_, name_='TotalCharges', )
        if self.GuaranteedDaysToDelivery is not None:
            showIndent(outfile, level)
            outfile.write('<%sGuaranteedDaysToDelivery>%s</%sGuaranteedDaysToDelivery>\n' % (namespace_, self.gds_format_string(quote_xml(self.GuaranteedDaysToDelivery).encode(ExternalEncoding), input_name='GuaranteedDaysToDelivery'), namespace_))
        if self.ScheduledDeliveryTime is not None:
            showIndent(outfile, level)
            outfile.write('<%sScheduledDeliveryTime>%s</%sScheduledDeliveryTime>\n' % (namespace_, self.gds_format_string(quote_xml(self.ScheduledDeliveryTime).encode(ExternalEncoding), input_name='ScheduledDeliveryTime'), namespace_))
        for RatedPackage_ in self.RatedPackage:
            RatedPackage_.export(outfile, level, namespace_, name_='RatedPackage')
        if self.NegotiatedRates:
            self.NegotiatedRates.export(outfile, level, namespace_, name_='NegotiatedRates')
    def hasContent_(self):
        if (
            self.Service is not None or
            self.RateChart is not None or
            self.RatedShipmentWarning or
            self.BillingWeight is not None or
            self.TransportationCharges is not None or
            self.ServiceOptionsCharges is not None or
            self.TotalCharges is not None or
            self.GuaranteedDaysToDelivery is not None or
            self.ScheduledDeliveryTime is not None or
            self.RatedPackage or
            self.NegotiatedRates is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RatedShipmentType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Service is not None:
            showIndent(outfile, level)
            outfile.write('Service=model_.CodeDescriptionType(\n')
            self.Service.exportLiteral(outfile, level, name_='Service')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RateChart is not None:
            showIndent(outfile, level)
            outfile.write('RateChart=%s,\n' % quote_python(self.RateChart).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RatedShipmentWarning=[\n')
        level += 1
        for RatedShipmentWarning_ in self.RatedShipmentWarning:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(RatedShipmentWarning_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.BillingWeight is not None:
            showIndent(outfile, level)
            outfile.write('BillingWeight=model_.WeightType(\n')
            self.BillingWeight.exportLiteral(outfile, level, name_='BillingWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TransportationCharges is not None:
            showIndent(outfile, level)
            outfile.write('TransportationCharges=model_.ChargesType(\n')
            self.TransportationCharges.exportLiteral(outfile, level, name_='TransportationCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ServiceOptionsCharges is not None:
            showIndent(outfile, level)
            outfile.write('ServiceOptionsCharges=model_.ChargesType(\n')
            self.ServiceOptionsCharges.exportLiteral(outfile, level, name_='ServiceOptionsCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalCharges is not None:
            showIndent(outfile, level)
            outfile.write('TotalCharges=model_.ChargesType(\n')
            self.TotalCharges.exportLiteral(outfile, level, name_='TotalCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.GuaranteedDaysToDelivery is not None:
            showIndent(outfile, level)
            outfile.write('GuaranteedDaysToDelivery=%s,\n' % quote_python(self.GuaranteedDaysToDelivery).encode(ExternalEncoding))
        if self.ScheduledDeliveryTime is not None:
            showIndent(outfile, level)
            outfile.write('ScheduledDeliveryTime=%s,\n' % quote_python(self.ScheduledDeliveryTime).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('RatedPackage=[\n')
        level += 1
        for RatedPackage_ in self.RatedPackage:
            showIndent(outfile, level)
            outfile.write('model_.RatedPackageType(\n')
            RatedPackage_.exportLiteral(outfile, level, name_='RatedPackageType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.NegotiatedRates is not None:
            showIndent(outfile, level)
            outfile.write('NegotiatedRates=model_.NegotiatedRatesType(\n')
            self.NegotiatedRates.exportLiteral(outfile, level, name_='NegotiatedRates')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            obj_ = CodeDescriptionType.factory()
            obj_.build(child_)
            self.set_Service(obj_)
        elif nodeName_ == 'RateChart':
            RateChart_ = child_.text
            RateChart_ = self.gds_validate_string(RateChart_, node, 'RateChart')
            self.RateChart = RateChart_
        elif nodeName_ == 'RatedShipmentWarning':
            RatedShipmentWarning_ = child_.text
            RatedShipmentWarning_ = self.gds_validate_string(RatedShipmentWarning_, node, 'RatedShipmentWarning')
            self.RatedShipmentWarning.append(RatedShipmentWarning_)
        elif nodeName_ == 'BillingWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.set_BillingWeight(obj_)
        elif nodeName_ == 'TransportationCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_TransportationCharges(obj_)
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_ServiceOptionsCharges(obj_)
        elif nodeName_ == 'TotalCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_TotalCharges(obj_)
        elif nodeName_ == 'GuaranteedDaysToDelivery':
            GuaranteedDaysToDelivery_ = child_.text
            GuaranteedDaysToDelivery_ = self.gds_validate_string(GuaranteedDaysToDelivery_, node, 'GuaranteedDaysToDelivery')
            self.GuaranteedDaysToDelivery = GuaranteedDaysToDelivery_
        elif nodeName_ == 'ScheduledDeliveryTime':
            ScheduledDeliveryTime_ = child_.text
            ScheduledDeliveryTime_ = self.gds_validate_string(ScheduledDeliveryTime_, node, 'ScheduledDeliveryTime')
            self.ScheduledDeliveryTime = ScheduledDeliveryTime_
        elif nodeName_ == 'RatedPackage':
            obj_ = RatedPackageType.factory()
            obj_.build(child_)
            self.RatedPackage.append(obj_)
        elif nodeName_ == 'NegotiatedRates':
            obj_ = NegotiatedRatesType.factory()
            obj_.build(child_)
            self.set_NegotiatedRates(obj_)
# end class RatedShipmentType


class CodeDescriptionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if CodeDescriptionType.subclass:
            return CodeDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CodeDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='CodeDescriptionType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CodeDescriptionType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CodeDescriptionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CodeDescriptionType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CodeDescriptionType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class CodeDescriptionType


class WeightType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, UnitOfMeasurement=None, Weight=None):
        self.UnitOfMeasurement = UnitOfMeasurement
        self.Weight = Weight
    def factory(*args_, **kwargs_):
        if WeightType.subclass:
            return WeightType.subclass(*args_, **kwargs_)
        else:
            return WeightType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UnitOfMeasurement(self): return self.UnitOfMeasurement
    def set_UnitOfMeasurement(self, UnitOfMeasurement): self.UnitOfMeasurement = UnitOfMeasurement
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def export(self, outfile, level, namespace_='', name_='WeightType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='WeightType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='WeightType', fromsubclass_=False):
        if self.UnitOfMeasurement:
            self.UnitOfMeasurement.export(outfile, level, namespace_, name_='UnitOfMeasurement', )
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeight>%s</%sWeight>\n' % (namespace_, self.gds_format_string(quote_xml(self.Weight).encode(ExternalEncoding), input_name='Weight'), namespace_))
    def hasContent_(self):
        if (
            self.UnitOfMeasurement is not None or
            self.Weight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WeightType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UnitOfMeasurement is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasurement=model_.UnitOfMeasurementType(\n')
            self.UnitOfMeasurement.exportLiteral(outfile, level, name_='UnitOfMeasurement')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=%s,\n' % quote_python(self.Weight).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UnitOfMeasurement':
            obj_ = UnitOfMeasurementType.factory()
            obj_.build(child_)
            self.set_UnitOfMeasurement(obj_)
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
# end class WeightType


class UnitOfMeasurementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Code=None, Description=None):
        self.Code = Code
        self.Description = Description
    def factory(*args_, **kwargs_):
        if UnitOfMeasurementType.subclass:
            return UnitOfMeasurementType.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasurementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Code(self): return self.Code
    def set_Code(self, Code): self.Code = Code
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def export(self, outfile, level, namespace_='', name_='UnitOfMeasurementType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasurementType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitOfMeasurementType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnitOfMeasurementType', fromsubclass_=False):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('<%sCode>%s</%sCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.Code).encode(ExternalEncoding), input_name='Code'), namespace_))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('<%sDescription>%s</%sDescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.Description).encode(ExternalEncoding), input_name='Description'), namespace_))
    def hasContent_(self):
        if (
            self.Code is not None or
            self.Description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnitOfMeasurementType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Code is not None:
            showIndent(outfile, level)
            outfile.write('Code=%s,\n' % quote_python(self.Code).encode(ExternalEncoding))
        if self.Description is not None:
            showIndent(outfile, level)
            outfile.write('Description=%s,\n' % quote_python(self.Description).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Code':
            Code_ = child_.text
            Code_ = self.gds_validate_string(Code_, node, 'Code')
            self.Code = Code_
        elif nodeName_ == 'Description':
            Description_ = child_.text
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
# end class UnitOfMeasurementType


class ChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CurrencyCode=None, MonetaryValue=None):
        self.CurrencyCode = CurrencyCode
        self.MonetaryValue = MonetaryValue
    def factory(*args_, **kwargs_):
        if ChargesType.subclass:
            return ChargesType.subclass(*args_, **kwargs_)
        else:
            return ChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CurrencyCode(self): return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode): self.CurrencyCode = CurrencyCode
    def get_MonetaryValue(self): return self.MonetaryValue
    def set_MonetaryValue(self, MonetaryValue): self.MonetaryValue = MonetaryValue
    def export(self, outfile, level, namespace_='', name_='ChargesType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ChargesType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ChargesType', fromsubclass_=False):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyCode).encode(ExternalEncoding), input_name='CurrencyCode'), namespace_))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('<%sMonetaryValue>%s</%sMonetaryValue>\n' % (namespace_, self.gds_format_string(quote_xml(self.MonetaryValue).encode(ExternalEncoding), input_name='MonetaryValue'), namespace_))
    def hasContent_(self):
        if (
            self.CurrencyCode is not None or
            self.MonetaryValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ChargesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CurrencyCode is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyCode=%s,\n' % quote_python(self.CurrencyCode).encode(ExternalEncoding))
        if self.MonetaryValue is not None:
            showIndent(outfile, level)
            outfile.write('MonetaryValue=%s,\n' % quote_python(self.MonetaryValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CurrencyCode':
            CurrencyCode_ = child_.text
            CurrencyCode_ = self.gds_validate_string(CurrencyCode_, node, 'CurrencyCode')
            self.CurrencyCode = CurrencyCode_
        elif nodeName_ == 'MonetaryValue':
            MonetaryValue_ = child_.text
            MonetaryValue_ = self.gds_validate_string(MonetaryValue_, node, 'MonetaryValue')
            self.MonetaryValue = MonetaryValue_
# end class ChargesType


class RatedPackageType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TransportationCharges=None, ServiceOptionsCharges=None, TotalCharges=None, Weight=None, BillingWeight=None):
        self.TransportationCharges = TransportationCharges
        self.ServiceOptionsCharges = ServiceOptionsCharges
        self.TotalCharges = TotalCharges
        self.Weight = Weight
        self.BillingWeight = BillingWeight
    def factory(*args_, **kwargs_):
        if RatedPackageType.subclass:
            return RatedPackageType.subclass(*args_, **kwargs_)
        else:
            return RatedPackageType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TransportationCharges(self): return self.TransportationCharges
    def set_TransportationCharges(self, TransportationCharges): self.TransportationCharges = TransportationCharges
    def get_ServiceOptionsCharges(self): return self.ServiceOptionsCharges
    def set_ServiceOptionsCharges(self, ServiceOptionsCharges): self.ServiceOptionsCharges = ServiceOptionsCharges
    def get_TotalCharges(self): return self.TotalCharges
    def set_TotalCharges(self, TotalCharges): self.TotalCharges = TotalCharges
    def get_Weight(self): return self.Weight
    def set_Weight(self, Weight): self.Weight = Weight
    def get_BillingWeight(self): return self.BillingWeight
    def set_BillingWeight(self, BillingWeight): self.BillingWeight = BillingWeight
    def export(self, outfile, level, namespace_='', name_='RatedPackageType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RatedPackageType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RatedPackageType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RatedPackageType', fromsubclass_=False):
        if self.TransportationCharges:
            self.TransportationCharges.export(outfile, level, namespace_, name_='TransportationCharges')
        if self.ServiceOptionsCharges:
            self.ServiceOptionsCharges.export(outfile, level, namespace_, name_='ServiceOptionsCharges')
        if self.TotalCharges:
            self.TotalCharges.export(outfile, level, namespace_, name_='TotalCharges', )
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('<%sWeight>%s</%sWeight>\n' % (namespace_, self.gds_format_string(quote_xml(self.Weight).encode(ExternalEncoding), input_name='Weight'), namespace_))
        if self.BillingWeight:
            self.BillingWeight.export(outfile, level, namespace_, name_='BillingWeight')
    def hasContent_(self):
        if (
            self.TransportationCharges is not None or
            self.ServiceOptionsCharges is not None or
            self.TotalCharges is not None or
            self.Weight is not None or
            self.BillingWeight is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RatedPackageType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TransportationCharges is not None:
            showIndent(outfile, level)
            outfile.write('TransportationCharges=model_.ChargesType(\n')
            self.TransportationCharges.exportLiteral(outfile, level, name_='TransportationCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ServiceOptionsCharges is not None:
            showIndent(outfile, level)
            outfile.write('ServiceOptionsCharges=model_.ChargesType(\n')
            self.ServiceOptionsCharges.exportLiteral(outfile, level, name_='ServiceOptionsCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TotalCharges is not None:
            showIndent(outfile, level)
            outfile.write('TotalCharges=model_.ChargesType(\n')
            self.TotalCharges.exportLiteral(outfile, level, name_='TotalCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Weight is not None:
            showIndent(outfile, level)
            outfile.write('Weight=%s,\n' % quote_python(self.Weight).encode(ExternalEncoding))
        if self.BillingWeight is not None:
            showIndent(outfile, level)
            outfile.write('BillingWeight=model_.WeightType(\n')
            self.BillingWeight.exportLiteral(outfile, level, name_='BillingWeight')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TransportationCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_TransportationCharges(obj_)
        elif nodeName_ == 'ServiceOptionsCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_ServiceOptionsCharges(obj_)
        elif nodeName_ == 'TotalCharges':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_TotalCharges(obj_)
        elif nodeName_ == 'Weight':
            Weight_ = child_.text
            Weight_ = self.gds_validate_string(Weight_, node, 'Weight')
            self.Weight = Weight_
        elif nodeName_ == 'BillingWeight':
            obj_ = WeightType.factory()
            obj_.build(child_)
            self.set_BillingWeight(obj_)
# end class RatedPackageType


class NegotiatedRatesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NetSummaryCharges=None):
        self.NetSummaryCharges = NetSummaryCharges
    def factory(*args_, **kwargs_):
        if NegotiatedRatesType.subclass:
            return NegotiatedRatesType.subclass(*args_, **kwargs_)
        else:
            return NegotiatedRatesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NetSummaryCharges(self): return self.NetSummaryCharges
    def set_NetSummaryCharges(self, NetSummaryCharges): self.NetSummaryCharges = NetSummaryCharges
    def export(self, outfile, level, namespace_='', name_='NegotiatedRatesType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NegotiatedRatesType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NegotiatedRatesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NegotiatedRatesType', fromsubclass_=False):
        if self.NetSummaryCharges:
            self.NetSummaryCharges.export(outfile, level, namespace_, name_='NetSummaryCharges', )
    def hasContent_(self):
        if (
            self.NetSummaryCharges is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NegotiatedRatesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NetSummaryCharges is not None:
            showIndent(outfile, level)
            outfile.write('NetSummaryCharges=model_.NetSummaryChargesType(\n')
            self.NetSummaryCharges.exportLiteral(outfile, level, name_='NetSummaryCharges')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NetSummaryCharges':
            obj_ = NetSummaryChargesType.factory()
            obj_.build(child_)
            self.set_NetSummaryCharges(obj_)
# end class NegotiatedRatesType


class NetSummaryChargesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GrandTotal=None):
        self.GrandTotal = GrandTotal
    def factory(*args_, **kwargs_):
        if NetSummaryChargesType.subclass:
            return NetSummaryChargesType.subclass(*args_, **kwargs_)
        else:
            return NetSummaryChargesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GrandTotal(self): return self.GrandTotal
    def set_GrandTotal(self, GrandTotal): self.GrandTotal = GrandTotal
    def export(self, outfile, level, namespace_='', name_='NetSummaryChargesType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NetSummaryChargesType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NetSummaryChargesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NetSummaryChargesType', fromsubclass_=False):
        if self.GrandTotal:
            self.GrandTotal.export(outfile, level, namespace_, name_='GrandTotal', )
    def hasContent_(self):
        if (
            self.GrandTotal is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NetSummaryChargesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.GrandTotal is not None:
            showIndent(outfile, level)
            outfile.write('GrandTotal=model_.ChargesType(\n')
            self.GrandTotal.exportLiteral(outfile, level, name_='GrandTotal')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GrandTotal':
            obj_ = ChargesType.factory()
            obj_.build(child_)
            self.set_GrandTotal(obj_)
# end class NetSummaryChargesType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionResponse'
        rootClass = RatingServiceSelectionResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionResponse'
        rootClass = RatingServiceSelectionResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="RatingServiceSelectionResponse",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'RatingServiceSelectionResponse'
        rootClass = RatingServiceSelectionResponse
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from ratereresponse import *\n\n')
    sys.stdout.write('import ratereresponse as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ChargesType",
    "CodeDescriptionType",
    "ErrorLocationType",
    "ErrorType",
    "NegotiatedRatesType",
    "NetSummaryChargesType",
    "RatedPackageType",
    "RatedShipmentType",
    "RatingServiceSelectionResponse",
    "ResponseType",
    "TransactionReferenceType",
    "UnitOfMeasurementType",
    "WeightType"
    ]
