#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Tue Dec 13 14:26:23 2011 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class AddressValidationRequest(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Request=None, RegionalRequestIndicator=None, MaximumListSize=None, AddressKeyFormat=None):
        self.Request = Request
        self.RegionalRequestIndicator = RegionalRequestIndicator
        self.MaximumListSize = MaximumListSize
        if AddressKeyFormat is None:
            self.AddressKeyFormat = []
        else:
            self.AddressKeyFormat = AddressKeyFormat
    def factory(*args_, **kwargs_):
        if AddressValidationRequest.subclass:
            return AddressValidationRequest.subclass(*args_, **kwargs_)
        else:
            return AddressValidationRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Request(self): return self.Request
    def set_Request(self, Request): self.Request = Request
    def get_RegionalRequestIndicator(self): return self.RegionalRequestIndicator
    def set_RegionalRequestIndicator(self, RegionalRequestIndicator): self.RegionalRequestIndicator = RegionalRequestIndicator
    def get_MaximumListSize(self): return self.MaximumListSize
    def set_MaximumListSize(self, MaximumListSize): self.MaximumListSize = MaximumListSize
    def get_AddressKeyFormat(self): return self.AddressKeyFormat
    def set_AddressKeyFormat(self, AddressKeyFormat): self.AddressKeyFormat = AddressKeyFormat
    def add_AddressKeyFormat(self, value): self.AddressKeyFormat.append(value)
    def insert_AddressKeyFormat(self, index, value): self.AddressKeyFormat[index] = value
    def export(self, outfile, level, namespace_='', name_='AddressValidationRequest', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressValidationRequest')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressValidationRequest'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressValidationRequest', fromsubclass_=False):
        if self.Request:
            self.Request.export(outfile, level, namespace_, name_='Request', )
        if self.RegionalRequestIndicator is not None:
            showIndent(outfile, level)
            outfile.write('<%sRegionalRequestIndicator>%s</%sRegionalRequestIndicator>\n' % (namespace_, self.gds_format_string(quote_xml(self.RegionalRequestIndicator).encode(ExternalEncoding), input_name='RegionalRequestIndicator'), namespace_))
        if self.MaximumListSize is not None:
            showIndent(outfile, level)
            outfile.write('<%sMaximumListSize>%s</%sMaximumListSize>\n' % (namespace_, self.gds_format_string(quote_xml(self.MaximumListSize).encode(ExternalEncoding), input_name='MaximumListSize'), namespace_))
        for AddressKeyFormat_ in self.AddressKeyFormat:
            AddressKeyFormat_.export(outfile, level, namespace_, name_='AddressKeyFormat')
    def hasContent_(self):
        if (
            self.Request is not None or
            self.RegionalRequestIndicator is not None or
            self.MaximumListSize is not None or
            self.AddressKeyFormat
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressValidationRequest'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Request is not None:
            showIndent(outfile, level)
            outfile.write('Request=model_.RequestType(\n')
            self.Request.exportLiteral(outfile, level, name_='Request')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RegionalRequestIndicator is not None:
            showIndent(outfile, level)
            outfile.write('RegionalRequestIndicator=%s,\n' % quote_python(self.RegionalRequestIndicator).encode(ExternalEncoding))
        if self.MaximumListSize is not None:
            showIndent(outfile, level)
            outfile.write('MaximumListSize=%s,\n' % quote_python(self.MaximumListSize).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AddressKeyFormat=[\n')
        level += 1
        for AddressKeyFormat_ in self.AddressKeyFormat:
            showIndent(outfile, level)
            outfile.write('model_.AddressKeyFormatType(\n')
            AddressKeyFormat_.exportLiteral(outfile, level, name_='AddressKeyFormatType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Request':
            obj_ = RequestType.factory()
            obj_.build(child_)
            self.set_Request(obj_)
        elif nodeName_ == 'RegionalRequestIndicator':
            RegionalRequestIndicator_ = child_.text
            RegionalRequestIndicator_ = self.gds_validate_string(RegionalRequestIndicator_, node, 'RegionalRequestIndicator')
            self.RegionalRequestIndicator = RegionalRequestIndicator_
        elif nodeName_ == 'MaximumListSize':
            MaximumListSize_ = child_.text
            MaximumListSize_ = self.gds_validate_string(MaximumListSize_, node, 'MaximumListSize')
            self.MaximumListSize = MaximumListSize_
        elif nodeName_ == 'AddressKeyFormat':
            obj_ = AddressKeyFormatType.factory()
            obj_.build(child_)
            self.AddressKeyFormat.append(obj_)
# end class AddressValidationRequest


class RegionalRequestIndicator(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if RegionalRequestIndicator.subclass:
            return RegionalRequestIndicator.subclass(*args_, **kwargs_)
        else:
            return RegionalRequestIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='RegionalRequestIndicator', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegionalRequestIndicator')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RegionalRequestIndicator'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RegionalRequestIndicator', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RegionalRequestIndicator'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RegionalRequestIndicator


class MaximumListSize(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MaximumListSize.subclass:
            return MaximumListSize.subclass(*args_, **kwargs_)
        else:
            return MaximumListSize(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='MaximumListSize', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MaximumListSize')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MaximumListSize'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MaximumListSize', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MaximumListSize'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MaximumListSize


class AddressKeyFormatType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ConsigneeName=None, BuildingName=None, AddressLine=None, Region=None, PoliticalDivision2=None, PoliticalDivision1=None, PostcodePrimaryLow=None, PostcodeExtendedLow=None, Urbanization=None, CountryCode=None):
        self.ConsigneeName = ConsigneeName
        self.BuildingName = BuildingName
        if AddressLine is None:
            self.AddressLine = []
        else:
            self.AddressLine = AddressLine
        self.Region = Region
        self.PoliticalDivision2 = PoliticalDivision2
        self.PoliticalDivision1 = PoliticalDivision1
        self.PostcodePrimaryLow = PostcodePrimaryLow
        self.PostcodeExtendedLow = PostcodeExtendedLow
        self.Urbanization = Urbanization
        self.CountryCode = CountryCode
    def factory(*args_, **kwargs_):
        if AddressKeyFormatType.subclass:
            return AddressKeyFormatType.subclass(*args_, **kwargs_)
        else:
            return AddressKeyFormatType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ConsigneeName(self): return self.ConsigneeName
    def set_ConsigneeName(self, ConsigneeName): self.ConsigneeName = ConsigneeName
    def get_BuildingName(self): return self.BuildingName
    def set_BuildingName(self, BuildingName): self.BuildingName = BuildingName
    def get_AddressLine(self): return self.AddressLine
    def set_AddressLine(self, AddressLine): self.AddressLine = AddressLine
    def add_AddressLine(self, value): self.AddressLine.append(value)
    def insert_AddressLine(self, index, value): self.AddressLine[index] = value
    def get_Region(self): return self.Region
    def set_Region(self, Region): self.Region = Region
    def get_PoliticalDivision2(self): return self.PoliticalDivision2
    def set_PoliticalDivision2(self, PoliticalDivision2): self.PoliticalDivision2 = PoliticalDivision2
    def get_PoliticalDivision1(self): return self.PoliticalDivision1
    def set_PoliticalDivision1(self, PoliticalDivision1): self.PoliticalDivision1 = PoliticalDivision1
    def get_PostcodePrimaryLow(self): return self.PostcodePrimaryLow
    def set_PostcodePrimaryLow(self, PostcodePrimaryLow): self.PostcodePrimaryLow = PostcodePrimaryLow
    def get_PostcodeExtendedLow(self): return self.PostcodeExtendedLow
    def set_PostcodeExtendedLow(self, PostcodeExtendedLow): self.PostcodeExtendedLow = PostcodeExtendedLow
    def get_Urbanization(self): return self.Urbanization
    def set_Urbanization(self, Urbanization): self.Urbanization = Urbanization
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def export(self, outfile, level, namespace_='', name_='AddressKeyFormatType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressKeyFormatType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressKeyFormatType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressKeyFormatType', fromsubclass_=False):
        if self.ConsigneeName is not None:
            showIndent(outfile, level)
            outfile.write('<%sConsigneeName>%s</%sConsigneeName>\n' % (namespace_, self.gds_format_string(quote_xml(self.ConsigneeName).encode(ExternalEncoding), input_name='ConsigneeName'), namespace_))
        if self.BuildingName is not None:
            showIndent(outfile, level)
            outfile.write('<%sBuildingName>%s</%sBuildingName>\n' % (namespace_, self.gds_format_string(quote_xml(self.BuildingName).encode(ExternalEncoding), input_name='BuildingName'), namespace_))
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level)
            outfile.write('<%sAddressLine>%s</%sAddressLine>\n' % (namespace_, self.gds_format_string(quote_xml(AddressLine_).encode(ExternalEncoding), input_name='AddressLine'), namespace_))
        if self.Region is not None:
            showIndent(outfile, level)
            outfile.write('<%sRegion>%s</%sRegion>\n' % (namespace_, self.gds_format_string(quote_xml(self.Region).encode(ExternalEncoding), input_name='Region'), namespace_))
        if self.PoliticalDivision2 is not None:
            showIndent(outfile, level)
            outfile.write('<%sPoliticalDivision2>%s</%sPoliticalDivision2>\n' % (namespace_, self.gds_format_string(quote_xml(self.PoliticalDivision2).encode(ExternalEncoding), input_name='PoliticalDivision2'), namespace_))
        if self.PoliticalDivision1 is not None:
            showIndent(outfile, level)
            outfile.write('<%sPoliticalDivision1>%s</%sPoliticalDivision1>\n' % (namespace_, self.gds_format_string(quote_xml(self.PoliticalDivision1).encode(ExternalEncoding), input_name='PoliticalDivision1'), namespace_))
        if self.PostcodePrimaryLow is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostcodePrimaryLow>%s</%sPostcodePrimaryLow>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostcodePrimaryLow).encode(ExternalEncoding), input_name='PostcodePrimaryLow'), namespace_))
        if self.PostcodeExtendedLow is not None:
            showIndent(outfile, level)
            outfile.write('<%sPostcodeExtendedLow>%s</%sPostcodeExtendedLow>\n' % (namespace_, self.gds_format_string(quote_xml(self.PostcodeExtendedLow).encode(ExternalEncoding), input_name='PostcodeExtendedLow'), namespace_))
        if self.Urbanization is not None:
            showIndent(outfile, level)
            outfile.write('<%sUrbanization>%s</%sUrbanization>\n' % (namespace_, self.gds_format_string(quote_xml(self.Urbanization).encode(ExternalEncoding), input_name='Urbanization'), namespace_))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('<%sCountryCode>%s</%sCountryCode>\n' % (namespace_, self.gds_format_string(quote_xml(self.CountryCode).encode(ExternalEncoding), input_name='CountryCode'), namespace_))
    def hasContent_(self):
        if (
            self.ConsigneeName is not None or
            self.BuildingName is not None or
            self.AddressLine or
            self.Region is not None or
            self.PoliticalDivision2 is not None or
            self.PoliticalDivision1 is not None or
            self.PostcodePrimaryLow is not None or
            self.PostcodeExtendedLow is not None or
            self.Urbanization is not None or
            self.CountryCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressKeyFormatType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ConsigneeName is not None:
            showIndent(outfile, level)
            outfile.write('ConsigneeName=%s,\n' % quote_python(self.ConsigneeName).encode(ExternalEncoding))
        if self.BuildingName is not None:
            showIndent(outfile, level)
            outfile.write('BuildingName=%s,\n' % quote_python(self.BuildingName).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AddressLine=[\n')
        level += 1
        for AddressLine_ in self.AddressLine:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AddressLine_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Region is not None:
            showIndent(outfile, level)
            outfile.write('Region=%s,\n' % quote_python(self.Region).encode(ExternalEncoding))
        if self.PoliticalDivision2 is not None:
            showIndent(outfile, level)
            outfile.write('PoliticalDivision2=%s,\n' % quote_python(self.PoliticalDivision2).encode(ExternalEncoding))
        if self.PoliticalDivision1 is not None:
            showIndent(outfile, level)
            outfile.write('PoliticalDivision1=%s,\n' % quote_python(self.PoliticalDivision1).encode(ExternalEncoding))
        if self.PostcodePrimaryLow is not None:
            showIndent(outfile, level)
            outfile.write('PostcodePrimaryLow=%s,\n' % quote_python(self.PostcodePrimaryLow).encode(ExternalEncoding))
        if self.PostcodeExtendedLow is not None:
            showIndent(outfile, level)
            outfile.write('PostcodeExtendedLow=%s,\n' % quote_python(self.PostcodeExtendedLow).encode(ExternalEncoding))
        if self.Urbanization is not None:
            showIndent(outfile, level)
            outfile.write('Urbanization=%s,\n' % quote_python(self.Urbanization).encode(ExternalEncoding))
        if self.CountryCode is not None:
            showIndent(outfile, level)
            outfile.write('CountryCode=%s,\n' % quote_python(self.CountryCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ConsigneeName':
            ConsigneeName_ = child_.text
            ConsigneeName_ = self.gds_validate_string(ConsigneeName_, node, 'ConsigneeName')
            self.ConsigneeName = ConsigneeName_
        elif nodeName_ == 'BuildingName':
            BuildingName_ = child_.text
            BuildingName_ = self.gds_validate_string(BuildingName_, node, 'BuildingName')
            self.BuildingName = BuildingName_
        elif nodeName_ == 'AddressLine':
            AddressLine_ = child_.text
            AddressLine_ = self.gds_validate_string(AddressLine_, node, 'AddressLine')
            self.AddressLine.append(AddressLine_)
        elif nodeName_ == 'Region':
            Region_ = child_.text
            Region_ = self.gds_validate_string(Region_, node, 'Region')
            self.Region = Region_
        elif nodeName_ == 'PoliticalDivision2':
            PoliticalDivision2_ = child_.text
            PoliticalDivision2_ = self.gds_validate_string(PoliticalDivision2_, node, 'PoliticalDivision2')
            self.PoliticalDivision2 = PoliticalDivision2_
        elif nodeName_ == 'PoliticalDivision1':
            PoliticalDivision1_ = child_.text
            PoliticalDivision1_ = self.gds_validate_string(PoliticalDivision1_, node, 'PoliticalDivision1')
            self.PoliticalDivision1 = PoliticalDivision1_
        elif nodeName_ == 'PostcodePrimaryLow':
            PostcodePrimaryLow_ = child_.text
            PostcodePrimaryLow_ = self.gds_validate_string(PostcodePrimaryLow_, node, 'PostcodePrimaryLow')
            self.PostcodePrimaryLow = PostcodePrimaryLow_
        elif nodeName_ == 'PostcodeExtendedLow':
            PostcodeExtendedLow_ = child_.text
            PostcodeExtendedLow_ = self.gds_validate_string(PostcodeExtendedLow_, node, 'PostcodeExtendedLow')
            self.PostcodeExtendedLow = PostcodeExtendedLow_
        elif nodeName_ == 'Urbanization':
            Urbanization_ = child_.text
            Urbanization_ = self.gds_validate_string(Urbanization_, node, 'Urbanization')
            self.Urbanization = Urbanization_
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
# end class AddressKeyFormatType


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TransactionReference=None, RequestAction=None, RequestOption=None):
        self.TransactionReference = TransactionReference
        self.RequestAction = RequestAction
        self.RequestOption = RequestOption
    def factory(*args_, **kwargs_):
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TransactionReference(self): return self.TransactionReference
    def set_TransactionReference(self, TransactionReference): self.TransactionReference = TransactionReference
    def get_RequestAction(self): return self.RequestAction
    def set_RequestAction(self, RequestAction): self.RequestAction = RequestAction
    def get_RequestOption(self): return self.RequestOption
    def set_RequestOption(self, RequestOption): self.RequestOption = RequestOption
    def export(self, outfile, level, namespace_='', name_='RequestType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequestType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequestType', fromsubclass_=False):
        if self.TransactionReference:
            self.TransactionReference.export(outfile, level, namespace_, name_='TransactionReference')
        if self.RequestAction is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestAction>%s</%sRequestAction>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestAction).encode(ExternalEncoding), input_name='RequestAction'), namespace_))
        if self.RequestOption is not None:
            showIndent(outfile, level)
            outfile.write('<%sRequestOption>%s</%sRequestOption>\n' % (namespace_, self.gds_format_string(quote_xml(self.RequestOption).encode(ExternalEncoding), input_name='RequestOption'), namespace_))
    def hasContent_(self):
        if (
            self.TransactionReference is not None or
            self.RequestAction is not None or
            self.RequestOption is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RequestType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TransactionReference is not None:
            showIndent(outfile, level)
            outfile.write('TransactionReference=model_.TransactionReferenceType(\n')
            self.TransactionReference.exportLiteral(outfile, level, name_='TransactionReference')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.RequestAction is not None:
            showIndent(outfile, level)
            outfile.write('RequestAction=%s,\n' % quote_python(self.RequestAction).encode(ExternalEncoding))
        if self.RequestOption is not None:
            showIndent(outfile, level)
            outfile.write('RequestOption=%s,\n' % quote_python(self.RequestOption).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TransactionReference':
            obj_ = TransactionReferenceType.factory()
            obj_.build(child_)
            self.set_TransactionReference(obj_)
        elif nodeName_ == 'RequestAction':
            RequestAction_ = child_.text
            RequestAction_ = self.gds_validate_string(RequestAction_, node, 'RequestAction')
            self.RequestAction = RequestAction_
        elif nodeName_ == 'RequestOption':
            RequestOption_ = child_.text
            RequestOption_ = self.gds_validate_string(RequestOption_, node, 'RequestOption')
            self.RequestOption = RequestOption_
# end class RequestType


class TransactionReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CustomerContext=None, ToolVersion=None):
        self.CustomerContext = CustomerContext
        self.ToolVersion = ToolVersion
    def factory(*args_, **kwargs_):
        if TransactionReferenceType.subclass:
            return TransactionReferenceType.subclass(*args_, **kwargs_)
        else:
            return TransactionReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerContext(self): return self.CustomerContext
    def set_CustomerContext(self, CustomerContext): self.CustomerContext = CustomerContext
    def get_ToolVersion(self): return self.ToolVersion
    def set_ToolVersion(self, ToolVersion): self.ToolVersion = ToolVersion
    def export(self, outfile, level, namespace_='', name_='TransactionReferenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionReferenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransactionReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransactionReferenceType', fromsubclass_=False):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('<%sCustomerContext>%s</%sCustomerContext>\n' % (namespace_, self.gds_format_string(quote_xml(self.CustomerContext).encode(ExternalEncoding), input_name='CustomerContext'), namespace_))
        if self.ToolVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sToolVersion>%s</%sToolVersion>\n' % (namespace_, self.gds_format_string(quote_xml(self.ToolVersion).encode(ExternalEncoding), input_name='ToolVersion'), namespace_))
    def hasContent_(self):
        if (
            self.CustomerContext is not None or
            self.ToolVersion is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionReferenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerContext is not None:
            showIndent(outfile, level)
            outfile.write('CustomerContext=%s,\n' % quote_python(self.CustomerContext).encode(ExternalEncoding))
        if self.ToolVersion is not None:
            showIndent(outfile, level)
            outfile.write('ToolVersion=%s,\n' % quote_python(self.ToolVersion).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerContext':
            CustomerContext_ = child_.text
            CustomerContext_ = self.gds_validate_string(CustomerContext_, node, 'CustomerContext')
            self.CustomerContext = CustomerContext_
        elif nodeName_ == 'ToolVersion':
            ToolVersion_ = child_.text
            ToolVersion_ = self.gds_validate_string(ToolVersion_, node, 'ToolVersion')
            self.ToolVersion = ToolVersion_
# end class TransactionReferenceType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'AddressValidationRequest'
        rootClass = AddressValidationRequest
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from xavrequest import *\n\n')
    sys.stdout.write('import xavrequest as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AddressKeyFormatType",
    "AddressValidationRequest",
    "MaximumListSize",
    "RegionalRequestIndicator",
    "RequestType",
    "TransactionReferenceType"
    ]
